#include "mx_funcs.h"

#define true 1
#define false 0
struct textureresource { string filename; string colorspace; };
struct BSDF { closure color response; color throughput; float thickness; float ior; };
#define EDF closure color
#define VDF closure color
struct surfaceshader { closure color bsdf; closure color edf; float opacity; };
#define volumeshader closure color
#define displacementshader vector
#define lightshader closure color
#define MATERIAL closure color

#define M_FLOAT_EPS 1e-8

void NG_extract_color4(color4 in, int index, output float out)
{
    float N_r_color4_out = in.rgb[0];
    float N_g_color4_out = in.rgb[1];
    float N_b_color4_out = in.rgb[2];
    float N_a_color4_out = in.a;
    float N_sw_color4_out = 0.0;
    if (float(index) < float(1))
    {
        N_sw_color4_out = N_r_color4_out;
    }
    else if (float(index) < float(2))
    {
        N_sw_color4_out = N_g_color4_out;
    }
    else if (float(index) < float(3))
    {
        N_sw_color4_out = N_b_color4_out;
    }
    else if (float(index) < float(4))
    {
        N_sw_color4_out = N_a_color4_out;
    }
    else if (float(index) < float(5))
    {
        N_sw_color4_out = 0;
    }
    out = N_sw_color4_out;
}

void mx_surface_unlit(float emission_weight, color emission_color, float transmission_weight, color transmission_color, float opacity, output surfaceshader result)
{
    float trans = clamp(transmission_weight, 0.0, 1.0);
    result.bsdf = trans * transmission_color * transparent();
    result.edf  = (1.0 - trans) * emission_weight * emission_color * emission();
    result.opacity = clamp(opacity, 0.0, 1.0);
}

void NG_convert_vector4_shader(vector4 in, output surfaceshader out)
{
    closure color null_closure = 0;
    color4 vec4_to_color4_out = color4(color(in.x, in.y, in.z), in.w);
    color color4_to_color3_out = color(vec4_to_color4_out.rgb[0], vec4_to_color4_out.rgb[1], vec4_to_color4_out.rgb[2]);
    float color4_to_float_out = 0.0;
    NG_extract_color4(vec4_to_color4_out, 3, color4_to_float_out);
    surfaceshader surface_out = surfaceshader(null_closure, null_closure, 1.0);
    mx_surface_unlit(1, color4_to_color3_out, 0, color(1, 1, 1), color4_to_float_out, surface_out);
    out = surface_out;
}

MATERIAL mx_surfacematerial(surfaceshader surface, displacementshader disp)
{
    float opacity_weight = clamp(surface.opacity, 0.0, 1.0);
    return (surface.bsdf + surface.edf) * opacity_weight + transparent() * (1.0 - opacity_weight);
}

shader material_absval_vector4_out
[[
    string mtlx_category = "surfacematerial",
    string mtlx_name = "material_absval_vector4_out"
]]
(
    displacementshader displacementshader1 = vector(0.0),
    vector4 absval_vector4_in = {0, 0, 0, 0},
    output MATERIAL out = 0
)
{
    closure color null_closure = 0;
    vector4 absval_vector4_out = abs(absval_vector4_in);
    surfaceshader shader_absval_vector4_out_out = surfaceshader(null_closure, null_closure, 1.0);
    NG_convert_vector4_shader(absval_vector4_out, shader_absval_vector4_out_out);
    MATERIAL material_absval_vector4_out_out = mx_surfacematerial(shader_absval_vector4_out_out, displacementshader1);
    out = material_absval_vector4_out_out;
}

