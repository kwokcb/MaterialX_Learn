#version 450

#pragma shader_stage(vertex)

// Uniform block: PrivateUniforms
layout (std140, binding=0) uniform PrivateUniforms_vertex
{
    mat4 u_worldMatrix;
    mat4 u_viewProjectionMatrix;
    mat4 u_worldInverseTransposeMatrix;
};

// Inputs block: VertexInputs
layout (location = 0) in vec3 i_position;
layout (location = 1) in vec3 i_normal;
layout (location = 2) in vec3 i_tangent;

layout (location = 0) out vec3 normalWorld;
layout (location = 1) out vec3 tangentWorld;
layout (location = 2) out vec3 positionObject;
layout (location = 3) out vec3 positionWorld;

void main()
{
    vec4 hPositionWorld = u_worldMatrix * vec4(i_position, 1.0);
    gl_Position = u_viewProjectionMatrix * hPositionWorld;
    normalWorld = normalize((u_worldInverseTransposeMatrix * vec4(i_normal, 0.0)).xyz);
    tangentWorld = normalize((u_worldMatrix * vec4(i_tangent, 0.0)).xyz);
    positionObject = i_position;
    positionWorld = hPositionWorld.xyz;
}


