#usda 1.0

def NodeGraph "NG_baked"
{
    color3f outputs:base_color_output.connect = </NG_baked/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Bishop_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Bishop_B_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Bishop_B_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Bishop_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Bishop_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Bishop_B_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Bishop_B_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Bishop_B_baked"
{
    token inputs:surfaceshader.connect = </Bishop_B_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked2"
{
    color3f outputs:base_color_output.connect = </NG_baked2/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked2/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked2/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked2/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked2/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked2/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Bishop_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Bishop_W_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Bishop_W_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Bishop_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Bishop_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Bishop_W_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked2/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Bishop_W_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked2.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked2.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked2.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked2.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked2.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked2.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Bishop_W_baked"
{
    token inputs:surfaceshader.connect = </Bishop_W_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked3"
{
    color3f outputs:base_color_output.connect = </NG_baked3/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked3/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked3/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked3/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked3/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked3/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Castle_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Castle_B_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Castle_B_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Castle_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Castle_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Castle_B_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked3/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Castle_B_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked3.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked3.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked3.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked3.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked3.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked3.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Castle_B_baked"
{
    token inputs:surfaceshader.connect = </Castle_B_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked4"
{
    color3f outputs:base_color_output.connect = </NG_baked4/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked4/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked4/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked4/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked4/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked4/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Castle_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Castle_W_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Castle_W_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Castle_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Castle_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Castle_W_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked4/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Castle_W_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked4.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked4.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked4.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked4.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked4.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked4.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Castle_W_baked"
{
    token inputs:surfaceshader.connect = </Castle_W_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked5"
{
    color3f outputs:base_color_output.connect = </NG_baked5/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked5/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked5/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked5/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked5/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked5/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Chessboard_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Chessboard_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Chessboard_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Chessboard_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Chessboard_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Chessboard_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked5/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Chessboard_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked5.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked5.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked5.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked5.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked5.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked5.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Chessboard_baked"
{
    token inputs:surfaceshader.connect = </Chessboard_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked6"
{
    color3f outputs:base_color_output.connect = </NG_baked6/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked6/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked6/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked6/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked6/subsurface_color_baked.outputs:out>
    float outputs:subsurface_output.connect = </NG_baked6/subsurface_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked6/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_King_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_King_B_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_King_B_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_King_B_standard_surface_subsurface.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_King_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_King_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_King_B_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked6/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "King_B_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked6.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked6.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked6.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked6.outputs:specular_roughness_output>
    float inputs:subsurface.connect = </NG_baked6.outputs:subsurface_output>
    color3f inputs:subsurface_color.connect = </NG_baked6.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked6.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_King_B_baked"
{
    token inputs:surfaceshader.connect = </King_B_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked7"
{
    color3f outputs:base_color_output.connect = </NG_baked7/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked7/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked7/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked7/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked7/subsurface_color_baked.outputs:out>
    float outputs:subsurface_output.connect = </NG_baked7/subsurface_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked7/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_King_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_King_W_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_King_W_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_King_W_standard_surface_subsurface.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_King_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_King_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_King_W_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked7/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "King_W_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked7.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked7.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked7.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked7.outputs:specular_roughness_output>
    float inputs:subsurface.connect = </NG_baked7.outputs:subsurface_output>
    color3f inputs:subsurface_color.connect = </NG_baked7.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked7.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_King_W_baked"
{
    token inputs:surfaceshader.connect = </King_W_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked8"
{
    color3f outputs:base_color_output.connect = </NG_baked8/base_color_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked8/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked8/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked8/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked8/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Knight_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Knight_B_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Knight_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Knight_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Knight_B_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked8/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Knight_B_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked8.outputs:base_color_output>
    vector3f inputs:normal.connect = </NG_baked8.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked8.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked8.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked8.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Knight_B_baked"
{
    token inputs:surfaceshader.connect = </Knight_B_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked9"
{
    color3f outputs:base_color_output.connect = </NG_baked9/base_color_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked9/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked9/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked9/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked9/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Knight_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Knight_W_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Knight_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Knight_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Knight_W_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked9/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Knight_W_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked9.outputs:base_color_output>
    vector3f inputs:normal.connect = </NG_baked9.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked9.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked9.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked9.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Knight_W_baked"
{
    token inputs:surfaceshader.connect = </Knight_W_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked10"
{
    color3f outputs:base_color_output.connect = </NG_baked10/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked10/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked10/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked10/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked10/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked10/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Pawn_Body_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Pawn_Body_B_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Pawn_Body_B_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Pawn_Body_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Pawn_Body_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Pawn_Body_B_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked10/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Pawn_Body_B_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked10.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked10.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked10.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked10.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked10.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked10.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Pawn_Body_B_baked"
{
    token inputs:surfaceshader.connect = </Pawn_Body_B_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked11"
{
    color3f outputs:base_color_output.connect = </NG_baked11/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked11/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked11/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked11/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked11/subsurface_color_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked11/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Pawn_Body_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Pawn_Body_W_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Pawn_Body_W_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Pawn_Body_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Pawn_Body_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Pawn_Body_W_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked11/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Pawn_Body_W_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked11.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked11.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked11.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked11.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color.connect = </NG_baked11.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked11.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Pawn_Body_W_baked"
{
    token inputs:surfaceshader.connect = </Pawn_Body_W_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked12"
{
    vector3f outputs:normal_output.connect = </NG_baked12/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked12/specular_roughness_baked.outputs:out>

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Pawn_Top_B_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Pawn_Top_B_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked12/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Pawn_Top_B_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color = (1, 1, 1)
    vector3f inputs:normal.connect = </NG_baked12.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked12.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color = (1, 1, 1)
    color3f inputs:subsurface_radius = (1, 1, 1)
    float inputs:subsurface_scale = 0.003
    float inputs:transmission = 1
    color3f inputs:transmission_color = (0.2995, 0.5, 0.450276)
    token outputs:out
}

def Material "M_Pawn_Top_B_baked"
{
    token inputs:surfaceshader.connect = </Pawn_Top_B_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked13"
{
    vector3f outputs:normal_output.connect = </NG_baked13/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked13/specular_roughness_baked.outputs:out>

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Pawn_Top_W_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Pawn_Top_W_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked13/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Pawn_Top_W_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color = (1, 1, 1)
    vector3f inputs:normal.connect = </NG_baked13.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked13.outputs:specular_roughness_output>
    float inputs:subsurface = 0
    color3f inputs:subsurface_color = (1, 1, 1)
    color3f inputs:subsurface_radius = (1, 1, 1)
    float inputs:subsurface_scale = 0.003
    float inputs:transmission = 1
    color3f inputs:transmission_color = (1, 1, 0.828)
    token outputs:out
}

def Material "M_Pawn_Top_W_baked"
{
    token inputs:surfaceshader.connect = </Pawn_Top_W_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked14"
{
    color3f outputs:base_color_output.connect = </NG_baked14/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked14/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked14/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked14/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked14/subsurface_color_baked.outputs:out>
    float outputs:subsurface_output.connect = </NG_baked14/subsurface_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked14/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Queen_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Queen_B_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Queen_B_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Queen_B_standard_surface_subsurface.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Queen_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Queen_B_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Queen_B_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked14/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Queen_B_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked14.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked14.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked14.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked14.outputs:specular_roughness_output>
    float inputs:subsurface.connect = </NG_baked14.outputs:subsurface_output>
    color3f inputs:subsurface_color.connect = </NG_baked14.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked14.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.003
    token outputs:out
}

def Material "M_Queen_B_baked"
{
    token inputs:surfaceshader.connect = </Queen_B_baked.outputs:out>
    token outputs:out
}

def NodeGraph "NG_baked15"
{
    color3f outputs:base_color_output.connect = </NG_baked15/base_color_baked.outputs:out>
    float outputs:metalness_output.connect = </NG_baked15/metalness_baked.outputs:out>
    vector3f outputs:normal_output.connect = </NG_baked15/normal_baked_map.outputs:out>
    float outputs:specular_roughness_output.connect = </NG_baked15/specular_roughness_baked.outputs:out>
    color3f outputs:subsurface_color_output.connect = </NG_baked15/subsurface_color_baked.outputs:out>
    float outputs:subsurface_output.connect = </NG_baked15/subsurface_baked.outputs:out>
    color3f outputs:subsurface_radius_output.connect = </NG_baked15/subsurface_radius_baked.outputs:out>

    def Shader "base_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Queen_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "metalness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Queen_W_standard_surface_metalness.png@
        float outputs:out
    }

    def Shader "specular_roughness_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Queen_W_standard_surface_specular_roughness.png@
        float outputs:out
    }

    def Shader "subsurface_baked"
    {
        uniform token info:id = "ND_image_float"
        asset inputs:file = @M_Queen_W_standard_surface_subsurface.png@
        float outputs:out
    }

    def Shader "subsurface_color_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Queen_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "subsurface_radius_baked"
    {
        uniform token info:id = "ND_image_color3"
        asset inputs:file = @M_Queen_W_standard_surface_base_color.png@
        color3f outputs:out
    }

    def Shader "normal_baked"
    {
        uniform token info:id = "ND_image_vector3"
        asset inputs:file = @M_Queen_W_standard_surface_normal.png@
        vector3f outputs:out
    }

    def Shader "normal_baked_map"
    {
        uniform token info:id = "ND_normalmap"
        vector3f inputs:in.connect = </NG_baked15/normal_baked.outputs:out>
        vector3f outputs:out
    }
}

def Shader "Queen_W_baked"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    color3f inputs:base_color.connect = </NG_baked15.outputs:base_color_output>
    float inputs:metalness.connect = </NG_baked15.outputs:metalness_output>
    vector3f inputs:normal.connect = </NG_baked15.outputs:normal_output>
    float inputs:specular_roughness.connect = </NG_baked15.outputs:specular_roughness_output>
    float inputs:subsurface.connect = </NG_baked15.outputs:subsurface_output>
    color3f inputs:subsurface_color.connect = </NG_baked15.outputs:subsurface_color_output>
    color3f inputs:subsurface_radius.connect = </NG_baked15.outputs:subsurface_radius_output>
    float inputs:subsurface_scale = 0.001
    token outputs:out
}

def Material "M_Queen_W_baked"
{
    token inputs:surfaceshader.connect = </Queen_W_baked.outputs:out>
    token outputs:out
}

