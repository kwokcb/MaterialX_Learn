{
  "materialx": {
    "geompropdef:Bobject": {
      "geomprop": "bitangent",
      "index": "0",
      "space": "object",
      "type": "vector3"
    },
    "geompropdef:Bworld": {
      "geomprop": "bitangent",
      "index": "0",
      "space": "world",
      "type": "vector3"
    },
    "geompropdef:Nobject": {
      "geomprop": "normal",
      "space": "object",
      "type": "vector3"
    },
    "geompropdef:Nworld": {
      "geomprop": "normal",
      "space": "world",
      "type": "vector3"
    },
    "geompropdef:Pobject": {
      "geomprop": "position",
      "space": "object",
      "type": "vector3"
    },
    "geompropdef:Pworld": {
      "geomprop": "position",
      "space": "world",
      "type": "vector3"
    },
    "geompropdef:Tobject": {
      "geomprop": "tangent",
      "index": "0",
      "space": "object",
      "type": "vector3"
    },
    "geompropdef:Tworld": {
      "geomprop": "tangent",
      "index": "0",
      "space": "world",
      "type": "vector3"
    },
    "geompropdef:UV0": {
      "geomprop": "texcoord",
      "index": "0",
      "type": "vector2"
    },
    "implementation:IMPL_standard_surface_surfaceshader_100": {
      "nodedef": "ND_standard_surface_surfaceshader_100",
      "nodegraph": "NG_standard_surface_surfaceshader_100"
    },
    "implementation:IMPL_standard_surface_surfaceshader_101": {
      "nodedef": "ND_standard_surface_surfaceshader",
      "nodegraph": "NG_standard_surface_surfaceshader_100"
    },
    "implementation:IM_absorption_vdf_genmdl": {
      "nodedef": "ND_absorption_vdf",
      "sourcecode": "mx::pbrlib::mx_absorption_vdf(mxp_absorption:{{absorption}})",
      "target": "genmdl"
    },
    "implementation:IM_absval_color3_genglsl": {
      "nodedef": "ND_absval_color3",
      "sourcecode": "abs({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_absval_color3_genmdl": {
      "nodedef": "ND_absval_color3",
      "sourcecode": "math::abs({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_absval_color3_genmsl": {
      "nodedef": "ND_absval_color3",
      "sourcecode": "abs({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_absval_color3_genosl": {
      "nodedef": "ND_absval_color3",
      "sourcecode": "abs({{in}})",
      "target": "genosl"
    },
    "implementation:IM_absval_color4_genglsl": {
      "nodedef": "ND_absval_color4",
      "sourcecode": "abs({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_absval_color4_genmdl": {
      "nodedef": "ND_absval_color4",
      "sourcecode": "mx::stdlib::mx_absval_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_absval_color4_genmsl": {
      "nodedef": "ND_absval_color4",
      "sourcecode": "abs({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_absval_color4_genosl": {
      "nodedef": "ND_absval_color4",
      "sourcecode": "abs({{in}})",
      "target": "genosl"
    },
    "implementation:IM_absval_float_genglsl": {
      "nodedef": "ND_absval_float",
      "sourcecode": "abs({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_absval_float_genmdl": {
      "nodedef": "ND_absval_float",
      "sourcecode": "math::abs({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_absval_float_genmsl": {
      "nodedef": "ND_absval_float",
      "sourcecode": "abs({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_absval_float_genosl": {
      "nodedef": "ND_absval_float",
      "sourcecode": "abs({{in}})",
      "target": "genosl"
    },
    "implementation:IM_absval_vector2_genglsl": {
      "nodedef": "ND_absval_vector2",
      "sourcecode": "abs({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_absval_vector2_genmdl": {
      "nodedef": "ND_absval_vector2",
      "sourcecode": "math::abs({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_absval_vector2_genmsl": {
      "nodedef": "ND_absval_vector2",
      "sourcecode": "abs({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_absval_vector2_genosl": {
      "nodedef": "ND_absval_vector2",
      "sourcecode": "abs({{in}})",
      "target": "genosl"
    },
    "implementation:IM_absval_vector3_genglsl": {
      "nodedef": "ND_absval_vector3",
      "sourcecode": "abs({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_absval_vector3_genmdl": {
      "nodedef": "ND_absval_vector3",
      "sourcecode": "math::abs({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_absval_vector3_genmsl": {
      "nodedef": "ND_absval_vector3",
      "sourcecode": "abs({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_absval_vector3_genosl": {
      "nodedef": "ND_absval_vector3",
      "sourcecode": "abs({{in}})",
      "target": "genosl"
    },
    "implementation:IM_absval_vector4_genglsl": {
      "nodedef": "ND_absval_vector4",
      "sourcecode": "abs({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_absval_vector4_genmdl": {
      "nodedef": "ND_absval_vector4",
      "sourcecode": "math::abs({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_absval_vector4_genmsl": {
      "nodedef": "ND_absval_vector4",
      "sourcecode": "abs({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_absval_vector4_genosl": {
      "nodedef": "ND_absval_vector4",
      "sourcecode": "abs({{in}})",
      "target": "genosl"
    },
    "implementation:IM_acos_float_genglsl": {
      "nodedef": "ND_acos_float",
      "sourcecode": "acos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_acos_float_genmdl": {
      "nodedef": "ND_acos_float",
      "sourcecode": "math::acos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_acos_float_genmsl": {
      "nodedef": "ND_acos_float",
      "sourcecode": "acos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_acos_float_genosl": {
      "nodedef": "ND_acos_float",
      "sourcecode": "acos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_acos_vector2_genglsl": {
      "nodedef": "ND_acos_vector2",
      "sourcecode": "acos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_acos_vector2_genmdl": {
      "nodedef": "ND_acos_vector2",
      "sourcecode": "math::acos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_acos_vector2_genmsl": {
      "nodedef": "ND_acos_vector2",
      "sourcecode": "acos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_acos_vector2_genosl": {
      "nodedef": "ND_acos_vector2",
      "sourcecode": "acos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_acos_vector3_genglsl": {
      "nodedef": "ND_acos_vector3",
      "sourcecode": "acos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_acos_vector3_genmdl": {
      "nodedef": "ND_acos_vector3",
      "sourcecode": "math::acos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_acos_vector3_genmsl": {
      "nodedef": "ND_acos_vector3",
      "sourcecode": "acos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_acos_vector3_genosl": {
      "nodedef": "ND_acos_vector3",
      "sourcecode": "acos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_acos_vector4_genglsl": {
      "nodedef": "ND_acos_vector4",
      "sourcecode": "acos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_acos_vector4_genmdl": {
      "nodedef": "ND_acos_vector4",
      "sourcecode": "math::acos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_acos_vector4_genmsl": {
      "nodedef": "ND_acos_vector4",
      "sourcecode": "acos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_acos_vector4_genosl": {
      "nodedef": "ND_acos_vector4",
      "sourcecode": "acos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_add_bsdf_genglsl": {
      "nodedef": "ND_add_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_add_bsdf_genmdl": {
      "nodedef": "ND_add_bsdf",
      "sourcecode": "mx::pbrlib::mx_add_bsdf(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_add_bsdf_genmsl": {
      "nodedef": "ND_add_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_add_bsdf_genosl": {
      "nodedef": "ND_add_bsdf",
      "target": "genosl"
    },
    "implementation:IM_add_color3FA_genglsl": {
      "nodedef": "ND_add_color3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_color3FA_genmdl": {
      "nodedef": "ND_add_color3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_color3FA_genmsl": {
      "nodedef": "ND_add_color3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_color3FA_genosl": {
      "nodedef": "ND_add_color3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_color3_genglsl": {
      "nodedef": "ND_add_color3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_color3_genmdl": {
      "nodedef": "ND_add_color3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_color3_genmsl": {
      "nodedef": "ND_add_color3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_color3_genosl": {
      "nodedef": "ND_add_color3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_color4FA_genglsl": {
      "nodedef": "ND_add_color4FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_color4FA_genmdl": {
      "nodedef": "ND_add_color4FA",
      "sourcecode": "mx_add({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_add_color4FA_genmsl": {
      "nodedef": "ND_add_color4FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_color4FA_genosl": {
      "nodedef": "ND_add_color4FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_color4_genglsl": {
      "nodedef": "ND_add_color4",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_color4_genmdl": {
      "nodedef": "ND_add_color4",
      "sourcecode": "mx_add({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_add_color4_genmsl": {
      "nodedef": "ND_add_color4",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_color4_genosl": {
      "nodedef": "ND_add_color4",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_edf_genglsl": {
      "nodedef": "ND_add_edf",
      "target": "genglsl"
    },
    "implementation:IM_add_edf_genmdl": {
      "nodedef": "ND_add_edf",
      "sourcecode": "mx::pbrlib::mx_add_edf(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_add_edf_genmsl": {
      "nodedef": "ND_add_edf",
      "target": "genmsl"
    },
    "implementation:IM_add_edf_genosl": {
      "nodedef": "ND_add_edf",
      "target": "genosl"
    },
    "implementation:IM_add_float_genglsl": {
      "nodedef": "ND_add_float",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_float_genmdl": {
      "nodedef": "ND_add_float",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_float_genmsl": {
      "nodedef": "ND_add_float",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_float_genosl": {
      "nodedef": "ND_add_float",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_matrix33FA_genglsl": {
      "nodedef": "ND_add_matrix33FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_matrix33FA_genmdl": {
      "nodedef": "ND_add_matrix33FA",
      "sourcecode": "{{in1}} + float3x3({{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_add_matrix33FA_genmsl": {
      "nodedef": "ND_add_matrix33FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_matrix33FA_genosl": {
      "nodedef": "ND_add_matrix33FA",
      "sourcecode": "mx_add({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_add_matrix33_genglsl": {
      "nodedef": "ND_add_matrix33",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_matrix33_genmdl": {
      "nodedef": "ND_add_matrix33",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_matrix33_genmsl": {
      "nodedef": "ND_add_matrix33",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_matrix33_genosl": {
      "nodedef": "ND_add_matrix33",
      "sourcecode": "mx_add({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_add_matrix44FA_genglsl": {
      "nodedef": "ND_add_matrix44FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_matrix44FA_genmdl": {
      "nodedef": "ND_add_matrix44FA",
      "sourcecode": "{{in1}} + float4x4({{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_add_matrix44FA_genmsl": {
      "nodedef": "ND_add_matrix44FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_matrix44FA_genosl": {
      "nodedef": "ND_add_matrix44FA",
      "sourcecode": "mx_add({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_add_matrix44_genglsl": {
      "nodedef": "ND_add_matrix44",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_matrix44_genmdl": {
      "nodedef": "ND_add_matrix44",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_matrix44_genmsl": {
      "nodedef": "ND_add_matrix44",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_matrix44_genosl": {
      "nodedef": "ND_add_matrix44",
      "sourcecode": "mx_add({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_add_vdf_genmdl": {
      "nodedef": "ND_add_vdf",
      "sourcecode": "mx::pbrlib::mx_add_vdf(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_add_vector2FA_genglsl": {
      "nodedef": "ND_add_vector2FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_vector2FA_genmdl": {
      "nodedef": "ND_add_vector2FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_vector2FA_genmsl": {
      "nodedef": "ND_add_vector2FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_vector2FA_genosl": {
      "nodedef": "ND_add_vector2FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_vector2_genglsl": {
      "nodedef": "ND_add_vector2",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_vector2_genmdl": {
      "nodedef": "ND_add_vector2",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_vector2_genmsl": {
      "nodedef": "ND_add_vector2",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_vector2_genosl": {
      "nodedef": "ND_add_vector2",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_vector3FA_genglsl": {
      "nodedef": "ND_add_vector3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_vector3FA_genmdl": {
      "nodedef": "ND_add_vector3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_vector3FA_genmsl": {
      "nodedef": "ND_add_vector3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_vector3FA_genosl": {
      "nodedef": "ND_add_vector3FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_vector3_genglsl": {
      "nodedef": "ND_add_vector3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_vector3_genmdl": {
      "nodedef": "ND_add_vector3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_vector3_genmsl": {
      "nodedef": "ND_add_vector3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_vector3_genosl": {
      "nodedef": "ND_add_vector3",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_vector4FA_genglsl": {
      "nodedef": "ND_add_vector4FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_vector4FA_genmdl": {
      "nodedef": "ND_add_vector4FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_vector4FA_genmsl": {
      "nodedef": "ND_add_vector4FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_vector4FA_genosl": {
      "nodedef": "ND_add_vector4FA",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_add_vector4_genglsl": {
      "nodedef": "ND_add_vector4",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_add_vector4_genmdl": {
      "nodedef": "ND_add_vector4",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_add_vector4_genmsl": {
      "nodedef": "ND_add_vector4",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_add_vector4_genosl": {
      "nodedef": "ND_add_vector4",
      "sourcecode": "{{in1}} + {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_ambientocclusion_float_genmdl": {
      "nodedef": "ND_ambientocclusion_float",
      "sourcecode": "mx::stdlib::mx_ambientocclusion_float(mxp_coneangle:{{coneangle}}, mxp_maxdistance:{{maxdistance}})",
      "target": "genmdl"
    },
    "implementation:IM_ambientocclusion_float_genosl": {
      "file": "mx_ambientocclusion_float.osl",
      "function": "mx_ambientocclusion_float",
      "nodedef": "ND_ambientocclusion_float",
      "target": "genosl"
    },
    "implementation:IM_anisotropic_vdf_genglsl": {
      "file": "mx_anisotropic_vdf.glsl",
      "function": "mx_anisotropic_vdf",
      "nodedef": "ND_anisotropic_vdf",
      "target": "genglsl"
    },
    "implementation:IM_anisotropic_vdf_genmdl": {
      "nodedef": "ND_anisotropic_vdf",
      "sourcecode": "mx::pbrlib::mx_anisotropic_vdf(mxp_absorption:{{absorption}}, mxp_scattering:{{scattering}}, mxp_anisotropy:{{anisotropy}})",
      "target": "genmdl"
    },
    "implementation:IM_anisotropic_vdf_genmsl": {
      "file": "../genglsl/mx_anisotropic_vdf.glsl",
      "function": "mx_anisotropic_vdf",
      "nodedef": "ND_anisotropic_vdf",
      "target": "genmsl"
    },
    "implementation:IM_anisotropic_vdf_genosl": {
      "file": "legacy/mx_anisotropic_vdf.osl",
      "function": "mx_anisotropic_vdf",
      "nodedef": "ND_anisotropic_vdf",
      "target": "genosl"
    },
    "implementation:IM_artistic_ior_genglsl": {
      "file": "mx_artistic_ior.glsl",
      "function": "mx_artistic_ior",
      "nodedef": "ND_artistic_ior",
      "target": "genglsl"
    },
    "implementation:IM_artistic_ior_genmdl": {
      "nodedef": "ND_artistic_ior",
      "sourcecode": "mx::pbrlib::mx_artistic_ior(mxp_reflectivity:{{reflectivity}}, mxp_edge_color:{{edge_color}})",
      "target": "genmdl"
    },
    "implementation:IM_artistic_ior_genmsl": {
      "file": "../genglsl/mx_artistic_ior.glsl",
      "function": "mx_artistic_ior",
      "nodedef": "ND_artistic_ior",
      "target": "genmsl"
    },
    "implementation:IM_artistic_ior_genosl": {
      "file": "mx_artistic_ior.osl",
      "function": "mx_artistic_ior",
      "nodedef": "ND_artistic_ior",
      "target": "genosl"
    },
    "implementation:IM_asin_float_genglsl": {
      "nodedef": "ND_asin_float",
      "sourcecode": "asin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_asin_float_genmdl": {
      "nodedef": "ND_asin_float",
      "sourcecode": "math::asin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_asin_float_genmsl": {
      "nodedef": "ND_asin_float",
      "sourcecode": "asin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_asin_float_genosl": {
      "nodedef": "ND_asin_float",
      "sourcecode": "asin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_asin_vector2_genglsl": {
      "nodedef": "ND_asin_vector2",
      "sourcecode": "asin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_asin_vector2_genmdl": {
      "nodedef": "ND_asin_vector2",
      "sourcecode": "math::asin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_asin_vector2_genmsl": {
      "nodedef": "ND_asin_vector2",
      "sourcecode": "asin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_asin_vector2_genosl": {
      "nodedef": "ND_asin_vector2",
      "sourcecode": "asin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_asin_vector3_genglsl": {
      "nodedef": "ND_asin_vector3",
      "sourcecode": "asin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_asin_vector3_genmdl": {
      "nodedef": "ND_asin_vector3",
      "sourcecode": "math::asin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_asin_vector3_genmsl": {
      "nodedef": "ND_asin_vector3",
      "sourcecode": "asin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_asin_vector3_genosl": {
      "nodedef": "ND_asin_vector3",
      "sourcecode": "asin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_asin_vector4_genglsl": {
      "nodedef": "ND_asin_vector4",
      "sourcecode": "asin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_asin_vector4_genmdl": {
      "nodedef": "ND_asin_vector4",
      "sourcecode": "math::asin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_asin_vector4_genmsl": {
      "nodedef": "ND_asin_vector4",
      "sourcecode": "asin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_asin_vector4_genosl": {
      "nodedef": "ND_asin_vector4",
      "sourcecode": "asin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_atan2_float_genglsl": {
      "nodedef": "ND_atan2_float",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_atan2_float_genmdl": {
      "nodedef": "ND_atan2_float",
      "sourcecode": "math::atan2({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_atan2_float_genmsl": {
      "nodedef": "ND_atan2_float",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_atan2_float_genosl": {
      "nodedef": "ND_atan2_float",
      "sourcecode": "atan2({{in1}},{{in2}})",
      "target": "genosl"
    },
    "implementation:IM_atan2_vector2_genglsl": {
      "nodedef": "ND_atan2_vector2",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_atan2_vector2_genmdl": {
      "nodedef": "ND_atan2_vector2",
      "sourcecode": "math::atan2({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_atan2_vector2_genmsl": {
      "nodedef": "ND_atan2_vector2",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_atan2_vector2_genosl": {
      "nodedef": "ND_atan2_vector2",
      "sourcecode": "atan2({{in1}},{{in2}})",
      "target": "genosl"
    },
    "implementation:IM_atan2_vector3_genglsl": {
      "nodedef": "ND_atan2_vector3",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_atan2_vector3_genmdl": {
      "nodedef": "ND_atan2_vector3",
      "sourcecode": "math::atan2({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_atan2_vector3_genmsl": {
      "nodedef": "ND_atan2_vector3",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_atan2_vector3_genosl": {
      "nodedef": "ND_atan2_vector3",
      "sourcecode": "atan2({{in1}},{{in2}})",
      "target": "genosl"
    },
    "implementation:IM_atan2_vector4_genglsl": {
      "nodedef": "ND_atan2_vector4",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_atan2_vector4_genmdl": {
      "nodedef": "ND_atan2_vector4",
      "sourcecode": "math::atan2({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_atan2_vector4_genmsl": {
      "nodedef": "ND_atan2_vector4",
      "sourcecode": "atan({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_atan2_vector4_genosl": {
      "nodedef": "ND_atan2_vector4",
      "sourcecode": "atan2({{in1}},{{in2}})",
      "target": "genosl"
    },
    "implementation:IM_bitangent_vector3_genglsl": {
      "nodedef": "ND_bitangent_vector3",
      "target": "genglsl"
    },
    "implementation:IM_bitangent_vector3_genmdl": {
      "nodedef": "ND_bitangent_vector3",
      "sourcecode": "mx::stdlib::mx_bitangent_vector3(mxp_space:{{space}}, mxp_index:{{index}})",
      "target": "genmdl"
    },
    "implementation:IM_bitangent_vector3_genmsl": {
      "nodedef": "ND_bitangent_vector3",
      "target": "genmsl"
    },
    "implementation:IM_bitangent_vector3_genosl": {
      "nodedef": "ND_bitangent_vector3",
      "sourcecode": "transform({{space}}, normalize(dPdv))",
      "target": "genosl"
    },
    "implementation:IM_blackbody_genglsl": {
      "file": "mx_blackbody.glsl",
      "function": "mx_blackbody",
      "nodedef": "ND_blackbody",
      "target": "genglsl"
    },
    "implementation:IM_blackbody_genmdl": {
      "nodedef": "ND_blackbody",
      "sourcecode": "mx::pbrlib::mx_blackbody(mxp_temperature:{{temperature}})",
      "target": "genmdl"
    },
    "implementation:IM_blackbody_genmsl": {
      "file": "../genglsl/mx_blackbody.glsl",
      "function": "mx_blackbody",
      "nodedef": "ND_blackbody",
      "target": "genmsl"
    },
    "implementation:IM_blackbody_genosl": {
      "file": "mx_blackbody.osl",
      "function": "mx_blackbody",
      "nodedef": "ND_blackbody",
      "target": "genosl"
    },
    "implementation:IM_blur_color3_genglsl": {
      "nodedef": "ND_blur_color3",
      "target": "genglsl"
    },
    "implementation:IM_blur_color3_genmdl": {
      "nodedef": "ND_blur_color3",
      "target": "genmdl"
    },
    "implementation:IM_blur_color3_genmsl": {
      "nodedef": "ND_blur_color3",
      "target": "genmsl"
    },
    "implementation:IM_blur_color3_genosl": {
      "nodedef": "ND_blur_color3",
      "target": "genosl"
    },
    "implementation:IM_blur_color4_genglsl": {
      "nodedef": "ND_blur_color4",
      "target": "genglsl"
    },
    "implementation:IM_blur_color4_genmdl": {
      "nodedef": "ND_blur_color4",
      "target": "genmdl"
    },
    "implementation:IM_blur_color4_genmsl": {
      "nodedef": "ND_blur_color4",
      "target": "genmsl"
    },
    "implementation:IM_blur_color4_genosl": {
      "nodedef": "ND_blur_color4",
      "target": "genosl"
    },
    "implementation:IM_blur_float_genglsl": {
      "nodedef": "ND_blur_float",
      "target": "genglsl"
    },
    "implementation:IM_blur_float_genmdl": {
      "nodedef": "ND_blur_float",
      "target": "genmdl"
    },
    "implementation:IM_blur_float_genmsl": {
      "nodedef": "ND_blur_float",
      "target": "genmsl"
    },
    "implementation:IM_blur_float_genosl": {
      "nodedef": "ND_blur_float",
      "target": "genosl"
    },
    "implementation:IM_blur_vector2_genglsl": {
      "nodedef": "ND_blur_vector2",
      "target": "genglsl"
    },
    "implementation:IM_blur_vector2_genmdl": {
      "nodedef": "ND_blur_vector2",
      "target": "genmdl"
    },
    "implementation:IM_blur_vector2_genmsl": {
      "nodedef": "ND_blur_vector2",
      "target": "genmsl"
    },
    "implementation:IM_blur_vector2_genosl": {
      "nodedef": "ND_blur_vector2",
      "target": "genosl"
    },
    "implementation:IM_blur_vector3_genglsl": {
      "nodedef": "ND_blur_vector3",
      "target": "genglsl"
    },
    "implementation:IM_blur_vector3_genmdl": {
      "nodedef": "ND_blur_vector3",
      "target": "genmdl"
    },
    "implementation:IM_blur_vector3_genmsl": {
      "nodedef": "ND_blur_vector3",
      "target": "genmsl"
    },
    "implementation:IM_blur_vector3_genosl": {
      "nodedef": "ND_blur_vector3",
      "target": "genosl"
    },
    "implementation:IM_blur_vector4_genglsl": {
      "nodedef": "ND_blur_vector4",
      "target": "genglsl"
    },
    "implementation:IM_blur_vector4_genmdl": {
      "nodedef": "ND_blur_vector4",
      "target": "genmdl"
    },
    "implementation:IM_blur_vector4_genmsl": {
      "nodedef": "ND_blur_vector4",
      "target": "genmsl"
    },
    "implementation:IM_blur_vector4_genosl": {
      "nodedef": "ND_blur_vector4",
      "target": "genosl"
    },
    "implementation:IM_burley_diffuse_bsdf_genglsl": {
      "file": "mx_burley_diffuse_bsdf.glsl",
      "function": "mx_burley_diffuse_bsdf",
      "nodedef": "ND_burley_diffuse_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_burley_diffuse_bsdf_genmdl": {
      "nodedef": "ND_burley_diffuse_bsdf",
      "sourcecode": "mx::pbrlib::mx_burley_diffuse_bsdf(mxp_weight:{{weight}}, mxp_color:{{color}}, mxp_roughness:{{roughness}}, mxp_normal:{{normal}})",
      "target": "genmdl"
    },
    "implementation:IM_burley_diffuse_bsdf_genmsl": {
      "file": "../genglsl/mx_burley_diffuse_bsdf.glsl",
      "function": "mx_burley_diffuse_bsdf",
      "nodedef": "ND_burley_diffuse_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_burley_diffuse_bsdf_genosl": {
      "file": "legacy/mx_burley_diffuse_bsdf.osl",
      "function": "mx_burley_diffuse_bsdf",
      "nodedef": "ND_burley_diffuse_bsdf",
      "target": "genosl"
    },
    "implementation:IM_burn_color3_genglsl": {
      "file": "mx_burn_color3.glsl",
      "function": "mx_burn_color3",
      "nodedef": "ND_burn_color3",
      "target": "genglsl"
    },
    "implementation:IM_burn_color3_genmdl": {
      "nodedef": "ND_burn_color3",
      "sourcecode": "mx::stdlib::mx_burn_color3({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_burn_color3_genmsl": {
      "file": "mx_burn_color3.metal",
      "function": "mx_burn_color3",
      "nodedef": "ND_burn_color3",
      "target": "genmsl"
    },
    "implementation:IM_burn_color3_genosl": {
      "file": "mx_burn_color3.osl",
      "function": "mx_burn_color3",
      "nodedef": "ND_burn_color3",
      "target": "genosl"
    },
    "implementation:IM_burn_color4_genglsl": {
      "file": "mx_burn_color4.glsl",
      "function": "mx_burn_color4",
      "nodedef": "ND_burn_color4",
      "target": "genglsl"
    },
    "implementation:IM_burn_color4_genmdl": {
      "nodedef": "ND_burn_color4",
      "sourcecode": "mx::stdlib::mx_burn_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_burn_color4_genmsl": {
      "file": "mx_burn_color4.metal",
      "function": "mx_burn_color4",
      "nodedef": "ND_burn_color4",
      "target": "genmsl"
    },
    "implementation:IM_burn_color4_genosl": {
      "file": "mx_burn_color4.osl",
      "function": "mx_burn_color4",
      "nodedef": "ND_burn_color4",
      "target": "genosl"
    },
    "implementation:IM_burn_float_genglsl": {
      "file": "mx_burn_float.glsl",
      "function": "mx_burn_float",
      "nodedef": "ND_burn_float",
      "target": "genglsl"
    },
    "implementation:IM_burn_float_genmdl": {
      "nodedef": "ND_burn_float",
      "sourcecode": "mx::stdlib::mx_burn_float({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_burn_float_genmsl": {
      "file": "mx_burn_float.metal",
      "function": "mx_burn_float",
      "nodedef": "ND_burn_float",
      "target": "genmsl"
    },
    "implementation:IM_burn_float_genosl": {
      "file": "mx_burn_float.osl",
      "function": "mx_burn_float",
      "nodedef": "ND_burn_float",
      "target": "genosl"
    },
    "implementation:IM_ceil_color3_genglsl": {
      "nodedef": "ND_ceil_color3",
      "sourcecode": "ceil({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ceil_color3_genmdl": {
      "nodedef": "ND_ceil_color3",
      "sourcecode": "mx::stdlib::mx_ceil_color3({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ceil_color3_genmsl": {
      "nodedef": "ND_ceil_color3",
      "sourcecode": "ceil({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ceil_color3_genosl": {
      "nodedef": "ND_ceil_color3",
      "sourcecode": "ceil({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ceil_color4_genglsl": {
      "nodedef": "ND_ceil_color4",
      "sourcecode": "ceil({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ceil_color4_genmdl": {
      "nodedef": "ND_ceil_color4",
      "sourcecode": "mx::stdlib::mx_ceil_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ceil_color4_genmsl": {
      "nodedef": "ND_ceil_color4",
      "sourcecode": "ceil({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ceil_color4_genosl": {
      "nodedef": "ND_ceil_color4",
      "sourcecode": "ceil({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ceil_float_genglsl": {
      "nodedef": "ND_ceil_float",
      "sourcecode": "ceil({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ceil_float_genmdl": {
      "nodedef": "ND_ceil_float",
      "sourcecode": "math::ceil({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ceil_float_genmsl": {
      "nodedef": "ND_ceil_float",
      "sourcecode": "ceil({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ceil_float_genosl": {
      "nodedef": "ND_ceil_float",
      "sourcecode": "ceil({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ceil_integer_genglsl": {
      "nodedef": "ND_ceil_integer",
      "sourcecode": "int(ceil({{in}}))",
      "target": "genglsl"
    },
    "implementation:IM_ceil_integer_genmdl": {
      "nodedef": "ND_ceil_integer",
      "sourcecode": "int(math::ceil({{in}}))",
      "target": "genmdl"
    },
    "implementation:IM_ceil_integer_genmsl": {
      "nodedef": "ND_ceil_integer",
      "sourcecode": "int(ceil({{in}}))",
      "target": "genmsl"
    },
    "implementation:IM_ceil_integer_genosl": {
      "nodedef": "ND_ceil_integer",
      "sourcecode": "int(ceil({{in}}))",
      "target": "genosl"
    },
    "implementation:IM_ceil_vector2_genglsl": {
      "nodedef": "ND_ceil_vector2",
      "sourcecode": "ceil({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ceil_vector2_genmdl": {
      "nodedef": "ND_ceil_vector2",
      "sourcecode": "math::ceil({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ceil_vector2_genmsl": {
      "nodedef": "ND_ceil_vector2",
      "sourcecode": "ceil({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ceil_vector2_genosl": {
      "nodedef": "ND_ceil_vector2",
      "sourcecode": "ceil({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ceil_vector3_genglsl": {
      "nodedef": "ND_ceil_vector3",
      "sourcecode": "ceil({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ceil_vector3_genmdl": {
      "nodedef": "ND_ceil_vector3",
      "sourcecode": "math::ceil({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ceil_vector3_genmsl": {
      "nodedef": "ND_ceil_vector3",
      "sourcecode": "ceil({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ceil_vector3_genosl": {
      "nodedef": "ND_ceil_vector3",
      "sourcecode": "ceil({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ceil_vector4_genglsl": {
      "nodedef": "ND_ceil_vector4",
      "sourcecode": "ceil({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ceil_vector4_genmdl": {
      "nodedef": "ND_ceil_vector4",
      "sourcecode": "math::ceil({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ceil_vector4_genmsl": {
      "nodedef": "ND_ceil_vector4",
      "sourcecode": "ceil({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ceil_vector4_genosl": {
      "nodedef": "ND_ceil_vector4",
      "sourcecode": "ceil({{in}})",
      "target": "genosl"
    },
    "implementation:IM_cellnoise2d_float_genglsl": {
      "file": "mx_cellnoise2d_float.glsl",
      "function": "mx_cellnoise2d_float",
      "nodedef": "ND_cellnoise2d_float",
      "target": "genglsl"
    },
    "implementation:IM_cellnoise2d_float_genmdl": {
      "nodedef": "ND_cellnoise2d_float",
      "sourcecode": "mx::stdlib::mx_cellnoise2d_float(mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_cellnoise2d_float_genmsl": {
      "file": "../genglsl/mx_cellnoise2d_float.glsl",
      "function": "mx_cellnoise2d_float",
      "nodedef": "ND_cellnoise2d_float",
      "target": "genmsl"
    },
    "implementation:IM_cellnoise2d_float_genosl": {
      "file": "mx_cellnoise2d_float.osl",
      "function": "mx_cellnoise2d_float",
      "nodedef": "ND_cellnoise2d_float",
      "target": "genosl"
    },
    "implementation:IM_cellnoise3d_float_genglsl": {
      "file": "mx_cellnoise3d_float.glsl",
      "function": "mx_cellnoise3d_float",
      "nodedef": "ND_cellnoise3d_float",
      "target": "genglsl"
    },
    "implementation:IM_cellnoise3d_float_genmdl": {
      "nodedef": "ND_cellnoise3d_float",
      "sourcecode": "mx::stdlib::mx_cellnoise3d_float(mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_cellnoise3d_float_genmsl": {
      "file": "../genglsl/mx_cellnoise3d_float.glsl",
      "function": "mx_cellnoise3d_float",
      "nodedef": "ND_cellnoise3d_float",
      "target": "genmsl"
    },
    "implementation:IM_cellnoise3d_float_genosl": {
      "file": "mx_cellnoise3d_float.osl",
      "function": "mx_cellnoise3d_float",
      "nodedef": "ND_cellnoise3d_float",
      "target": "genosl"
    },
    "implementation:IM_clamp_color3FA_genglsl": {
      "nodedef": "ND_clamp_color3FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_color3FA_genmdl": {
      "nodedef": "ND_clamp_color3FA",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_color3FA_genmsl": {
      "nodedef": "ND_clamp_color3FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_color3FA_genosl": {
      "nodedef": "ND_clamp_color3FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_color3_genglsl": {
      "nodedef": "ND_clamp_color3",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_color3_genmdl": {
      "nodedef": "ND_clamp_color3",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_color3_genmsl": {
      "nodedef": "ND_clamp_color3",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_color3_genosl": {
      "nodedef": "ND_clamp_color3",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_color4FA_genglsl": {
      "nodedef": "ND_clamp_color4FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_color4FA_genmdl": {
      "nodedef": "ND_clamp_color4FA",
      "sourcecode": "mx::stdlib::mx_clamp_color4FA({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_color4FA_genmsl": {
      "nodedef": "ND_clamp_color4FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_color4FA_genosl": {
      "nodedef": "ND_clamp_color4FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_color4_genglsl": {
      "nodedef": "ND_clamp_color4",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_color4_genmdl": {
      "nodedef": "ND_clamp_color4",
      "sourcecode": "mx::stdlib::mx_clamp_color4({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_color4_genmsl": {
      "nodedef": "ND_clamp_color4",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_color4_genosl": {
      "nodedef": "ND_clamp_color4",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_float_genglsl": {
      "nodedef": "ND_clamp_float",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_float_genmdl": {
      "nodedef": "ND_clamp_float",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_float_genmsl": {
      "nodedef": "ND_clamp_float",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_float_genosl": {
      "nodedef": "ND_clamp_float",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_vector2FA_genglsl": {
      "nodedef": "ND_clamp_vector2FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_vector2FA_genmdl": {
      "nodedef": "ND_clamp_vector2FA",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_vector2FA_genmsl": {
      "nodedef": "ND_clamp_vector2FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_vector2FA_genosl": {
      "nodedef": "ND_clamp_vector2FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_vector2_genglsl": {
      "nodedef": "ND_clamp_vector2",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_vector2_genmdl": {
      "nodedef": "ND_clamp_vector2",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_vector2_genmsl": {
      "nodedef": "ND_clamp_vector2",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_vector2_genosl": {
      "nodedef": "ND_clamp_vector2",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_vector3FA_genglsl": {
      "nodedef": "ND_clamp_vector3FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_vector3FA_genmdl": {
      "nodedef": "ND_clamp_vector3FA",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_vector3FA_genmsl": {
      "nodedef": "ND_clamp_vector3FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_vector3FA_genosl": {
      "nodedef": "ND_clamp_vector3FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_vector3_genglsl": {
      "nodedef": "ND_clamp_vector3",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_vector3_genmdl": {
      "nodedef": "ND_clamp_vector3",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_vector3_genmsl": {
      "nodedef": "ND_clamp_vector3",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_vector3_genosl": {
      "nodedef": "ND_clamp_vector3",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_vector4FA_genglsl": {
      "nodedef": "ND_clamp_vector4FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_vector4FA_genmdl": {
      "nodedef": "ND_clamp_vector4FA",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_vector4FA_genmsl": {
      "nodedef": "ND_clamp_vector4FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_vector4FA_genosl": {
      "nodedef": "ND_clamp_vector4FA",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_clamp_vector4_genglsl": {
      "nodedef": "ND_clamp_vector4",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genglsl"
    },
    "implementation:IM_clamp_vector4_genmdl": {
      "nodedef": "ND_clamp_vector4",
      "sourcecode": "math::clamp({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_clamp_vector4_genmsl": {
      "nodedef": "ND_clamp_vector4",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genmsl"
    },
    "implementation:IM_clamp_vector4_genosl": {
      "nodedef": "ND_clamp_vector4",
      "sourcecode": "clamp({{in}}, {{low}}, {{high}})",
      "target": "genosl"
    },
    "implementation:IM_combine2_color4CF_genglsl": {
      "nodedef": "ND_combine2_color4CF",
      "target": "genglsl"
    },
    "implementation:IM_combine2_color4CF_genmdl": {
      "nodedef": "ND_combine2_color4CF",
      "target": "genmdl"
    },
    "implementation:IM_combine2_color4CF_genmsl": {
      "nodedef": "ND_combine2_color4CF",
      "target": "genmsl"
    },
    "implementation:IM_combine2_color4CF_genosl": {
      "nodedef": "ND_combine2_color4CF",
      "target": "genosl"
    },
    "implementation:IM_combine2_vector2_genglsl": {
      "nodedef": "ND_combine2_vector2",
      "target": "genglsl"
    },
    "implementation:IM_combine2_vector2_genmdl": {
      "nodedef": "ND_combine2_vector2",
      "target": "genmdl"
    },
    "implementation:IM_combine2_vector2_genmsl": {
      "nodedef": "ND_combine2_vector2",
      "target": "genmsl"
    },
    "implementation:IM_combine2_vector2_genosl": {
      "nodedef": "ND_combine2_vector2",
      "target": "genosl"
    },
    "implementation:IM_combine2_vector4VF_genglsl": {
      "nodedef": "ND_combine2_vector4VF",
      "target": "genglsl"
    },
    "implementation:IM_combine2_vector4VF_genmdl": {
      "nodedef": "ND_combine2_vector4VF",
      "target": "genmdl"
    },
    "implementation:IM_combine2_vector4VF_genmsl": {
      "nodedef": "ND_combine2_vector4VF",
      "target": "genmsl"
    },
    "implementation:IM_combine2_vector4VF_genosl": {
      "nodedef": "ND_combine2_vector4VF",
      "target": "genosl"
    },
    "implementation:IM_combine2_vector4VV_genglsl": {
      "nodedef": "ND_combine2_vector4VV",
      "target": "genglsl"
    },
    "implementation:IM_combine2_vector4VV_genmdl": {
      "nodedef": "ND_combine2_vector4VV",
      "target": "genmdl"
    },
    "implementation:IM_combine2_vector4VV_genmsl": {
      "nodedef": "ND_combine2_vector4VV",
      "target": "genmsl"
    },
    "implementation:IM_combine2_vector4VV_genosl": {
      "nodedef": "ND_combine2_vector4VV",
      "target": "genosl"
    },
    "implementation:IM_combine3_color3_genglsl": {
      "nodedef": "ND_combine3_color3",
      "target": "genglsl"
    },
    "implementation:IM_combine3_color3_genmdl": {
      "nodedef": "ND_combine3_color3",
      "target": "genmdl"
    },
    "implementation:IM_combine3_color3_genmsl": {
      "nodedef": "ND_combine3_color3",
      "target": "genmsl"
    },
    "implementation:IM_combine3_color3_genosl": {
      "nodedef": "ND_combine3_color3",
      "target": "genosl"
    },
    "implementation:IM_combine3_vector3_genglsl": {
      "nodedef": "ND_combine3_vector3",
      "target": "genglsl"
    },
    "implementation:IM_combine3_vector3_genmdl": {
      "nodedef": "ND_combine3_vector3",
      "target": "genmdl"
    },
    "implementation:IM_combine3_vector3_genmsl": {
      "nodedef": "ND_combine3_vector3",
      "target": "genmsl"
    },
    "implementation:IM_combine3_vector3_genosl": {
      "nodedef": "ND_combine3_vector3",
      "target": "genosl"
    },
    "implementation:IM_combine4_color4_genglsl": {
      "nodedef": "ND_combine4_color4",
      "target": "genglsl"
    },
    "implementation:IM_combine4_color4_genmdl": {
      "nodedef": "ND_combine4_color4",
      "target": "genmdl"
    },
    "implementation:IM_combine4_color4_genmsl": {
      "nodedef": "ND_combine4_color4",
      "target": "genmsl"
    },
    "implementation:IM_combine4_color4_genosl": {
      "nodedef": "ND_combine4_color4",
      "target": "genosl"
    },
    "implementation:IM_combine4_vector4_genglsl": {
      "nodedef": "ND_combine4_vector4",
      "target": "genglsl"
    },
    "implementation:IM_combine4_vector4_genmdl": {
      "nodedef": "ND_combine4_vector4",
      "target": "genmdl"
    },
    "implementation:IM_combine4_vector4_genmsl": {
      "nodedef": "ND_combine4_vector4",
      "target": "genmsl"
    },
    "implementation:IM_combine4_vector4_genosl": {
      "nodedef": "ND_combine4_vector4",
      "target": "genosl"
    },
    "implementation:IM_conductor_bsdf_genglsl": {
      "file": "mx_conductor_bsdf.glsl",
      "function": "mx_conductor_bsdf",
      "nodedef": "ND_conductor_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_conductor_bsdf_genmdl": {
      "nodedef": "ND_conductor_bsdf",
      "sourcecode": "mx::pbrlib::mx_conductor_bsdf(mxp_weight:{{weight}}, mxp_ior:{{ior}}, mxp_extinction:{{extinction}}, mxp_roughness:{{roughness}}, mxp_normal:{{normal}}, mxp_tangent:{{tangent}}, mxp_distribution:{{distribution}}, mxp_thinfilm_thickness:{{thinfilm_thickness}}, mxp_thinfilm_ior:{{thinfilm_ior}})",
      "target": "genmdl"
    },
    "implementation:IM_conductor_bsdf_genmsl": {
      "file": "../genglsl/mx_conductor_bsdf.glsl",
      "function": "mx_conductor_bsdf",
      "nodedef": "ND_conductor_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_conductor_bsdf_genosl": {
      "file": "legacy/mx_conductor_bsdf.osl",
      "function": "mx_conductor_bsdf",
      "nodedef": "ND_conductor_bsdf",
      "target": "genosl"
    },
    "implementation:IM_conical_edf_genmdl": {
      "nodedef": "ND_conical_edf",
      "sourcecode": "mx::pbrlib::mx_conical_edf(mxp_color:{{color}}, mxp_normal:{{normal}}, mxp_inner_angle:{{inner_angle}}, mxp_outer_angle:{{outer_angle}})",
      "target": "genmdl"
    },
    "implementation:IM_constant_boolean_genglsl": {
      "nodedef": "ND_constant_boolean",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_boolean_genmdl": {
      "nodedef": "ND_constant_boolean",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_boolean_genmsl": {
      "nodedef": "ND_constant_boolean",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_boolean_genosl": {
      "nodedef": "ND_constant_boolean",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_color3_genglsl": {
      "nodedef": "ND_constant_color3",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_color3_genmdl": {
      "nodedef": "ND_constant_color3",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_color3_genmsl": {
      "nodedef": "ND_constant_color3",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_color3_genosl": {
      "nodedef": "ND_constant_color3",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_color4_genglsl": {
      "nodedef": "ND_constant_color4",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_color4_genmdl": {
      "nodedef": "ND_constant_color4",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_color4_genmsl": {
      "nodedef": "ND_constant_color4",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_color4_genosl": {
      "nodedef": "ND_constant_color4",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_filename_genglsl": {
      "nodedef": "ND_constant_filename",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_filename_genmdl": {
      "nodedef": "ND_constant_filename",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_filename_genmsl": {
      "nodedef": "ND_constant_filename",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_filename_genosl": {
      "nodedef": "ND_constant_filename",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_float_genglsl": {
      "nodedef": "ND_constant_float",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_float_genmdl": {
      "nodedef": "ND_constant_float",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_float_genmsl": {
      "nodedef": "ND_constant_float",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_float_genosl": {
      "nodedef": "ND_constant_float",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_integer_genglsl": {
      "nodedef": "ND_constant_integer",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_integer_genmdl": {
      "nodedef": "ND_constant_integer",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_integer_genmsl": {
      "nodedef": "ND_constant_integer",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_integer_genosl": {
      "nodedef": "ND_constant_integer",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_matrix33_genglsl": {
      "nodedef": "ND_constant_matrix33",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_matrix33_genmdl": {
      "nodedef": "ND_constant_matrix33",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_matrix33_genmsl": {
      "nodedef": "ND_constant_matrix33",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_matrix33_genosl": {
      "nodedef": "ND_constant_matrix33",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_matrix44_genglsl": {
      "nodedef": "ND_constant_matrix44",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_matrix44_genmdl": {
      "nodedef": "ND_constant_matrix44",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_matrix44_genmsl": {
      "nodedef": "ND_constant_matrix44",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_matrix44_genosl": {
      "nodedef": "ND_constant_matrix44",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_string_genglsl": {
      "nodedef": "ND_constant_string",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_string_genmdl": {
      "nodedef": "ND_constant_string",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_string_genmsl": {
      "nodedef": "ND_constant_string",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_string_genosl": {
      "nodedef": "ND_constant_string",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_vector2_genglsl": {
      "nodedef": "ND_constant_vector2",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_vector2_genmdl": {
      "nodedef": "ND_constant_vector2",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_vector2_genmsl": {
      "nodedef": "ND_constant_vector2",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_vector2_genosl": {
      "nodedef": "ND_constant_vector2",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_vector3_genglsl": {
      "nodedef": "ND_constant_vector3",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_vector3_genmdl": {
      "nodedef": "ND_constant_vector3",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_vector3_genmsl": {
      "nodedef": "ND_constant_vector3",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_vector3_genosl": {
      "nodedef": "ND_constant_vector3",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_constant_vector4_genglsl": {
      "nodedef": "ND_constant_vector4",
      "sourcecode": "{{value}}",
      "target": "genglsl"
    },
    "implementation:IM_constant_vector4_genmdl": {
      "nodedef": "ND_constant_vector4",
      "sourcecode": "{{value}}",
      "target": "genmdl"
    },
    "implementation:IM_constant_vector4_genmsl": {
      "nodedef": "ND_constant_vector4",
      "sourcecode": "{{value}}",
      "target": "genmsl"
    },
    "implementation:IM_constant_vector4_genosl": {
      "nodedef": "ND_constant_vector4",
      "sourcecode": "{{value}}",
      "target": "genosl"
    },
    "implementation:IM_convert_boolean_float_genglsl": {
      "nodedef": "ND_convert_boolean_float",
      "target": "genglsl"
    },
    "implementation:IM_convert_boolean_float_genmdl": {
      "nodedef": "ND_convert_boolean_float",
      "target": "genmdl"
    },
    "implementation:IM_convert_boolean_float_genmsl": {
      "nodedef": "ND_convert_boolean_float",
      "target": "genmsl"
    },
    "implementation:IM_convert_boolean_float_genosl": {
      "nodedef": "ND_convert_boolean_float",
      "target": "genosl"
    },
    "implementation:IM_convert_color3_color4_genglsl": {
      "nodedef": "ND_convert_color3_color4",
      "target": "genglsl"
    },
    "implementation:IM_convert_color3_color4_genmdl": {
      "nodedef": "ND_convert_color3_color4",
      "target": "genmdl"
    },
    "implementation:IM_convert_color3_color4_genmsl": {
      "nodedef": "ND_convert_color3_color4",
      "target": "genmsl"
    },
    "implementation:IM_convert_color3_color4_genosl": {
      "nodedef": "ND_convert_color3_color4",
      "target": "genosl"
    },
    "implementation:IM_convert_color3_vector3_genglsl": {
      "nodedef": "ND_convert_color3_vector3",
      "target": "genglsl"
    },
    "implementation:IM_convert_color3_vector3_genmdl": {
      "nodedef": "ND_convert_color3_vector3",
      "target": "genmdl"
    },
    "implementation:IM_convert_color3_vector3_genmsl": {
      "nodedef": "ND_convert_color3_vector3",
      "target": "genmsl"
    },
    "implementation:IM_convert_color3_vector3_genosl": {
      "nodedef": "ND_convert_color3_vector3",
      "target": "genosl"
    },
    "implementation:IM_convert_color4_color3_genglsl": {
      "nodedef": "ND_convert_color4_color3",
      "target": "genglsl"
    },
    "implementation:IM_convert_color4_color3_genmdl": {
      "nodedef": "ND_convert_color4_color3",
      "target": "genmdl"
    },
    "implementation:IM_convert_color4_color3_genmsl": {
      "nodedef": "ND_convert_color4_color3",
      "target": "genmsl"
    },
    "implementation:IM_convert_color4_color3_genosl": {
      "nodedef": "ND_convert_color4_color3",
      "target": "genosl"
    },
    "implementation:IM_convert_color4_vector4_genglsl": {
      "nodedef": "ND_convert_color4_vector4",
      "target": "genglsl"
    },
    "implementation:IM_convert_color4_vector4_genmdl": {
      "nodedef": "ND_convert_color4_vector4",
      "target": "genmdl"
    },
    "implementation:IM_convert_color4_vector4_genmsl": {
      "nodedef": "ND_convert_color4_vector4",
      "target": "genmsl"
    },
    "implementation:IM_convert_color4_vector4_genosl": {
      "nodedef": "ND_convert_color4_vector4",
      "target": "genosl"
    },
    "implementation:IM_convert_float_color3_genglsl": {
      "nodedef": "ND_convert_float_color3",
      "target": "genglsl"
    },
    "implementation:IM_convert_float_color3_genmdl": {
      "nodedef": "ND_convert_float_color3",
      "target": "genmdl"
    },
    "implementation:IM_convert_float_color3_genmsl": {
      "nodedef": "ND_convert_float_color3",
      "target": "genmsl"
    },
    "implementation:IM_convert_float_color3_genosl": {
      "nodedef": "ND_convert_float_color3",
      "target": "genosl"
    },
    "implementation:IM_convert_float_color4_genglsl": {
      "nodedef": "ND_convert_float_color4",
      "target": "genglsl"
    },
    "implementation:IM_convert_float_color4_genmdl": {
      "nodedef": "ND_convert_float_color4",
      "target": "genmdl"
    },
    "implementation:IM_convert_float_color4_genmsl": {
      "nodedef": "ND_convert_float_color4",
      "target": "genmsl"
    },
    "implementation:IM_convert_float_color4_genosl": {
      "nodedef": "ND_convert_float_color4",
      "target": "genosl"
    },
    "implementation:IM_convert_float_vector2_genglsl": {
      "nodedef": "ND_convert_float_vector2",
      "target": "genglsl"
    },
    "implementation:IM_convert_float_vector2_genmdl": {
      "nodedef": "ND_convert_float_vector2",
      "target": "genmdl"
    },
    "implementation:IM_convert_float_vector2_genmsl": {
      "nodedef": "ND_convert_float_vector2",
      "target": "genmsl"
    },
    "implementation:IM_convert_float_vector2_genosl": {
      "nodedef": "ND_convert_float_vector2",
      "target": "genosl"
    },
    "implementation:IM_convert_float_vector3_genglsl": {
      "nodedef": "ND_convert_float_vector3",
      "target": "genglsl"
    },
    "implementation:IM_convert_float_vector3_genmdl": {
      "nodedef": "ND_convert_float_vector3",
      "target": "genmdl"
    },
    "implementation:IM_convert_float_vector3_genmsl": {
      "nodedef": "ND_convert_float_vector3",
      "target": "genmsl"
    },
    "implementation:IM_convert_float_vector3_genosl": {
      "nodedef": "ND_convert_float_vector3",
      "target": "genosl"
    },
    "implementation:IM_convert_float_vector4_genglsl": {
      "nodedef": "ND_convert_float_vector4",
      "target": "genglsl"
    },
    "implementation:IM_convert_float_vector4_genmdl": {
      "nodedef": "ND_convert_float_vector4",
      "target": "genmdl"
    },
    "implementation:IM_convert_float_vector4_genmsl": {
      "nodedef": "ND_convert_float_vector4",
      "target": "genmsl"
    },
    "implementation:IM_convert_float_vector4_genosl": {
      "nodedef": "ND_convert_float_vector4",
      "target": "genosl"
    },
    "implementation:IM_convert_integer_float_genglsl": {
      "nodedef": "ND_convert_integer_float",
      "target": "genglsl"
    },
    "implementation:IM_convert_integer_float_genmdl": {
      "nodedef": "ND_convert_integer_float",
      "target": "genmdl"
    },
    "implementation:IM_convert_integer_float_genmsl": {
      "nodedef": "ND_convert_integer_float",
      "target": "genmsl"
    },
    "implementation:IM_convert_integer_float_genosl": {
      "nodedef": "ND_convert_integer_float",
      "target": "genosl"
    },
    "implementation:IM_convert_vector2_vector3_genglsl": {
      "nodedef": "ND_convert_vector2_vector3",
      "target": "genglsl"
    },
    "implementation:IM_convert_vector2_vector3_genmdl": {
      "nodedef": "ND_convert_vector2_vector3",
      "target": "genmdl"
    },
    "implementation:IM_convert_vector2_vector3_genmsl": {
      "nodedef": "ND_convert_vector2_vector3",
      "target": "genmsl"
    },
    "implementation:IM_convert_vector2_vector3_genosl": {
      "nodedef": "ND_convert_vector2_vector3",
      "target": "genosl"
    },
    "implementation:IM_convert_vector3_color3_genglsl": {
      "nodedef": "ND_convert_vector3_color3",
      "target": "genglsl"
    },
    "implementation:IM_convert_vector3_color3_genmdl": {
      "nodedef": "ND_convert_vector3_color3",
      "target": "genmdl"
    },
    "implementation:IM_convert_vector3_color3_genmsl": {
      "nodedef": "ND_convert_vector3_color3",
      "target": "genmsl"
    },
    "implementation:IM_convert_vector3_color3_genosl": {
      "nodedef": "ND_convert_vector3_color3",
      "target": "genosl"
    },
    "implementation:IM_convert_vector3_vector2_genglsl": {
      "nodedef": "ND_convert_vector3_vector2",
      "target": "genglsl"
    },
    "implementation:IM_convert_vector3_vector2_genmdl": {
      "nodedef": "ND_convert_vector3_vector2",
      "target": "genmdl"
    },
    "implementation:IM_convert_vector3_vector2_genmsl": {
      "nodedef": "ND_convert_vector3_vector2",
      "target": "genmsl"
    },
    "implementation:IM_convert_vector3_vector2_genosl": {
      "nodedef": "ND_convert_vector3_vector2",
      "target": "genosl"
    },
    "implementation:IM_convert_vector3_vector4_genglsl": {
      "nodedef": "ND_convert_vector3_vector4",
      "target": "genglsl"
    },
    "implementation:IM_convert_vector3_vector4_genmdl": {
      "nodedef": "ND_convert_vector3_vector4",
      "target": "genmdl"
    },
    "implementation:IM_convert_vector3_vector4_genmsl": {
      "nodedef": "ND_convert_vector3_vector4",
      "target": "genmsl"
    },
    "implementation:IM_convert_vector3_vector4_genosl": {
      "nodedef": "ND_convert_vector3_vector4",
      "target": "genosl"
    },
    "implementation:IM_convert_vector4_color4_genglsl": {
      "nodedef": "ND_convert_vector4_color4",
      "target": "genglsl"
    },
    "implementation:IM_convert_vector4_color4_genmdl": {
      "nodedef": "ND_convert_vector4_color4",
      "target": "genmdl"
    },
    "implementation:IM_convert_vector4_color4_genmsl": {
      "nodedef": "ND_convert_vector4_color4",
      "target": "genmsl"
    },
    "implementation:IM_convert_vector4_color4_genosl": {
      "nodedef": "ND_convert_vector4_color4",
      "target": "genosl"
    },
    "implementation:IM_convert_vector4_vector3_genglsl": {
      "nodedef": "ND_convert_vector4_vector3",
      "target": "genglsl"
    },
    "implementation:IM_convert_vector4_vector3_genmdl": {
      "nodedef": "ND_convert_vector4_vector3",
      "target": "genmdl"
    },
    "implementation:IM_convert_vector4_vector3_genmsl": {
      "nodedef": "ND_convert_vector4_vector3",
      "target": "genmsl"
    },
    "implementation:IM_convert_vector4_vector3_genosl": {
      "nodedef": "ND_convert_vector4_vector3",
      "target": "genosl"
    },
    "implementation:IM_cos_float_genglsl": {
      "nodedef": "ND_cos_float",
      "sourcecode": "cos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_cos_float_genmdl": {
      "nodedef": "ND_cos_float",
      "sourcecode": "math::cos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_cos_float_genmsl": {
      "nodedef": "ND_cos_float",
      "sourcecode": "cos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_cos_float_genosl": {
      "nodedef": "ND_cos_float",
      "sourcecode": "cos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_cos_vector2_genglsl": {
      "nodedef": "ND_cos_vector2",
      "sourcecode": "cos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_cos_vector2_genmdl": {
      "nodedef": "ND_cos_vector2",
      "sourcecode": "math::cos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_cos_vector2_genmsl": {
      "nodedef": "ND_cos_vector2",
      "sourcecode": "cos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_cos_vector2_genosl": {
      "nodedef": "ND_cos_vector2",
      "sourcecode": "cos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_cos_vector3_genglsl": {
      "nodedef": "ND_cos_vector3",
      "sourcecode": "cos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_cos_vector3_genmdl": {
      "nodedef": "ND_cos_vector3",
      "sourcecode": "math::cos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_cos_vector3_genmsl": {
      "nodedef": "ND_cos_vector3",
      "sourcecode": "cos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_cos_vector3_genosl": {
      "nodedef": "ND_cos_vector3",
      "sourcecode": "cos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_cos_vector4_genglsl": {
      "nodedef": "ND_cos_vector4",
      "sourcecode": "cos({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_cos_vector4_genmdl": {
      "nodedef": "ND_cos_vector4",
      "sourcecode": "math::cos({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_cos_vector4_genmsl": {
      "nodedef": "ND_cos_vector4",
      "sourcecode": "cos({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_cos_vector4_genosl": {
      "nodedef": "ND_cos_vector4",
      "sourcecode": "cos({{in}})",
      "target": "genosl"
    },
    "implementation:IM_crossproduct_vector3_genglsl": {
      "nodedef": "ND_crossproduct_vector3",
      "sourcecode": "cross({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_crossproduct_vector3_genmdl": {
      "nodedef": "ND_crossproduct_vector3",
      "sourcecode": "math::cross({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_crossproduct_vector3_genmsl": {
      "nodedef": "ND_crossproduct_vector3",
      "sourcecode": "cross({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_crossproduct_vector3_genosl": {
      "nodedef": "ND_crossproduct_vector3",
      "sourcecode": "cross({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_determinant_matrix33_genglsl": {
      "nodedef": "ND_determinant_matrix33",
      "sourcecode": "determinant({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_determinant_matrix33_genmdl": {
      "nodedef": "ND_determinant_matrix33",
      "sourcecode": "mx::stdlib::mx_determinant_matrix33({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_determinant_matrix33_genmsl": {
      "nodedef": "ND_determinant_matrix33",
      "sourcecode": "determinant({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_determinant_matrix33_genosl": {
      "nodedef": "ND_determinant_matrix33",
      "sourcecode": "determinant({{in}})",
      "target": "genosl"
    },
    "implementation:IM_determinant_matrix44_genglsl": {
      "nodedef": "ND_determinant_matrix44",
      "sourcecode": "determinant({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_determinant_matrix44_genmdl": {
      "nodedef": "ND_determinant_matrix44",
      "sourcecode": "mx::stdlib::mx_determinant_matrix44({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_determinant_matrix44_genmsl": {
      "nodedef": "ND_determinant_matrix44",
      "sourcecode": "determinant({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_determinant_matrix44_genosl": {
      "nodedef": "ND_determinant_matrix44",
      "sourcecode": "determinant({{in}})",
      "target": "genosl"
    },
    "implementation:IM_dielectric_bsdf_genglsl": {
      "file": "mx_dielectric_bsdf.glsl",
      "function": "mx_dielectric_bsdf",
      "nodedef": "ND_dielectric_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_dielectric_bsdf_genmdl": {
      "nodedef": "ND_dielectric_bsdf",
      "sourcecode": "mx::pbrlib::mx_dielectric_bsdf(mxp_weight:{{weight}}, mxp_tint:{{tint}}, mxp_ior:{{ior}}, mxp_roughness:{{roughness}}, mxp_normal:{{normal}}, mxp_tangent:{{tangent}}, mxp_distribution:{{distribution}}, mxp_scatter_mode:{{scatter_mode}}, mxp_base:{{base}}, mxp_thinfilm_thickness:{{thinfilm_thickness}}, mxp_thinfilm_ior:{{thinfilm_ior}})",
      "target": "genmdl"
    },
    "implementation:IM_dielectric_bsdf_genmsl": {
      "file": "../genglsl/mx_dielectric_bsdf.glsl",
      "function": "mx_dielectric_bsdf",
      "nodedef": "ND_dielectric_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_dielectric_bsdf_genosl": {
      "file": "legacy/mx_dielectric_bsdf.osl",
      "function": "mx_dielectric_bsdf",
      "nodedef": "ND_dielectric_bsdf",
      "target": "genosl"
    },
    "implementation:IM_difference_color3_genglsl": {
      "nodedef": "ND_difference_color3",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_difference_color3_genmdl": {
      "nodedef": "ND_difference_color3",
      "sourcecode": "({{mix}}*math::abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_difference_color3_genmsl": {
      "nodedef": "ND_difference_color3",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_difference_color3_genosl": {
      "nodedef": "ND_difference_color3",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_difference_color4_genglsl": {
      "nodedef": "ND_difference_color4",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_difference_color4_genmdl": {
      "nodedef": "ND_difference_color4",
      "sourcecode": "mx::stdlib::mx_difference_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_difference_color4_genmsl": {
      "nodedef": "ND_difference_color4",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_difference_color4_genosl": {
      "nodedef": "ND_difference_color4",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_difference_float_genglsl": {
      "nodedef": "ND_difference_float",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_difference_float_genmdl": {
      "nodedef": "ND_difference_float",
      "sourcecode": "({{mix}}*math::abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_difference_float_genmsl": {
      "nodedef": "ND_difference_float",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_difference_float_genosl": {
      "nodedef": "ND_difference_float",
      "sourcecode": "({{mix}}*abs({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_directional_light_genglsl": {
      "file": "mx_directional_light.glsl",
      "function": "mx_directional_light",
      "nodedef": "ND_directional_light",
      "target": "genglsl"
    },
    "implementation:IM_directional_light_genmsl": {
      "file": "mx_directional_light.metal",
      "function": "mx_directional_light",
      "nodedef": "ND_directional_light",
      "target": "genmsl"
    },
    "implementation:IM_disjointover_color4_genglsl": {
      "file": "mx_disjointover_color4.glsl",
      "function": "mx_disjointover_color4",
      "nodedef": "ND_disjointover_color4",
      "target": "genglsl"
    },
    "implementation:IM_disjointover_color4_genmdl": {
      "nodedef": "ND_disjointover_color4",
      "sourcecode": "mx::stdlib::mx_disjointover_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_disjointover_color4_genmsl": {
      "file": "../genglsl/mx_disjointover_color4.glsl",
      "function": "mx_disjointover_color4",
      "nodedef": "ND_disjointover_color4",
      "target": "genmsl"
    },
    "implementation:IM_disjointover_color4_genosl": {
      "file": "mx_disjointover_color4.osl",
      "function": "mx_disjointover_color4",
      "nodedef": "ND_disjointover_color4",
      "target": "genosl"
    },
    "implementation:IM_disney_brdf_2012_surface_brdf_explorer": {
      "colorspace": "lin_rec709",
      "file": "https://github.com/wdas/brdf/blob/master/src/brdfs/disney.brdf",
      "nodedef": "ND_disney_brdf_2012_surface",
      "target": "brdf_explorer"
    },
    "implementation:IM_disney_bsdf_2015_surface_pbrt": {
      "colorspace": "lin_rec709",
      "file": "https://github.com/mmp/pbrt-v3/blob/master/src/materials/disney.cpp",
      "function": "DisneyMaterial::DisneyMaterial",
      "input:baseColor": {
        "implname": "color",
        "type": "color3"
      },
      "input:ior": {
        "implname": "eta",
        "type": "float"
      },
      "nodedef": "ND_disney_bsdf_2015_surface",
      "target": "pbrt"
    },
    "implementation:IM_displacement_float_genglsl": {
      "file": "mx_displacement_float.glsl",
      "function": "mx_displacement_float",
      "nodedef": "ND_displacement_float",
      "target": "genglsl"
    },
    "implementation:IM_displacement_float_genmdl": {
      "nodedef": "ND_displacement_float",
      "sourcecode": "mx::pbrlib::mx_displacement_float(mxp_displacement:{{displacement}}, mxp_scale:{{scale}})",
      "target": "genmdl"
    },
    "implementation:IM_displacement_float_genmsl": {
      "file": "../genglsl/mx_displacement_float.glsl",
      "function": "mx_displacement_float",
      "nodedef": "ND_displacement_float",
      "target": "genmsl"
    },
    "implementation:IM_displacement_float_genosl": {
      "file": "mx_displacement_float.osl",
      "function": "mx_displacement_float",
      "nodedef": "ND_displacement_float",
      "target": "genosl"
    },
    "implementation:IM_displacement_vector3_genglsl": {
      "file": "mx_displacement_vector3.glsl",
      "function": "mx_displacement_vector3",
      "nodedef": "ND_displacement_vector3",
      "target": "genglsl"
    },
    "implementation:IM_displacement_vector3_genmdl": {
      "nodedef": "ND_displacement_vector3",
      "sourcecode": "mx::pbrlib::mx_displacement_vector3(mxp_displacement:{{displacement}}, mxp_scale:{{scale}})",
      "target": "genmdl"
    },
    "implementation:IM_displacement_vector3_genmsl": {
      "file": "../genglsl/mx_displacement_vector3.glsl",
      "function": "mx_displacement_vector3",
      "nodedef": "ND_displacement_vector3",
      "target": "genmsl"
    },
    "implementation:IM_displacement_vector3_genosl": {
      "file": "mx_displacement_vector3.osl",
      "function": "mx_displacement_vector3",
      "nodedef": "ND_displacement_vector3",
      "target": "genosl"
    },
    "implementation:IM_divide_color3FA_genglsl": {
      "nodedef": "ND_divide_color3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_color3FA_genmdl": {
      "nodedef": "ND_divide_color3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_color3FA_genmsl": {
      "nodedef": "ND_divide_color3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_color3FA_genosl": {
      "nodedef": "ND_divide_color3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_color3_genglsl": {
      "nodedef": "ND_divide_color3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_color3_genmdl": {
      "nodedef": "ND_divide_color3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_color3_genmsl": {
      "nodedef": "ND_divide_color3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_color3_genosl": {
      "nodedef": "ND_divide_color3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_color4FA_genglsl": {
      "nodedef": "ND_divide_color4FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_color4FA_genmdl": {
      "nodedef": "ND_divide_color4FA",
      "sourcecode": "mx_divide({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_divide_color4FA_genmsl": {
      "nodedef": "ND_divide_color4FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_color4FA_genosl": {
      "nodedef": "ND_divide_color4FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_color4_genglsl": {
      "nodedef": "ND_divide_color4",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_color4_genmdl": {
      "nodedef": "ND_divide_color4",
      "sourcecode": "mx_divide({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_divide_color4_genmsl": {
      "nodedef": "ND_divide_color4",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_color4_genosl": {
      "nodedef": "ND_divide_color4",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_float_genglsl": {
      "nodedef": "ND_divide_float",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_float_genmdl": {
      "nodedef": "ND_divide_float",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_float_genmsl": {
      "nodedef": "ND_divide_float",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_float_genosl": {
      "nodedef": "ND_divide_float",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_matrix33_genglsl": {
      "nodedef": "ND_divide_matrix33",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_matrix33_genmdl": {
      "nodedef": "ND_divide_matrix33",
      "sourcecode": "{{in1}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_matrix33_genmsl": {
      "nodedef": "ND_divide_matrix33",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_matrix33_genosl": {
      "nodedef": "ND_divide_matrix33",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_matrix44_genglsl": {
      "nodedef": "ND_divide_matrix44",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_matrix44_genmdl": {
      "nodedef": "ND_divide_matrix44",
      "sourcecode": "{{in1}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_matrix44_genmsl": {
      "nodedef": "ND_divide_matrix44",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_matrix44_genosl": {
      "nodedef": "ND_divide_matrix44",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_vector2FA_genglsl": {
      "nodedef": "ND_divide_vector2FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_vector2FA_genmdl": {
      "nodedef": "ND_divide_vector2FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_vector2FA_genmsl": {
      "nodedef": "ND_divide_vector2FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_vector2FA_genosl": {
      "nodedef": "ND_divide_vector2FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_vector2_genglsl": {
      "nodedef": "ND_divide_vector2",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_vector2_genmdl": {
      "nodedef": "ND_divide_vector2",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_vector2_genmsl": {
      "nodedef": "ND_divide_vector2",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_vector2_genosl": {
      "nodedef": "ND_divide_vector2",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_vector3FA_genglsl": {
      "nodedef": "ND_divide_vector3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_vector3FA_genmdl": {
      "nodedef": "ND_divide_vector3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_vector3FA_genmsl": {
      "nodedef": "ND_divide_vector3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_vector3FA_genosl": {
      "nodedef": "ND_divide_vector3FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_vector3_genglsl": {
      "nodedef": "ND_divide_vector3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_vector3_genmdl": {
      "nodedef": "ND_divide_vector3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_vector3_genmsl": {
      "nodedef": "ND_divide_vector3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_vector3_genosl": {
      "nodedef": "ND_divide_vector3",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_vector4FA_genglsl": {
      "nodedef": "ND_divide_vector4FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_vector4FA_genmdl": {
      "nodedef": "ND_divide_vector4FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_vector4FA_genmsl": {
      "nodedef": "ND_divide_vector4FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_vector4FA_genosl": {
      "nodedef": "ND_divide_vector4FA",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_divide_vector4_genglsl": {
      "nodedef": "ND_divide_vector4",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_divide_vector4_genmdl": {
      "nodedef": "ND_divide_vector4",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_divide_vector4_genmsl": {
      "nodedef": "ND_divide_vector4",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_divide_vector4_genosl": {
      "nodedef": "ND_divide_vector4",
      "sourcecode": "{{in1}} / {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_dodge_color3_genglsl": {
      "file": "mx_dodge_color3.glsl",
      "function": "mx_dodge_color3",
      "nodedef": "ND_dodge_color3",
      "target": "genglsl"
    },
    "implementation:IM_dodge_color3_genmdl": {
      "nodedef": "ND_dodge_color3",
      "sourcecode": "mx::stdlib::mx_dodge_color3({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_dodge_color3_genmsl": {
      "file": "mx_dodge_color3.metal",
      "function": "mx_dodge_color3",
      "nodedef": "ND_dodge_color3",
      "target": "genmsl"
    },
    "implementation:IM_dodge_color3_genosl": {
      "file": "mx_dodge_color3.osl",
      "function": "mx_dodge_color3",
      "nodedef": "ND_dodge_color3",
      "target": "genosl"
    },
    "implementation:IM_dodge_color4_genglsl": {
      "file": "mx_dodge_color4.glsl",
      "function": "mx_dodge_color4",
      "nodedef": "ND_dodge_color4",
      "target": "genglsl"
    },
    "implementation:IM_dodge_color4_genmdl": {
      "nodedef": "ND_dodge_color4",
      "sourcecode": "mx::stdlib::mx_dodge_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_dodge_color4_genmsl": {
      "file": "mx_dodge_color4.metal",
      "function": "mx_dodge_color4",
      "nodedef": "ND_dodge_color4",
      "target": "genmsl"
    },
    "implementation:IM_dodge_color4_genosl": {
      "file": "mx_dodge_color4.osl",
      "function": "mx_dodge_color4",
      "nodedef": "ND_dodge_color4",
      "target": "genosl"
    },
    "implementation:IM_dodge_float_genglsl": {
      "file": "mx_dodge_float.glsl",
      "function": "mx_dodge_float",
      "nodedef": "ND_dodge_float",
      "target": "genglsl"
    },
    "implementation:IM_dodge_float_genmdl": {
      "nodedef": "ND_dodge_float",
      "sourcecode": "mx::stdlib::mx_dodge_float({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_dodge_float_genmsl": {
      "file": "mx_dodge_float.metal",
      "function": "mx_dodge_float",
      "nodedef": "ND_dodge_float",
      "target": "genmsl"
    },
    "implementation:IM_dodge_float_genosl": {
      "file": "mx_dodge_float.osl",
      "function": "mx_dodge_float",
      "nodedef": "ND_dodge_float",
      "target": "genosl"
    },
    "implementation:IM_dot_boolean_genglsl": {
      "nodedef": "ND_dot_boolean",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_boolean_genmdl": {
      "nodedef": "ND_dot_boolean",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_boolean_genmsl": {
      "nodedef": "ND_dot_boolean",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_boolean_genosl": {
      "nodedef": "ND_dot_boolean",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_color3_genglsl": {
      "nodedef": "ND_dot_color3",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_color3_genmdl": {
      "nodedef": "ND_dot_color3",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_color3_genmsl": {
      "nodedef": "ND_dot_color3",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_color3_genosl": {
      "nodedef": "ND_dot_color3",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_color4_genglsl": {
      "nodedef": "ND_dot_color4",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_color4_genmdl": {
      "nodedef": "ND_dot_color4",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_color4_genmsl": {
      "nodedef": "ND_dot_color4",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_color4_genosl": {
      "nodedef": "ND_dot_color4",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_displacementshader_genglsl": {
      "nodedef": "ND_dot_displacementshader",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_displacementshader_genmdl": {
      "nodedef": "ND_dot_displacementshader",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_displacementshader_genmsl": {
      "nodedef": "ND_dot_displacementshader",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_displacementshader_genosl": {
      "nodedef": "ND_dot_displacementshader",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_filename_genglsl": {
      "nodedef": "ND_dot_filename",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_filename_genmdl": {
      "nodedef": "ND_dot_filename",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_filename_genmsl": {
      "nodedef": "ND_dot_filename",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_filename_genosl": {
      "nodedef": "ND_dot_filename",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_float_genglsl": {
      "nodedef": "ND_dot_float",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_float_genmdl": {
      "nodedef": "ND_dot_float",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_float_genmsl": {
      "nodedef": "ND_dot_float",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_float_genosl": {
      "nodedef": "ND_dot_float",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_integer_genglsl": {
      "nodedef": "ND_dot_integer",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_integer_genmdl": {
      "nodedef": "ND_dot_integer",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_integer_genmsl": {
      "nodedef": "ND_dot_integer",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_integer_genosl": {
      "nodedef": "ND_dot_integer",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_lightshader_genglsl": {
      "nodedef": "ND_dot_lightshader",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_lightshader_genmdl": {
      "nodedef": "ND_dot_lightshader",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_lightshader_genmsl": {
      "nodedef": "ND_dot_lightshader",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_lightshader_genosl": {
      "nodedef": "ND_dot_lightshader",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_matrix33_genglsl": {
      "nodedef": "ND_dot_matrix33",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_matrix33_genmdl": {
      "nodedef": "ND_dot_matrix33",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_matrix33_genmsl": {
      "nodedef": "ND_dot_matrix33",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_matrix33_genosl": {
      "nodedef": "ND_dot_matrix33",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_matrix44_genglsl": {
      "nodedef": "ND_dot_matrix44",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_matrix44_genmdl": {
      "nodedef": "ND_dot_matrix44",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_matrix44_genmsl": {
      "nodedef": "ND_dot_matrix44",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_matrix44_genosl": {
      "nodedef": "ND_dot_matrix44",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_string_genglsl": {
      "nodedef": "ND_dot_string",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_string_genmdl": {
      "nodedef": "ND_dot_string",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_string_genmsl": {
      "nodedef": "ND_dot_string",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_string_genosl": {
      "nodedef": "ND_dot_string",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_surfaceshader_genglsl": {
      "nodedef": "ND_dot_surfaceshader",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_surfaceshader_genmdl": {
      "nodedef": "ND_dot_surfaceshader",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_surfaceshader_genmsl": {
      "nodedef": "ND_dot_surfaceshader",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_surfaceshader_genosl": {
      "nodedef": "ND_dot_surfaceshader",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_vector2_genglsl": {
      "nodedef": "ND_dot_vector2",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_vector2_genmdl": {
      "nodedef": "ND_dot_vector2",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_vector2_genmsl": {
      "nodedef": "ND_dot_vector2",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_vector2_genosl": {
      "nodedef": "ND_dot_vector2",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_vector3_genglsl": {
      "nodedef": "ND_dot_vector3",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_vector3_genmdl": {
      "nodedef": "ND_dot_vector3",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_vector3_genmsl": {
      "nodedef": "ND_dot_vector3",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_vector3_genosl": {
      "nodedef": "ND_dot_vector3",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_vector4_genglsl": {
      "nodedef": "ND_dot_vector4",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_vector4_genmdl": {
      "nodedef": "ND_dot_vector4",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_vector4_genmsl": {
      "nodedef": "ND_dot_vector4",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_vector4_genosl": {
      "nodedef": "ND_dot_vector4",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dot_volumeshader_genglsl": {
      "nodedef": "ND_dot_volumeshader",
      "sourcecode": "{{in}}",
      "target": "genglsl"
    },
    "implementation:IM_dot_volumeshader_genmdl": {
      "nodedef": "ND_dot_volumeshader",
      "sourcecode": "{{in}}",
      "target": "genmdl"
    },
    "implementation:IM_dot_volumeshader_genmsl": {
      "nodedef": "ND_dot_volumeshader",
      "sourcecode": "{{in}}",
      "target": "genmsl"
    },
    "implementation:IM_dot_volumeshader_genosl": {
      "nodedef": "ND_dot_volumeshader",
      "sourcecode": "{{in}}",
      "target": "genosl"
    },
    "implementation:IM_dotproduct_vector2_genglsl": {
      "nodedef": "ND_dotproduct_vector2",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_dotproduct_vector2_genmdl": {
      "nodedef": "ND_dotproduct_vector2",
      "sourcecode": "math::dot({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_dotproduct_vector2_genmsl": {
      "nodedef": "ND_dotproduct_vector2",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_dotproduct_vector2_genosl": {
      "nodedef": "ND_dotproduct_vector2",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_dotproduct_vector3_genglsl": {
      "nodedef": "ND_dotproduct_vector3",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_dotproduct_vector3_genmdl": {
      "nodedef": "ND_dotproduct_vector3",
      "sourcecode": "math::dot({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_dotproduct_vector3_genmsl": {
      "nodedef": "ND_dotproduct_vector3",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_dotproduct_vector3_genosl": {
      "nodedef": "ND_dotproduct_vector3",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_dotproduct_vector4_genglsl": {
      "nodedef": "ND_dotproduct_vector4",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_dotproduct_vector4_genmdl": {
      "nodedef": "ND_dotproduct_vector4",
      "sourcecode": "math::dot({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_dotproduct_vector4_genmsl": {
      "nodedef": "ND_dotproduct_vector4",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_dotproduct_vector4_genosl": {
      "nodedef": "ND_dotproduct_vector4",
      "sourcecode": "dot({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_exp_float_genglsl": {
      "nodedef": "ND_exp_float",
      "sourcecode": "exp({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_exp_float_genmdl": {
      "nodedef": "ND_exp_float",
      "sourcecode": "math::exp({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_exp_float_genmsl": {
      "nodedef": "ND_exp_float",
      "sourcecode": "exp({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_exp_float_genosl": {
      "nodedef": "ND_exp_float",
      "sourcecode": "exp({{in}})",
      "target": "genosl"
    },
    "implementation:IM_exp_vector2_genglsl": {
      "nodedef": "ND_exp_vector2",
      "sourcecode": "exp({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_exp_vector2_genmdl": {
      "nodedef": "ND_exp_vector2",
      "sourcecode": "math::exp({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_exp_vector2_genmsl": {
      "nodedef": "ND_exp_vector2",
      "sourcecode": "exp({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_exp_vector2_genosl": {
      "nodedef": "ND_exp_vector2",
      "sourcecode": "exp({{in}})",
      "target": "genosl"
    },
    "implementation:IM_exp_vector3_genglsl": {
      "nodedef": "ND_exp_vector3",
      "sourcecode": "exp({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_exp_vector3_genmdl": {
      "nodedef": "ND_exp_vector3",
      "sourcecode": "math::exp({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_exp_vector3_genmsl": {
      "nodedef": "ND_exp_vector3",
      "sourcecode": "exp({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_exp_vector3_genosl": {
      "nodedef": "ND_exp_vector3",
      "sourcecode": "exp({{in}})",
      "target": "genosl"
    },
    "implementation:IM_exp_vector4_genglsl": {
      "nodedef": "ND_exp_vector4",
      "sourcecode": "exp({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_exp_vector4_genmdl": {
      "nodedef": "ND_exp_vector4",
      "sourcecode": "math::exp({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_exp_vector4_genmsl": {
      "nodedef": "ND_exp_vector4",
      "sourcecode": "exp({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_exp_vector4_genosl": {
      "nodedef": "ND_exp_vector4",
      "sourcecode": "exp({{in}})",
      "target": "genosl"
    },
    "implementation:IM_floor_color3_genglsl": {
      "nodedef": "ND_floor_color3",
      "sourcecode": "floor({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_floor_color3_genmdl": {
      "nodedef": "ND_floor_color3",
      "sourcecode": "mx::stdlib::mx_floor_color3({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_floor_color3_genmsl": {
      "nodedef": "ND_floor_color3",
      "sourcecode": "floor({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_floor_color3_genosl": {
      "nodedef": "ND_floor_color3",
      "sourcecode": "floor({{in}})",
      "target": "genosl"
    },
    "implementation:IM_floor_color4_genglsl": {
      "nodedef": "ND_floor_color4",
      "sourcecode": "floor({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_floor_color4_genmdl": {
      "nodedef": "ND_floor_color4",
      "sourcecode": "mx::stdlib::mx_floor_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_floor_color4_genmsl": {
      "nodedef": "ND_floor_color4",
      "sourcecode": "floor({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_floor_color4_genosl": {
      "nodedef": "ND_floor_color4",
      "sourcecode": "floor({{in}})",
      "target": "genosl"
    },
    "implementation:IM_floor_float_genglsl": {
      "nodedef": "ND_floor_float",
      "sourcecode": "floor({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_floor_float_genmdl": {
      "nodedef": "ND_floor_float",
      "sourcecode": "math::floor({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_floor_float_genmsl": {
      "nodedef": "ND_floor_float",
      "sourcecode": "floor({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_floor_float_genosl": {
      "nodedef": "ND_floor_float",
      "sourcecode": "floor({{in}})",
      "target": "genosl"
    },
    "implementation:IM_floor_integer_genglsl": {
      "nodedef": "ND_floor_integer",
      "sourcecode": "int(floor({{in}}))",
      "target": "genglsl"
    },
    "implementation:IM_floor_integer_genmdl": {
      "nodedef": "ND_floor_integer",
      "sourcecode": "int(math::floor({{in}}))",
      "target": "genmdl"
    },
    "implementation:IM_floor_integer_genmsl": {
      "nodedef": "ND_floor_integer",
      "sourcecode": "int(floor({{in}}))",
      "target": "genmsl"
    },
    "implementation:IM_floor_integer_genosl": {
      "nodedef": "ND_floor_integer",
      "sourcecode": "int(floor({{in}}))",
      "target": "genosl"
    },
    "implementation:IM_floor_vector2_genglsl": {
      "nodedef": "ND_floor_vector2",
      "sourcecode": "floor({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_floor_vector2_genmdl": {
      "nodedef": "ND_floor_vector2",
      "sourcecode": "math::floor({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_floor_vector2_genmsl": {
      "nodedef": "ND_floor_vector2",
      "sourcecode": "floor({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_floor_vector2_genosl": {
      "nodedef": "ND_floor_vector2",
      "sourcecode": "floor({{in}})",
      "target": "genosl"
    },
    "implementation:IM_floor_vector3_genglsl": {
      "nodedef": "ND_floor_vector3",
      "sourcecode": "floor({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_floor_vector3_genmdl": {
      "nodedef": "ND_floor_vector3",
      "sourcecode": "math::floor({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_floor_vector3_genmsl": {
      "nodedef": "ND_floor_vector3",
      "sourcecode": "floor({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_floor_vector3_genosl": {
      "nodedef": "ND_floor_vector3",
      "sourcecode": "floor({{in}})",
      "target": "genosl"
    },
    "implementation:IM_floor_vector4_genglsl": {
      "nodedef": "ND_floor_vector4",
      "sourcecode": "floor({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_floor_vector4_genmdl": {
      "nodedef": "ND_floor_vector4",
      "sourcecode": "math::floor({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_floor_vector4_genmsl": {
      "nodedef": "ND_floor_vector4",
      "sourcecode": "floor({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_floor_vector4_genosl": {
      "nodedef": "ND_floor_vector4",
      "sourcecode": "floor({{in}})",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_color3FA_genglsl": {
      "file": "mx_fractal3d_fa_vector3.glsl",
      "function": "mx_fractal3d_fa_vector3",
      "nodedef": "ND_fractal3d_color3FA",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_color3FA_genmdl": {
      "nodedef": "ND_fractal3d_color3FA",
      "sourcecode": "mx::stdlib::mx_fractal3d_color3FA(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_color3FA_genmsl": {
      "file": "../genglsl/mx_fractal3d_fa_vector3.glsl",
      "function": "mx_fractal3d_fa_vector3",
      "nodedef": "ND_fractal3d_color3FA",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_color3FA_genosl": {
      "file": "mx_fractal3d_fa_color3.osl",
      "function": "mx_fractal3d_fa_color3",
      "nodedef": "ND_fractal3d_color3FA",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_color3_genglsl": {
      "file": "mx_fractal3d_vector3.glsl",
      "function": "mx_fractal3d_vector3",
      "nodedef": "ND_fractal3d_color3",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_color3_genmdl": {
      "nodedef": "ND_fractal3d_color3",
      "sourcecode": "mx::stdlib::mx_fractal3d_color3(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_color3_genmsl": {
      "file": "../genglsl/mx_fractal3d_vector3.glsl",
      "function": "mx_fractal3d_vector3",
      "nodedef": "ND_fractal3d_color3",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_color3_genosl": {
      "file": "mx_fractal3d_color3.osl",
      "function": "mx_fractal3d_color3",
      "nodedef": "ND_fractal3d_color3",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_color4FA_genglsl": {
      "file": "mx_fractal3d_fa_vector4.glsl",
      "function": "mx_fractal3d_fa_vector4",
      "nodedef": "ND_fractal3d_color4FA",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_color4FA_genmdl": {
      "nodedef": "ND_fractal3d_color4FA",
      "sourcecode": "mx::stdlib::mx_fractal3d_color4FA(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_color4FA_genmsl": {
      "file": "../genglsl/mx_fractal3d_fa_vector4.glsl",
      "function": "mx_fractal3d_fa_vector4",
      "nodedef": "ND_fractal3d_color4FA",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_color4FA_genosl": {
      "file": "mx_fractal3d_fa_color4.osl",
      "function": "mx_fractal3d_fa_color4",
      "nodedef": "ND_fractal3d_color4FA",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_color4_genglsl": {
      "file": "mx_fractal3d_vector4.glsl",
      "function": "mx_fractal3d_vector4",
      "nodedef": "ND_fractal3d_color4",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_color4_genmdl": {
      "nodedef": "ND_fractal3d_color4",
      "sourcecode": "mx::stdlib::mx_fractal3d_color4(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_color4_genmsl": {
      "file": "../genglsl/mx_fractal3d_vector4.glsl",
      "function": "mx_fractal3d_vector4",
      "nodedef": "ND_fractal3d_color4",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_color4_genosl": {
      "file": "mx_fractal3d_color4.osl",
      "function": "mx_fractal3d_color4",
      "nodedef": "ND_fractal3d_color4",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_float_genglsl": {
      "file": "mx_fractal3d_float.glsl",
      "function": "mx_fractal3d_float",
      "nodedef": "ND_fractal3d_float",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_float_genmdl": {
      "nodedef": "ND_fractal3d_float",
      "sourcecode": "mx::stdlib::mx_fractal3d_float(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_float_genmsl": {
      "file": "../genglsl/mx_fractal3d_float.glsl",
      "function": "mx_fractal3d_float",
      "nodedef": "ND_fractal3d_float",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_float_genosl": {
      "file": "mx_fractal3d_float.osl",
      "function": "mx_fractal3d_float",
      "nodedef": "ND_fractal3d_float",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_vector2FA_genglsl": {
      "file": "mx_fractal3d_fa_vector2.glsl",
      "function": "mx_fractal3d_fa_vector2",
      "nodedef": "ND_fractal3d_vector2FA",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_vector2FA_genmdl": {
      "nodedef": "ND_fractal3d_vector2FA",
      "sourcecode": "mx::stdlib::mx_fractal3d_float2FA(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_vector2FA_genmsl": {
      "file": "../genglsl/mx_fractal3d_fa_vector2.glsl",
      "function": "mx_fractal3d_fa_vector2",
      "nodedef": "ND_fractal3d_vector2FA",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_vector2FA_genosl": {
      "file": "mx_fractal3d_fa_vector2.osl",
      "function": "mx_fractal3d_fa_vector2",
      "nodedef": "ND_fractal3d_vector2FA",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_vector2_genglsl": {
      "file": "mx_fractal3d_vector2.glsl",
      "function": "mx_fractal3d_vector2",
      "nodedef": "ND_fractal3d_vector2",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_vector2_genmdl": {
      "nodedef": "ND_fractal3d_vector2",
      "sourcecode": "mx::stdlib::mx_fractal3d_float2(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_vector2_genmsl": {
      "file": "../genglsl/mx_fractal3d_vector2.glsl",
      "function": "mx_fractal3d_vector2",
      "nodedef": "ND_fractal3d_vector2",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_vector2_genosl": {
      "file": "mx_fractal3d_vector2.osl",
      "function": "mx_fractal3d_vector2",
      "nodedef": "ND_fractal3d_vector2",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_vector3FA_genglsl": {
      "file": "mx_fractal3d_fa_vector3.glsl",
      "function": "mx_fractal3d_fa_vector3",
      "nodedef": "ND_fractal3d_vector3FA",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_vector3FA_genmdl": {
      "nodedef": "ND_fractal3d_vector3FA",
      "sourcecode": "mx::stdlib::mx_fractal3d_float3FA(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_vector3FA_genmsl": {
      "file": "../genglsl/mx_fractal3d_fa_vector3.glsl",
      "function": "mx_fractal3d_fa_vector3",
      "nodedef": "ND_fractal3d_vector3FA",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_vector3FA_genosl": {
      "file": "mx_fractal3d_fa_vector3.osl",
      "function": "mx_fractal3d_fa_vector3",
      "nodedef": "ND_fractal3d_vector3FA",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_vector3_genglsl": {
      "file": "mx_fractal3d_vector3.glsl",
      "function": "mx_fractal3d_vector3",
      "nodedef": "ND_fractal3d_vector3",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_vector3_genmdl": {
      "nodedef": "ND_fractal3d_vector3",
      "sourcecode": "mx::stdlib::mx_fractal3d_float3(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_vector3_genmsl": {
      "file": "../genglsl/mx_fractal3d_vector3.glsl",
      "function": "mx_fractal3d_vector3",
      "nodedef": "ND_fractal3d_vector3",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_vector3_genosl": {
      "file": "mx_fractal3d_vector3.osl",
      "function": "mx_fractal3d_vector3",
      "nodedef": "ND_fractal3d_vector3",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_vector4FA_genglsl": {
      "file": "mx_fractal3d_fa_vector4.glsl",
      "function": "mx_fractal3d_fa_vector4",
      "nodedef": "ND_fractal3d_vector4FA",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_vector4FA_genmdl": {
      "nodedef": "ND_fractal3d_vector4FA",
      "sourcecode": "mx::stdlib::mx_fractal3d_float4FA(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_vector4FA_genmsl": {
      "file": "../genglsl/mx_fractal3d_fa_vector4.glsl",
      "function": "mx_fractal3d_fa_vector4",
      "nodedef": "ND_fractal3d_vector4FA",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_vector4FA_genosl": {
      "file": "mx_fractal3d_fa_vector4.osl",
      "function": "mx_fractal3d_fa_vector4",
      "nodedef": "ND_fractal3d_vector4FA",
      "target": "genosl"
    },
    "implementation:IM_fractal3d_vector4_genglsl": {
      "file": "mx_fractal3d_vector4.glsl",
      "function": "mx_fractal3d_vector4",
      "nodedef": "ND_fractal3d_vector4",
      "target": "genglsl"
    },
    "implementation:IM_fractal3d_vector4_genmdl": {
      "nodedef": "ND_fractal3d_vector4",
      "sourcecode": "mx::stdlib::mx_fractal3d_float4(mxp_amplitude:{{amplitude}}, mxp_octaves:{{octaves}}, mxp_lacunarity:{{lacunarity}}, mxp_diminish:{{diminish}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_fractal3d_vector4_genmsl": {
      "file": "../genglsl/mx_fractal3d_vector4.glsl",
      "function": "mx_fractal3d_vector4",
      "nodedef": "ND_fractal3d_vector4",
      "target": "genmsl"
    },
    "implementation:IM_fractal3d_vector4_genosl": {
      "file": "mx_fractal3d_vector4.osl",
      "function": "mx_fractal3d_vector4",
      "nodedef": "ND_fractal3d_vector4",
      "target": "genosl"
    },
    "implementation:IM_frame_float_genglsl": {
      "function": "mx_frame_float",
      "nodedef": "ND_frame_float",
      "target": "genglsl"
    },
    "implementation:IM_frame_float_genmdl": {
      "nodedef": "ND_frame_float",
      "sourcecode": "mx::stdlib::mx_frame_float()",
      "target": "genmdl"
    },
    "implementation:IM_frame_float_genmsl": {
      "function": "mx_frame_float",
      "nodedef": "ND_frame_float",
      "target": "genmsl"
    },
    "implementation:IM_frame_float_genosl": {
      "file": "mx_frame_float.osl",
      "function": "mx_frame_float",
      "nodedef": "ND_frame_float",
      "target": "genosl"
    },
    "implementation:IM_generalized_schlick_bsdf_genglsl": {
      "file": "mx_generalized_schlick_bsdf.glsl",
      "function": "mx_generalized_schlick_bsdf",
      "nodedef": "ND_generalized_schlick_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_generalized_schlick_bsdf_genmdl": {
      "nodedef": "ND_generalized_schlick_bsdf",
      "sourcecode": "mx::pbrlib::mx_generalized_schlick_bsdf(mxp_weight:{{weight}}, mxp_color0:{{color0}}, mxp_color90:{{color90}}, mxp_exponent:{{exponent}},mxp_roughness:{{roughness}}, mxp_normal:{{normal}}, mxp_tangent:{{tangent}}, mxp_distribution:{{distribution}}, mxp_scatter_mode:{{scatter_mode}}, mxp_base:{{base}}, mxp_thinfilm_thickness:{{thinfilm_thickness}}, mxp_thinfilm_ior:{{thinfilm_ior}})",
      "target": "genmdl"
    },
    "implementation:IM_generalized_schlick_bsdf_genmsl": {
      "file": "../genglsl/mx_generalized_schlick_bsdf.glsl",
      "function": "mx_generalized_schlick_bsdf",
      "nodedef": "ND_generalized_schlick_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_generalized_schlick_bsdf_genosl": {
      "file": "legacy/mx_generalized_schlick_bsdf.osl",
      "function": "mx_generalized_schlick_bsdf",
      "nodedef": "ND_generalized_schlick_bsdf",
      "target": "genosl"
    },
    "implementation:IM_generalized_schlick_edf_genglsl": {
      "file": "mx_generalized_schlick_edf.glsl",
      "function": "mx_generalized_schlick_edf",
      "nodedef": "ND_generalized_schlick_edf",
      "target": "genglsl"
    },
    "implementation:IM_generalized_schlick_edf_genmdl": {
      "nodedef": "ND_generalized_schlick_edf",
      "sourcecode": "mx::pbrlib::mx_generalized_schlick_edf(mxp_color0:{{color0}}, mxp_color90:{{color90}}, mxp_exponent:{{exponent}}, mxp_base:{{base}})",
      "target": "genmdl"
    },
    "implementation:IM_generalized_schlick_edf_genosl": {
      "file": "mx_generalized_schlick_edf.osl",
      "function": "mx_generalized_schlick_edf",
      "nodedef": "ND_generalized_schlick_edf",
      "target": "genosl"
    },
    "implementation:IM_geomcolor_color3_genglsl": {
      "nodedef": "ND_geomcolor_color3",
      "target": "genglsl"
    },
    "implementation:IM_geomcolor_color3_genmdl": {
      "nodedef": "ND_geomcolor_color3",
      "sourcecode": "mx::stdlib::mx_geomcolor_color3(mxp_index:{{index}})",
      "target": "genmdl"
    },
    "implementation:IM_geomcolor_color3_genmsl": {
      "nodedef": "ND_geomcolor_color3",
      "target": "genmsl"
    },
    "implementation:IM_geomcolor_color3_genosl": {
      "file": "mx_geomcolor_color3.osl",
      "function": "mx_geomcolor_color3",
      "nodedef": "ND_geomcolor_color3",
      "target": "genosl"
    },
    "implementation:IM_geomcolor_color4_genglsl": {
      "nodedef": "ND_geomcolor_color4",
      "target": "genglsl"
    },
    "implementation:IM_geomcolor_color4_genmdl": {
      "nodedef": "ND_geomcolor_color4",
      "sourcecode": "mx::stdlib::mx_geomcolor_color4(mxp_index:{{index}})",
      "target": "genmdl"
    },
    "implementation:IM_geomcolor_color4_genmsl": {
      "nodedef": "ND_geomcolor_color4",
      "target": "genmsl"
    },
    "implementation:IM_geomcolor_color4_genosl": {
      "file": "mx_geomcolor_color4.osl",
      "function": "mx_geomcolor_color4",
      "nodedef": "ND_geomcolor_color4",
      "target": "genosl"
    },
    "implementation:IM_geomcolor_float_genglsl": {
      "nodedef": "ND_geomcolor_float",
      "target": "genglsl"
    },
    "implementation:IM_geomcolor_float_genmdl": {
      "nodedef": "ND_geomcolor_float",
      "sourcecode": "mx::stdlib::mx_geomcolor_float(mxp_index:{{index}})",
      "target": "genmdl"
    },
    "implementation:IM_geomcolor_float_genmsl": {
      "nodedef": "ND_geomcolor_float",
      "target": "genmsl"
    },
    "implementation:IM_geomcolor_float_genosl": {
      "file": "mx_geomcolor_float.osl",
      "function": "mx_geomcolor_float",
      "nodedef": "ND_geomcolor_float",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_boolean_genglsl": {
      "function": "mx_geompropvalue_bool",
      "nodedef": "ND_geompropvalue_boolean",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_boolean_genmdl": {
      "nodedef": "ND_geompropvalue_boolean",
      "sourcecode": "mx::stdlib::mx_geompropvalue_boolean(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_boolean_genmsl": {
      "function": "mx_geompropvalue_bool",
      "nodedef": "ND_geompropvalue_boolean",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_boolean_genosl": {
      "file": "mx_geompropvalue_boolean.osl",
      "function": "mx_geompropvalue_boolean",
      "nodedef": "ND_geompropvalue_boolean",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_color3_genglsl": {
      "function": "mx_geompropvalue_color",
      "nodedef": "ND_geompropvalue_color3",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_color3_genmdl": {
      "nodedef": "ND_geompropvalue_color3",
      "sourcecode": "mx::stdlib::mx_geompropvalue_color3(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_color3_genmsl": {
      "function": "mx_geompropvalue_color",
      "nodedef": "ND_geompropvalue_color3",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_color3_genosl": {
      "file": "mx_geompropvalue_color3.osl",
      "function": "mx_geompropvalue_color",
      "nodedef": "ND_geompropvalue_color3",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_color4_genglsl": {
      "function": "mx_geompropvalue_color4",
      "nodedef": "ND_geompropvalue_color4",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_color4_genmdl": {
      "nodedef": "ND_geompropvalue_color4",
      "sourcecode": "mx::stdlib::mx_geompropvalue_color4(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_color4_genmsl": {
      "function": "mx_geompropvalue_color4",
      "nodedef": "ND_geompropvalue_color4",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_color4_genosl": {
      "file": "mx_geompropvalue_color4.osl",
      "function": "mx_geompropvalue_color4",
      "nodedef": "ND_geompropvalue_color4",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_float_genglsl": {
      "function": "mx_geompropvalue_float",
      "nodedef": "ND_geompropvalue_float",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_float_genmdl": {
      "nodedef": "ND_geompropvalue_float",
      "sourcecode": "mx::stdlib::mx_geompropvalue_float(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_float_genmsl": {
      "function": "mx_geompropvalue_float",
      "nodedef": "ND_geompropvalue_float",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_float_genosl": {
      "file": "mx_geompropvalue_float.osl",
      "function": "mx_geompropvalue_float",
      "nodedef": "ND_geompropvalue_float",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_integer_genglsl": {
      "function": "mx_geompropvalue_int",
      "nodedef": "ND_geompropvalue_integer",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_integer_genmdl": {
      "nodedef": "ND_geompropvalue_integer",
      "sourcecode": "mx::stdlib::mx_geompropvalue_integer(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_integer_genmsl": {
      "function": "mx_geompropvalue_int",
      "nodedef": "ND_geompropvalue_integer",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_integer_genosl": {
      "file": "mx_geompropvalue_integer.osl",
      "function": "mx_geompropvalue_integer",
      "nodedef": "ND_geompropvalue_integer",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_string_genglsl": {
      "function": "mx_geompropvalue_string",
      "nodedef": "ND_geompropvalue_string",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_string_genmdl": {
      "nodedef": "ND_geompropvalue_string",
      "sourcecode": "mx::stdlib::mx_geompropvalue_string(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_string_genmsl": {
      "function": "mx_geompropvalue_string",
      "nodedef": "ND_geompropvalue_string",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_string_genosl": {
      "file": "mx_geompropvalue_string.osl",
      "function": "mx_geompropvalue_string",
      "nodedef": "ND_geompropvalue_string",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_vector2_genglsl": {
      "function": "mx_geompropvalue_vector2",
      "nodedef": "ND_geompropvalue_vector2",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_vector2_genmdl": {
      "nodedef": "ND_geompropvalue_vector2",
      "sourcecode": "mx::stdlib::mx_geompropvalue_vector2(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_vector2_genmsl": {
      "function": "mx_geompropvalue_vector2",
      "nodedef": "ND_geompropvalue_vector2",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_vector2_genosl": {
      "file": "mx_geompropvalue_vector2.osl",
      "function": "mx_geompropvalue_vector2",
      "nodedef": "ND_geompropvalue_vector2",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_vector3_genglsl": {
      "function": "mx_geompropvalue_vector",
      "nodedef": "ND_geompropvalue_vector3",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_vector3_genmdl": {
      "nodedef": "ND_geompropvalue_vector3",
      "sourcecode": "mx::stdlib::mx_geompropvalue_vector3(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_vector3_genmsl": {
      "function": "mx_geompropvalue_vector",
      "nodedef": "ND_geompropvalue_vector3",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_vector3_genosl": {
      "file": "mx_geompropvalue_vector3.osl",
      "function": "mx_geompropvalue_vector",
      "nodedef": "ND_geompropvalue_vector3",
      "target": "genosl"
    },
    "implementation:IM_geompropvalue_vector4_genglsl": {
      "function": "mx_geompropvalue_vector4",
      "nodedef": "ND_geompropvalue_vector4",
      "target": "genglsl"
    },
    "implementation:IM_geompropvalue_vector4_genmdl": {
      "nodedef": "ND_geompropvalue_vector4",
      "sourcecode": "mx::stdlib::mx_geompropvalue_vector4(mxp_geomprop:{{geomprop}}, mxp_default:{{default}})",
      "target": "genmdl"
    },
    "implementation:IM_geompropvalue_vector4_genmsl": {
      "function": "mx_geompropvalue_vector4",
      "nodedef": "ND_geompropvalue_vector4",
      "target": "genmsl"
    },
    "implementation:IM_geompropvalue_vector4_genosl": {
      "file": "mx_geompropvalue_vector4.osl",
      "function": "mx_geompropvalue_vector4",
      "nodedef": "ND_geompropvalue_vector4",
      "target": "genosl"
    },
    "implementation:IM_heighttonormal_vector3_genglsl": {
      "nodedef": "ND_heighttonormal_vector3",
      "target": "genglsl"
    },
    "implementation:IM_heighttonormal_vector3_genmdl": {
      "nodedef": "ND_heighttonormal_vector3",
      "target": "genmdl"
    },
    "implementation:IM_heighttonormal_vector3_genmsl": {
      "nodedef": "ND_heighttonormal_vector3",
      "target": "genmsl"
    },
    "implementation:IM_heighttonormal_vector3_genosl": {
      "file": "mx_heighttonormal_vector3.osl",
      "function": "mx_heighttonormal_vector3",
      "nodedef": "ND_heighttonormal_vector3",
      "target": "genosl"
    },
    "implementation:IM_hsvtorgb_color3_genglsl": {
      "file": "mx_hsvtorgb_color3.glsl",
      "function": "mx_hsvtorgb_color3",
      "nodedef": "ND_hsvtorgb_color3",
      "target": "genglsl"
    },
    "implementation:IM_hsvtorgb_color3_genmdl": {
      "nodedef": "ND_hsvtorgb_color3",
      "sourcecode": "mx::stdlib::mx_hsvtorgb_color3({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_hsvtorgb_color3_genmsl": {
      "file": "../genglsl/mx_hsvtorgb_color3.glsl",
      "function": "mx_hsvtorgb_color3",
      "nodedef": "ND_hsvtorgb_color3",
      "target": "genmsl"
    },
    "implementation:IM_hsvtorgb_color3_genosl": {
      "file": "mx_hsvtorgb_color3.osl",
      "function": "mx_hsvtorgb_color3",
      "nodedef": "ND_hsvtorgb_color3",
      "target": "genosl"
    },
    "implementation:IM_hsvtorgb_color4_genglsl": {
      "file": "mx_hsvtorgb_color4.glsl",
      "function": "mx_hsvtorgb_color4",
      "nodedef": "ND_hsvtorgb_color4",
      "target": "genglsl"
    },
    "implementation:IM_hsvtorgb_color4_genmdl": {
      "nodedef": "ND_hsvtorgb_color4",
      "sourcecode": "mx::stdlib::mx_hsvtorgb_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_hsvtorgb_color4_genmsl": {
      "file": "../genglsl/mx_hsvtorgb_color4.glsl",
      "function": "mx_hsvtorgb_color4",
      "nodedef": "ND_hsvtorgb_color4",
      "target": "genmsl"
    },
    "implementation:IM_hsvtorgb_color4_genosl": {
      "file": "mx_hsvtorgb_color4.osl",
      "function": "mx_hsvtorgb_color4",
      "nodedef": "ND_hsvtorgb_color4",
      "target": "genosl"
    },
    "implementation:IM_ifequal_color3B_genglsl": {
      "nodedef": "ND_ifequal_color3B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_color3B_genmdl": {
      "nodedef": "ND_ifequal_color3B",
      "sourcecode": "mx::stdlib::mx_ifequal_color3B({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_color3B_genmsl": {
      "nodedef": "ND_ifequal_color3B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_color3B_genosl": {
      "nodedef": "ND_ifequal_color3B",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_color3I_genglsl": {
      "nodedef": "ND_ifequal_color3I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_color3I_genmdl": {
      "nodedef": "ND_ifequal_color3I",
      "sourcecode": "mx::stdlib::mx_ifequal_color3I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_color3I_genmsl": {
      "nodedef": "ND_ifequal_color3I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_color3I_genosl": {
      "nodedef": "ND_ifequal_color3I",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_color3_genglsl": {
      "nodedef": "ND_ifequal_color3",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_color3_genmdl": {
      "nodedef": "ND_ifequal_color3",
      "sourcecode": "mx::stdlib::mx_ifequal_color3({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_color3_genmsl": {
      "nodedef": "ND_ifequal_color3",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_color3_genosl": {
      "nodedef": "ND_ifequal_color3",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_color4B_genglsl": {
      "nodedef": "ND_ifequal_color4B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_color4B_genmdl": {
      "nodedef": "ND_ifequal_color4B",
      "sourcecode": "mx::stdlib::mx_ifequal_color4B({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_color4B_genmsl": {
      "nodedef": "ND_ifequal_color4B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_color4B_genosl": {
      "nodedef": "ND_ifequal_color4B",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_color4I_genglsl": {
      "nodedef": "ND_ifequal_color4I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_color4I_genmdl": {
      "nodedef": "ND_ifequal_color4I",
      "sourcecode": "mx::stdlib::mx_ifequal_color4I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_color4I_genmsl": {
      "nodedef": "ND_ifequal_color4I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_color4I_genosl": {
      "nodedef": "ND_ifequal_color4I",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_color4_genglsl": {
      "nodedef": "ND_ifequal_color4",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_color4_genmdl": {
      "nodedef": "ND_ifequal_color4",
      "sourcecode": "mx::stdlib::mx_ifequal_color4({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_color4_genmsl": {
      "nodedef": "ND_ifequal_color4",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_color4_genosl": {
      "nodedef": "ND_ifequal_color4",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_floatB_genglsl": {
      "nodedef": "ND_ifequal_floatB",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_floatB_genmdl": {
      "nodedef": "ND_ifequal_floatB",
      "sourcecode": "mx::stdlib::mx_ifequal_floatB({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_floatB_genmsl": {
      "nodedef": "ND_ifequal_floatB",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_floatB_genosl": {
      "nodedef": "ND_ifequal_floatB",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_floatI_genglsl": {
      "nodedef": "ND_ifequal_floatI",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_floatI_genmdl": {
      "nodedef": "ND_ifequal_floatI",
      "sourcecode": "mx::stdlib::mx_ifequal_floatI({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_floatI_genmsl": {
      "nodedef": "ND_ifequal_floatI",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_floatI_genosl": {
      "nodedef": "ND_ifequal_floatI",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_float_genglsl": {
      "nodedef": "ND_ifequal_float",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_float_genmdl": {
      "nodedef": "ND_ifequal_float",
      "sourcecode": "mx::stdlib::mx_ifequal_float({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_float_genmsl": {
      "nodedef": "ND_ifequal_float",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_float_genosl": {
      "nodedef": "ND_ifequal_float",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector2B_genglsl": {
      "nodedef": "ND_ifequal_vector2B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector2B_genmdl": {
      "nodedef": "ND_ifequal_vector2B",
      "sourcecode": "mx::stdlib::mx_ifequal_vector2B({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector2B_genmsl": {
      "nodedef": "ND_ifequal_vector2B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector2B_genosl": {
      "nodedef": "ND_ifequal_vector2B",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector2I_genglsl": {
      "nodedef": "ND_ifequal_vector2I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector2I_genmdl": {
      "nodedef": "ND_ifequal_vector2I",
      "sourcecode": "mx::stdlib::mx_ifequal_vector2I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector2I_genmsl": {
      "nodedef": "ND_ifequal_vector2I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector2I_genosl": {
      "nodedef": "ND_ifequal_vector2I",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector2_genglsl": {
      "nodedef": "ND_ifequal_vector2",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector2_genmdl": {
      "nodedef": "ND_ifequal_vector2",
      "sourcecode": "mx::stdlib::mx_ifequal_vector2({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector2_genmsl": {
      "nodedef": "ND_ifequal_vector2",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector2_genosl": {
      "nodedef": "ND_ifequal_vector2",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector3B_genglsl": {
      "nodedef": "ND_ifequal_vector3B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector3B_genmdl": {
      "nodedef": "ND_ifequal_vector3B",
      "sourcecode": "mx::stdlib::mx_ifequal_vector3B({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector3B_genmsl": {
      "nodedef": "ND_ifequal_vector3B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector3B_genosl": {
      "nodedef": "ND_ifequal_vector3B",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector3I_genglsl": {
      "nodedef": "ND_ifequal_vector3I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector3I_genmdl": {
      "nodedef": "ND_ifequal_vector3I",
      "sourcecode": "mx::stdlib::mx_ifequal_vector3I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector3I_genmsl": {
      "nodedef": "ND_ifequal_vector3I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector3I_genosl": {
      "nodedef": "ND_ifequal_vector3I",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector3_genglsl": {
      "nodedef": "ND_ifequal_vector3",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector3_genmdl": {
      "nodedef": "ND_ifequal_vector3",
      "sourcecode": "mx::stdlib::mx_ifequal_vector3({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector3_genmsl": {
      "nodedef": "ND_ifequal_vector3",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector3_genosl": {
      "nodedef": "ND_ifequal_vector3",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector4B_genglsl": {
      "nodedef": "ND_ifequal_vector4B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector4B_genmdl": {
      "nodedef": "ND_ifequal_vector4B",
      "sourcecode": "mx::stdlib::mx_ifequal_vector4B({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector4B_genmsl": {
      "nodedef": "ND_ifequal_vector4B",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector4B_genosl": {
      "nodedef": "ND_ifequal_vector4B",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector4I_genglsl": {
      "nodedef": "ND_ifequal_vector4I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector4I_genmdl": {
      "nodedef": "ND_ifequal_vector4I",
      "sourcecode": "mx::stdlib::mx_ifequal_vector4I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector4I_genmsl": {
      "nodedef": "ND_ifequal_vector4I",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector4I_genosl": {
      "nodedef": "ND_ifequal_vector4I",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifequal_vector4_genglsl": {
      "nodedef": "ND_ifequal_vector4",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifequal_vector4_genmdl": {
      "nodedef": "ND_ifequal_vector4",
      "sourcecode": "mx::stdlib::mx_ifequal_vector4({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifequal_vector4_genmsl": {
      "nodedef": "ND_ifequal_vector4",
      "sourcecode": "({{value1}} == {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifequal_vector4_genosl": {
      "nodedef": "ND_ifequal_vector4",
      "sourcecode": "mx_ternary({{value1}} == {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_color3I_genglsl": {
      "nodedef": "ND_ifgreater_color3I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_color3I_genmdl": {
      "nodedef": "ND_ifgreater_color3I",
      "sourcecode": "mx::stdlib::mx_ifgreater_color3I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_color3I_genmsl": {
      "nodedef": "ND_ifgreater_color3I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_color3I_genosl": {
      "nodedef": "ND_ifgreater_color3I",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_color3_genglsl": {
      "nodedef": "ND_ifgreater_color3",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_color3_genmdl": {
      "nodedef": "ND_ifgreater_color3",
      "sourcecode": "mx::stdlib::mx_ifgreater_color3({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_color3_genmsl": {
      "nodedef": "ND_ifgreater_color3",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_color3_genosl": {
      "nodedef": "ND_ifgreater_color3",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_color4I_genglsl": {
      "nodedef": "ND_ifgreater_color4I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_color4I_genmdl": {
      "nodedef": "ND_ifgreater_color4I",
      "sourcecode": "mx::stdlib::mx_ifgreater_color4I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_color4I_genmsl": {
      "nodedef": "ND_ifgreater_color4I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_color4I_genosl": {
      "nodedef": "ND_ifgreater_color4I",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_color4_genglsl": {
      "nodedef": "ND_ifgreater_color4",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_color4_genmdl": {
      "nodedef": "ND_ifgreater_color4",
      "sourcecode": "mx::stdlib::mx_ifgreater_color4({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_color4_genmsl": {
      "nodedef": "ND_ifgreater_color4",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_color4_genosl": {
      "nodedef": "ND_ifgreater_color4",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_floatI_genglsl": {
      "nodedef": "ND_ifgreater_floatI",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_floatI_genmdl": {
      "nodedef": "ND_ifgreater_floatI",
      "sourcecode": "mx::stdlib::mx_ifgreater_floatI({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_floatI_genmsl": {
      "nodedef": "ND_ifgreater_floatI",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_floatI_genosl": {
      "nodedef": "ND_ifgreater_floatI",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_float_genglsl": {
      "nodedef": "ND_ifgreater_float",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_float_genmdl": {
      "nodedef": "ND_ifgreater_float",
      "sourcecode": "mx::stdlib::mx_ifgreater_float({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_float_genmsl": {
      "nodedef": "ND_ifgreater_float",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_float_genosl": {
      "nodedef": "ND_ifgreater_float",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_vector2I_genglsl": {
      "nodedef": "ND_ifgreater_vector2I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_vector2I_genmdl": {
      "nodedef": "ND_ifgreater_vector2I",
      "sourcecode": "mx::stdlib::mx_ifgreater_vector2I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_vector2I_genmsl": {
      "nodedef": "ND_ifgreater_vector2I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_vector2I_genosl": {
      "nodedef": "ND_ifgreater_vector2I",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_vector2_genglsl": {
      "nodedef": "ND_ifgreater_vector2",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_vector2_genmdl": {
      "nodedef": "ND_ifgreater_vector2",
      "sourcecode": "mx::stdlib::mx_ifgreater_vector2({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_vector2_genmsl": {
      "nodedef": "ND_ifgreater_vector2",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_vector2_genosl": {
      "nodedef": "ND_ifgreater_vector2",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_vector3I_genglsl": {
      "nodedef": "ND_ifgreater_vector3I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_vector3I_genmdl": {
      "nodedef": "ND_ifgreater_vector3I",
      "sourcecode": "mx::stdlib::mx_ifgreater_vector3I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_vector3I_genmsl": {
      "nodedef": "ND_ifgreater_vector3I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_vector3I_genosl": {
      "nodedef": "ND_ifgreater_vector3I",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_vector3_genglsl": {
      "nodedef": "ND_ifgreater_vector3",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_vector3_genmdl": {
      "nodedef": "ND_ifgreater_vector3",
      "sourcecode": "mx::stdlib::mx_ifgreater_vector3({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_vector3_genmsl": {
      "nodedef": "ND_ifgreater_vector3",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_vector3_genosl": {
      "nodedef": "ND_ifgreater_vector3",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_vector4I_genglsl": {
      "nodedef": "ND_ifgreater_vector4I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_vector4I_genmdl": {
      "nodedef": "ND_ifgreater_vector4I",
      "sourcecode": "mx::stdlib::mx_ifgreater_vector4I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_vector4I_genmsl": {
      "nodedef": "ND_ifgreater_vector4I",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_vector4I_genosl": {
      "nodedef": "ND_ifgreater_vector4I",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreater_vector4_genglsl": {
      "nodedef": "ND_ifgreater_vector4",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreater_vector4_genmdl": {
      "nodedef": "ND_ifgreater_vector4",
      "sourcecode": "mx::stdlib::mx_ifgreater_vector4({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreater_vector4_genmsl": {
      "nodedef": "ND_ifgreater_vector4",
      "sourcecode": "({{value1}} > {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreater_vector4_genosl": {
      "nodedef": "ND_ifgreater_vector4",
      "sourcecode": "mx_ternary({{value1}} > {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_color3I_genglsl": {
      "nodedef": "ND_ifgreatereq_color3I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_color3I_genmdl": {
      "nodedef": "ND_ifgreatereq_color3I",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_color3I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_color3I_genmsl": {
      "nodedef": "ND_ifgreatereq_color3I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_color3I_genosl": {
      "nodedef": "ND_ifgreatereq_color3I",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_color3_genglsl": {
      "nodedef": "ND_ifgreatereq_color3",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_color3_genmdl": {
      "nodedef": "ND_ifgreatereq_color3",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_color3({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_color3_genmsl": {
      "nodedef": "ND_ifgreatereq_color3",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_color3_genosl": {
      "nodedef": "ND_ifgreatereq_color3",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_color4I_genglsl": {
      "nodedef": "ND_ifgreatereq_color4I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_color4I_genmdl": {
      "nodedef": "ND_ifgreatereq_color4I",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_color4I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_color4I_genmsl": {
      "nodedef": "ND_ifgreatereq_color4I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_color4I_genosl": {
      "nodedef": "ND_ifgreatereq_color4I",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_color4_genglsl": {
      "nodedef": "ND_ifgreatereq_color4",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_color4_genmdl": {
      "nodedef": "ND_ifgreatereq_color4",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_color4({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_color4_genmsl": {
      "nodedef": "ND_ifgreatereq_color4",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_color4_genosl": {
      "nodedef": "ND_ifgreatereq_color4",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_floatI_genglsl": {
      "nodedef": "ND_ifgreatereq_floatI",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_floatI_genmdl": {
      "nodedef": "ND_ifgreatereq_floatI",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_floatI({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_floatI_genmsl": {
      "nodedef": "ND_ifgreatereq_floatI",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_floatI_genosl": {
      "nodedef": "ND_ifgreatereq_floatI",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_float_genglsl": {
      "nodedef": "ND_ifgreatereq_float",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_float_genmdl": {
      "nodedef": "ND_ifgreatereq_float",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_float({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_float_genmsl": {
      "nodedef": "ND_ifgreatereq_float",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_float_genosl": {
      "nodedef": "ND_ifgreatereq_float",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_vector2I_genglsl": {
      "nodedef": "ND_ifgreatereq_vector2I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_vector2I_genmdl": {
      "nodedef": "ND_ifgreatereq_vector2I",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_vector2I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_vector2I_genmsl": {
      "nodedef": "ND_ifgreatereq_vector2I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_vector2I_genosl": {
      "nodedef": "ND_ifgreatereq_vector2I",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_vector2_genglsl": {
      "nodedef": "ND_ifgreatereq_vector2",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_vector2_genmdl": {
      "nodedef": "ND_ifgreatereq_vector2",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_vector2({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_vector2_genmsl": {
      "nodedef": "ND_ifgreatereq_vector2",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_vector2_genosl": {
      "nodedef": "ND_ifgreatereq_vector2",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_vector3I_genglsl": {
      "nodedef": "ND_ifgreatereq_vector3I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_vector3I_genmdl": {
      "nodedef": "ND_ifgreatereq_vector3I",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_vector3I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_vector3I_genmsl": {
      "nodedef": "ND_ifgreatereq_vector3I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_vector3I_genosl": {
      "nodedef": "ND_ifgreatereq_vector3I",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_vector3_genglsl": {
      "nodedef": "ND_ifgreatereq_vector3",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_vector3_genmdl": {
      "nodedef": "ND_ifgreatereq_vector3",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_vector3({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_vector3_genmsl": {
      "nodedef": "ND_ifgreatereq_vector3",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_vector3_genosl": {
      "nodedef": "ND_ifgreatereq_vector3",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_vector4I_genglsl": {
      "nodedef": "ND_ifgreatereq_vector4I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_vector4I_genmdl": {
      "nodedef": "ND_ifgreatereq_vector4I",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_vector4I({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_vector4I_genmsl": {
      "nodedef": "ND_ifgreatereq_vector4I",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_vector4I_genosl": {
      "nodedef": "ND_ifgreatereq_vector4I",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_ifgreatereq_vector4_genglsl": {
      "nodedef": "ND_ifgreatereq_vector4",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_ifgreatereq_vector4_genmdl": {
      "nodedef": "ND_ifgreatereq_vector4",
      "sourcecode": "mx::stdlib::mx_ifgreatereq_vector4({{value1}}, {{value2}}, {{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_ifgreatereq_vector4_genmsl": {
      "nodedef": "ND_ifgreatereq_vector4",
      "sourcecode": "({{value1}} >= {{value2}}) ? {{in1}} : {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_ifgreatereq_vector4_genosl": {
      "nodedef": "ND_ifgreatereq_vector4",
      "sourcecode": "mx_ternary({{value1}} >= {{value2}}, {{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_image_color3_genglsl": {
      "file": "mx_image_color3.glsl",
      "function": "mx_image_color3",
      "input:default": {
        "implname": "default_value",
        "type": "color3"
      },
      "nodedef": "ND_image_color3",
      "target": "genglsl"
    },
    "implementation:IM_image_color3_genmdl": {
      "input:default": {
        "implname": "default_value",
        "type": "color3"
      },
      "nodedef": "ND_image_color3",
      "sourcecode": "mx::stdlib::mx_image_color3({{file}}, {{layer}}, {{default}}, {{texcoord}}, {{uaddressmode}}, {{vaddressmode}}, {{filtertype}}, {{framerange}}, {{frameoffset}}, {{frameendaction}})",
      "target": "genmdl"
    },
    "implementation:IM_image_color3_genmsl": {
      "file": "../genglsl/mx_image_color3.glsl",
      "function": "mx_image_color3",
      "input:default": {
        "implname": "default_value",
        "type": "color3"
      },
      "nodedef": "ND_image_color3",
      "target": "genmsl"
    },
    "implementation:IM_image_color3_genosl": {
      "file": "mx_image_color3.osl",
      "function": "mx_image_color3",
      "input:default": {
        "implname": "default_value",
        "type": "color3"
      },
      "nodedef": "ND_image_color3",
      "target": "genosl"
    },
    "implementation:IM_image_color4_genglsl": {
      "file": "mx_image_color4.glsl",
      "function": "mx_image_color4",
      "input:default": {
        "implname": "default_value",
        "type": "color4"
      },
      "nodedef": "ND_image_color4",
      "target": "genglsl"
    },
    "implementation:IM_image_color4_genmdl": {
      "input:default": {
        "implname": "default_value",
        "type": "color4"
      },
      "nodedef": "ND_image_color4",
      "sourcecode": "mx::stdlib::mx_image_color4({{file}}, {{layer}}, {{default}}, {{texcoord}}, {{uaddressmode}}, {{vaddressmode}}, {{filtertype}}, {{framerange}}, {{frameoffset}}, {{frameendaction}})",
      "target": "genmdl"
    },
    "implementation:IM_image_color4_genmsl": {
      "file": "../genglsl/mx_image_color4.glsl",
      "function": "mx_image_color4",
      "input:default": {
        "implname": "default_value",
        "type": "color4"
      },
      "nodedef": "ND_image_color4",
      "target": "genmsl"
    },
    "implementation:IM_image_color4_genosl": {
      "file": "mx_image_color4.osl",
      "function": "mx_image_color4",
      "input:default": {
        "implname": "default_value",
        "type": "color4"
      },
      "nodedef": "ND_image_color4",
      "target": "genosl"
    },
    "implementation:IM_image_float_genglsl": {
      "file": "mx_image_float.glsl",
      "function": "mx_image_float",
      "input:default": {
        "implname": "default_value",
        "type": "float"
      },
      "nodedef": "ND_image_float",
      "target": "genglsl"
    },
    "implementation:IM_image_float_genmdl": {
      "input:default": {
        "implname": "default_value",
        "type": "float"
      },
      "nodedef": "ND_image_float",
      "sourcecode": "mx::stdlib::mx_image_float({{file}}, {{layer}}, {{default}}, {{texcoord}}, {{uaddressmode}}, {{vaddressmode}}, {{filtertype}}, {{framerange}}, {{frameoffset}}, {{frameendaction}})",
      "target": "genmdl"
    },
    "implementation:IM_image_float_genmsl": {
      "file": "../genglsl/mx_image_float.glsl",
      "function": "mx_image_float",
      "input:default": {
        "implname": "default_value",
        "type": "float"
      },
      "nodedef": "ND_image_float",
      "target": "genmsl"
    },
    "implementation:IM_image_float_genosl": {
      "file": "mx_image_float.osl",
      "function": "mx_image_float",
      "input:default": {
        "implname": "default_value",
        "type": "float"
      },
      "nodedef": "ND_image_float",
      "target": "genosl"
    },
    "implementation:IM_image_vector2_genglsl": {
      "file": "mx_image_vector2.glsl",
      "function": "mx_image_vector2",
      "input:default": {
        "implname": "default_value",
        "type": "vector2"
      },
      "nodedef": "ND_image_vector2",
      "target": "genglsl"
    },
    "implementation:IM_image_vector2_genmdl": {
      "input:default": {
        "implname": "default_value",
        "type": "vector2"
      },
      "nodedef": "ND_image_vector2",
      "sourcecode": "mx::stdlib::mx_image_vector2({{file}}, {{layer}}, {{default}}, {{texcoord}}, {{uaddressmode}}, {{vaddressmode}}, {{filtertype}}, {{framerange}}, {{frameoffset}}, {{frameendaction}})",
      "target": "genmdl"
    },
    "implementation:IM_image_vector2_genmsl": {
      "file": "../genglsl/mx_image_vector2.glsl",
      "function": "mx_image_vector2",
      "input:default": {
        "implname": "default_value",
        "type": "vector2"
      },
      "nodedef": "ND_image_vector2",
      "target": "genmsl"
    },
    "implementation:IM_image_vector2_genosl": {
      "file": "mx_image_vector2.osl",
      "function": "mx_image_vector2",
      "input:default": {
        "implname": "default_value",
        "type": "vector2"
      },
      "nodedef": "ND_image_vector2",
      "target": "genosl"
    },
    "implementation:IM_image_vector3_genglsl": {
      "file": "mx_image_vector3.glsl",
      "function": "mx_image_vector3",
      "input:default": {
        "implname": "default_value",
        "type": "vector3"
      },
      "nodedef": "ND_image_vector3",
      "target": "genglsl"
    },
    "implementation:IM_image_vector3_genmdl": {
      "input:default": {
        "implname": "default_value",
        "type": "vector3"
      },
      "nodedef": "ND_image_vector3",
      "sourcecode": "mx::stdlib::mx_image_vector3({{file}}, {{layer}}, {{default}}, {{texcoord}}, {{uaddressmode}}, {{vaddressmode}}, {{filtertype}}, {{framerange}}, {{frameoffset}}, {{frameendaction}})",
      "target": "genmdl"
    },
    "implementation:IM_image_vector3_genmsl": {
      "file": "../genglsl/mx_image_vector3.glsl",
      "function": "mx_image_vector3",
      "input:default": {
        "implname": "default_value",
        "type": "vector3"
      },
      "nodedef": "ND_image_vector3",
      "target": "genmsl"
    },
    "implementation:IM_image_vector3_genosl": {
      "file": "mx_image_vector3.osl",
      "function": "mx_image_vector3",
      "input:default": {
        "implname": "default_value",
        "type": "vector3"
      },
      "nodedef": "ND_image_vector3",
      "target": "genosl"
    },
    "implementation:IM_image_vector4_genglsl": {
      "file": "mx_image_vector4.glsl",
      "function": "mx_image_vector4",
      "input:default": {
        "implname": "default_value",
        "type": "vector4"
      },
      "nodedef": "ND_image_vector4",
      "target": "genglsl"
    },
    "implementation:IM_image_vector4_genmdl": {
      "input:default": {
        "implname": "default_value",
        "type": "vector4"
      },
      "nodedef": "ND_image_vector4",
      "sourcecode": "mx::stdlib::mx_image_vector4({{file}}, {{layer}}, {{default}}, {{texcoord}}, {{uaddressmode}}, {{vaddressmode}}, {{filtertype}}, {{framerange}}, {{frameoffset}}, {{frameendaction}})",
      "target": "genmdl"
    },
    "implementation:IM_image_vector4_genmsl": {
      "file": "../genglsl/mx_image_vector4.glsl",
      "function": "mx_image_vector4",
      "input:default": {
        "implname": "default_value",
        "type": "vector4"
      },
      "nodedef": "ND_image_vector4",
      "target": "genmsl"
    },
    "implementation:IM_image_vector4_genosl": {
      "file": "mx_image_vector4.osl",
      "function": "mx_image_vector4",
      "input:default": {
        "implname": "default_value",
        "type": "vector4"
      },
      "nodedef": "ND_image_vector4",
      "target": "genosl"
    },
    "implementation:IM_in_color4_genglsl": {
      "nodedef": "ND_in_color4",
      "sourcecode": "({{fg}}*{{bg}}.a  * {{mix}}) + ({{bg}} * (1.0-{{mix}}));",
      "target": "genglsl"
    },
    "implementation:IM_in_color4_genmdl": {
      "nodedef": "ND_in_color4",
      "sourcecode": "mx::stdlib::mx_in_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_in_color4_genmsl": {
      "nodedef": "ND_in_color4",
      "sourcecode": "({{fg}}*{{bg}}.a  * {{mix}}) + ({{bg}} * (1.0-{{mix}}));",
      "target": "genmsl"
    },
    "implementation:IM_in_color4_genosl": {
      "nodedef": "ND_in_color4",
      "sourcecode": "({{fg}}*{{bg}}.a  * {{mix}}) + ({{bg}} * (1.0-{{mix}}))",
      "target": "genosl"
    },
    "implementation:IM_inside_color3_genglsl": {
      "nodedef": "ND_inside_color3",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genglsl"
    },
    "implementation:IM_inside_color3_genmdl": {
      "nodedef": "ND_inside_color3",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genmdl"
    },
    "implementation:IM_inside_color3_genmsl": {
      "nodedef": "ND_inside_color3",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genmsl"
    },
    "implementation:IM_inside_color3_genosl": {
      "nodedef": "ND_inside_color3",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genosl"
    },
    "implementation:IM_inside_color4_genglsl": {
      "nodedef": "ND_inside_color4",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genglsl"
    },
    "implementation:IM_inside_color4_genmdl": {
      "nodedef": "ND_inside_color4",
      "sourcecode": "mx_multiply({{in}}, {{mask}})",
      "target": "genmdl"
    },
    "implementation:IM_inside_color4_genmsl": {
      "nodedef": "ND_inside_color4",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genmsl"
    },
    "implementation:IM_inside_color4_genosl": {
      "nodedef": "ND_inside_color4",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genosl"
    },
    "implementation:IM_inside_float_genglsl": {
      "nodedef": "ND_inside_float",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genglsl"
    },
    "implementation:IM_inside_float_genmdl": {
      "nodedef": "ND_inside_float",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genmdl"
    },
    "implementation:IM_inside_float_genmsl": {
      "nodedef": "ND_inside_float",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genmsl"
    },
    "implementation:IM_inside_float_genosl": {
      "nodedef": "ND_inside_float",
      "sourcecode": "{{in}} * {{mask}}",
      "target": "genosl"
    },
    "implementation:IM_invert_color3FA_genglsl": {
      "nodedef": "ND_invert_color3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_color3FA_genmdl": {
      "nodedef": "ND_invert_color3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_color3FA_genmsl": {
      "nodedef": "ND_invert_color3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_color3FA_genosl": {
      "nodedef": "ND_invert_color3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_color3_genglsl": {
      "nodedef": "ND_invert_color3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_color3_genmdl": {
      "nodedef": "ND_invert_color3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_color3_genmsl": {
      "nodedef": "ND_invert_color3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_color3_genosl": {
      "nodedef": "ND_invert_color3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_color4FA_genglsl": {
      "nodedef": "ND_invert_color4FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_color4FA_genmdl": {
      "nodedef": "ND_invert_color4FA",
      "sourcecode": "mx::stdlib::mx_invert_color4FA({{in}}, {{amount}})",
      "target": "genmdl"
    },
    "implementation:IM_invert_color4FA_genmsl": {
      "nodedef": "ND_invert_color4FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_color4FA_genosl": {
      "nodedef": "ND_invert_color4FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_color4_genglsl": {
      "nodedef": "ND_invert_color4",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_color4_genmdl": {
      "nodedef": "ND_invert_color4",
      "sourcecode": "mx::stdlib::mx_invert_color4({{in}}, {{amount}})",
      "target": "genmdl"
    },
    "implementation:IM_invert_color4_genmsl": {
      "nodedef": "ND_invert_color4",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_color4_genosl": {
      "nodedef": "ND_invert_color4",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_float_genglsl": {
      "nodedef": "ND_invert_float",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_float_genmdl": {
      "nodedef": "ND_invert_float",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_float_genmsl": {
      "nodedef": "ND_invert_float",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_float_genosl": {
      "nodedef": "ND_invert_float",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_vector2FA_genglsl": {
      "nodedef": "ND_invert_vector2FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_vector2FA_genmdl": {
      "nodedef": "ND_invert_vector2FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_vector2FA_genmsl": {
      "nodedef": "ND_invert_vector2FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_vector2FA_genosl": {
      "nodedef": "ND_invert_vector2FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_vector2_genglsl": {
      "nodedef": "ND_invert_vector2",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_vector2_genmdl": {
      "nodedef": "ND_invert_vector2",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_vector2_genmsl": {
      "nodedef": "ND_invert_vector2",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_vector2_genosl": {
      "nodedef": "ND_invert_vector2",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_vector3FA_genglsl": {
      "nodedef": "ND_invert_vector3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_vector3FA_genmdl": {
      "nodedef": "ND_invert_vector3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_vector3FA_genmsl": {
      "nodedef": "ND_invert_vector3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_vector3FA_genosl": {
      "nodedef": "ND_invert_vector3FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_vector3_genglsl": {
      "nodedef": "ND_invert_vector3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_vector3_genmdl": {
      "nodedef": "ND_invert_vector3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_vector3_genmsl": {
      "nodedef": "ND_invert_vector3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_vector3_genosl": {
      "nodedef": "ND_invert_vector3",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_vector4FA_genglsl": {
      "nodedef": "ND_invert_vector4FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_vector4FA_genmdl": {
      "nodedef": "ND_invert_vector4FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_vector4FA_genmsl": {
      "nodedef": "ND_invert_vector4FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_vector4FA_genosl": {
      "nodedef": "ND_invert_vector4FA",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invert_vector4_genglsl": {
      "nodedef": "ND_invert_vector4",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_invert_vector4_genmdl": {
      "nodedef": "ND_invert_vector4",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmdl"
    },
    "implementation:IM_invert_vector4_genmsl": {
      "nodedef": "ND_invert_vector4",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_invert_vector4_genosl": {
      "nodedef": "ND_invert_vector4",
      "sourcecode": "{{amount}} - {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invertmatrix_matrix33_genglsl": {
      "nodedef": "ND_invertmatrix_matrix33",
      "sourcecode": "inverse({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_invertmatrix_matrix33_genmdl": {
      "nodedef": "ND_invertmatrix_matrix33",
      "sourcecode": "mx::stdlib::mx_invertmatrix_matrix33({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_invertmatrix_matrix33_genmsl": {
      "nodedef": "ND_invertmatrix_matrix33",
      "sourcecode": "inverse({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_invertmatrix_matrix33_genosl": {
      "nodedef": "ND_invertmatrix_matrix33",
      "sourcecode": "1 / {{in}}",
      "target": "genosl"
    },
    "implementation:IM_invertmatrix_matrix44_genglsl": {
      "nodedef": "ND_invertmatrix_matrix44",
      "sourcecode": "inverse({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_invertmatrix_matrix44_genmdl": {
      "nodedef": "ND_invertmatrix_matrix44",
      "sourcecode": "mx::stdlib::mx_invertmatrix_matrix44({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_invertmatrix_matrix44_genmsl": {
      "nodedef": "ND_invertmatrix_matrix44",
      "sourcecode": "inverse({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_invertmatrix_matrix44_genosl": {
      "nodedef": "ND_invertmatrix_matrix44",
      "sourcecode": "1 / {{in}}",
      "target": "genosl"
    },
    "implementation:IM_layer_bsdf_genglsl": {
      "nodedef": "ND_layer_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_layer_bsdf_genmdl": {
      "nodedef": "ND_layer_bsdf",
      "target": "genmdl"
    },
    "implementation:IM_layer_bsdf_genmsl": {
      "nodedef": "ND_layer_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_layer_bsdf_genosl": {
      "nodedef": "ND_layer_bsdf",
      "target": "genosl"
    },
    "implementation:IM_layer_vdf_genglsl": {
      "nodedef": "ND_layer_vdf",
      "target": "genglsl"
    },
    "implementation:IM_layer_vdf_genmdl": {
      "nodedef": "ND_layer_vdf",
      "target": "genmdl"
    },
    "implementation:IM_layer_vdf_genmsl": {
      "nodedef": "ND_layer_vdf",
      "target": "genmsl"
    },
    "implementation:IM_layer_vdf_genosl": {
      "nodedef": "ND_layer_vdf",
      "target": "genosl"
    },
    "implementation:IM_light_genglsl": {
      "nodedef": "ND_light",
      "target": "genglsl"
    },
    "implementation:IM_light_genmdl": {
      "nodedef": "ND_light",
      "sourcecode": "mx::pbrlib::mx_light(mxp_edf:{{edf}}, mxp_intensity:{{intensity}}, mxp_exposure:{{exposure}})",
      "target": "genmdl"
    },
    "implementation:IM_light_genmsl": {
      "nodedef": "ND_light",
      "target": "genmsl"
    },
    "implementation:IM_ln_float_genglsl": {
      "nodedef": "ND_ln_float",
      "sourcecode": "log({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ln_float_genmdl": {
      "nodedef": "ND_ln_float",
      "sourcecode": "math::log({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ln_float_genmsl": {
      "nodedef": "ND_ln_float",
      "sourcecode": "log({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ln_float_genosl": {
      "nodedef": "ND_ln_float",
      "sourcecode": "log({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ln_vector2_genglsl": {
      "nodedef": "ND_ln_vector2",
      "sourcecode": "log({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ln_vector2_genmdl": {
      "nodedef": "ND_ln_vector2",
      "sourcecode": "math::log({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ln_vector2_genmsl": {
      "nodedef": "ND_ln_vector2",
      "sourcecode": "log({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ln_vector2_genosl": {
      "nodedef": "ND_ln_vector2",
      "sourcecode": "log({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ln_vector3_genglsl": {
      "nodedef": "ND_ln_vector3",
      "sourcecode": "log({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ln_vector3_genmdl": {
      "nodedef": "ND_ln_vector3",
      "sourcecode": "math::log({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ln_vector3_genmsl": {
      "nodedef": "ND_ln_vector3",
      "sourcecode": "log({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ln_vector3_genosl": {
      "nodedef": "ND_ln_vector3",
      "sourcecode": "log({{in}})",
      "target": "genosl"
    },
    "implementation:IM_ln_vector4_genglsl": {
      "nodedef": "ND_ln_vector4",
      "sourcecode": "log({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_ln_vector4_genmdl": {
      "nodedef": "ND_ln_vector4",
      "sourcecode": "math::log({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_ln_vector4_genmsl": {
      "nodedef": "ND_ln_vector4",
      "sourcecode": "log({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_ln_vector4_genosl": {
      "nodedef": "ND_ln_vector4",
      "sourcecode": "log({{in}})",
      "target": "genosl"
    },
    "implementation:IM_luminance_color3_genglsl": {
      "file": "mx_luminance_color3.glsl",
      "function": "mx_luminance_color3",
      "nodedef": "ND_luminance_color3",
      "target": "genglsl"
    },
    "implementation:IM_luminance_color3_genmdl": {
      "nodedef": "ND_luminance_color3",
      "sourcecode": "mx::stdlib::mx_luminance_color3({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_luminance_color3_genmsl": {
      "file": "../genglsl/mx_luminance_color3.glsl",
      "function": "mx_luminance_color3",
      "nodedef": "ND_luminance_color3",
      "target": "genmsl"
    },
    "implementation:IM_luminance_color3_genosl": {
      "file": "mx_luminance_color3.osl",
      "function": "mx_luminance_color3",
      "nodedef": "ND_luminance_color3",
      "target": "genosl"
    },
    "implementation:IM_luminance_color4_genglsl": {
      "file": "mx_luminance_color4.glsl",
      "function": "mx_luminance_color4",
      "nodedef": "ND_luminance_color4",
      "target": "genglsl"
    },
    "implementation:IM_luminance_color4_genmdl": {
      "nodedef": "ND_luminance_color4",
      "sourcecode": "mx::stdlib::mx_luminance_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_luminance_color4_genmsl": {
      "file": "../genglsl/mx_luminance_color4.glsl",
      "function": "mx_luminance_color4",
      "nodedef": "ND_luminance_color4",
      "target": "genmsl"
    },
    "implementation:IM_luminance_color4_genosl": {
      "file": "mx_luminance_color4.osl",
      "function": "mx_luminance_color4",
      "nodedef": "ND_luminance_color4",
      "target": "genosl"
    },
    "implementation:IM_magnitude_vector2_genglsl": {
      "nodedef": "ND_magnitude_vector2",
      "sourcecode": "length({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_magnitude_vector2_genmdl": {
      "nodedef": "ND_magnitude_vector2",
      "sourcecode": "math::length({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_magnitude_vector2_genmsl": {
      "nodedef": "ND_magnitude_vector2",
      "sourcecode": "length({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_magnitude_vector2_genosl": {
      "nodedef": "ND_magnitude_vector2",
      "sourcecode": "length({{in}})",
      "target": "genosl"
    },
    "implementation:IM_magnitude_vector3_genglsl": {
      "nodedef": "ND_magnitude_vector3",
      "sourcecode": "length({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_magnitude_vector3_genmdl": {
      "nodedef": "ND_magnitude_vector3",
      "sourcecode": "math::length({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_magnitude_vector3_genmsl": {
      "nodedef": "ND_magnitude_vector3",
      "sourcecode": "length({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_magnitude_vector3_genosl": {
      "nodedef": "ND_magnitude_vector3",
      "sourcecode": "length({{in}})",
      "target": "genosl"
    },
    "implementation:IM_magnitude_vector4_genglsl": {
      "nodedef": "ND_magnitude_vector4",
      "sourcecode": "length({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_magnitude_vector4_genmdl": {
      "nodedef": "ND_magnitude_vector4",
      "sourcecode": "math::length({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_magnitude_vector4_genmsl": {
      "nodedef": "ND_magnitude_vector4",
      "sourcecode": "length({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_magnitude_vector4_genosl": {
      "nodedef": "ND_magnitude_vector4",
      "sourcecode": "length({{in}})",
      "target": "genosl"
    },
    "implementation:IM_mask_color4_genglsl": {
      "nodedef": "ND_mask_color4",
      "sourcecode": "({{bg}}*{{fg}}.a  * {{mix}}) + ({{bg}} * (1.0-{{mix}}));",
      "target": "genglsl"
    },
    "implementation:IM_mask_color4_genmdl": {
      "nodedef": "ND_mask_color4",
      "sourcecode": "mx::stdlib::mx_mask_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mask_color4_genmsl": {
      "nodedef": "ND_mask_color4",
      "sourcecode": "({{bg}}*{{fg}}.a  * {{mix}}) + ({{bg}} * (1.0-{{mix}}));",
      "target": "genmsl"
    },
    "implementation:IM_mask_color4_genosl": {
      "nodedef": "ND_mask_color4",
      "sourcecode": "({{bg}}*{{fg}}.a  * {{mix}}) + ({{bg}} * (1.0-{{mix}}));",
      "target": "genosl"
    },
    "implementation:IM_matte_color4_genglsl": {
      "nodedef": "ND_matte_color4",
      "sourcecode": "vec4( {{fg}}.xyz*{{fg}}.w + {{bg}}.xyz*(1.0-{{fg}}.w), {{fg}}.w + ({{bg}}.w*(1.0-{{fg}}.w)) ) * {{mix}} + ({{bg}} * (1.0-{{mix}}));",
      "target": "genglsl"
    },
    "implementation:IM_matte_color4_genmdl": {
      "nodedef": "ND_matte_color4",
      "sourcecode": "mx::stdlib::mx_matte_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_matte_color4_genmsl": {
      "nodedef": "ND_matte_color4",
      "sourcecode": "vec4( {{fg}}.xyz*{{fg}}.w + {{bg}}.xyz*(1.0-{{fg}}.w), {{fg}}.w + ({{bg}}.w*(1.0-{{fg}}.w)) ) * {{mix}} + ({{bg}} * (1.0-{{mix}}));",
      "target": "genmsl"
    },
    "implementation:IM_matte_color4_genosl": {
      "nodedef": "ND_matte_color4",
      "sourcecode": "color4({{fg}}.rgb*{{fg}}.a + {{bg}}.rgb*(1.0-{{fg}}.a), {{fg}}.a + ({{bg}}.a*(1.0-{{fg}}.a)) ) * {{mix}} + ({{bg}} * (1.0-{{mix}}))",
      "target": "genosl"
    },
    "implementation:IM_max_color3FA_genglsl": {
      "nodedef": "ND_max_color3FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_color3FA_genmdl": {
      "nodedef": "ND_max_color3FA",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_color3FA_genmsl": {
      "nodedef": "ND_max_color3FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_color3FA_genosl": {
      "nodedef": "ND_max_color3FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_color3_genglsl": {
      "nodedef": "ND_max_color3",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_color3_genmdl": {
      "nodedef": "ND_max_color3",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_color3_genmsl": {
      "nodedef": "ND_max_color3",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_color3_genosl": {
      "nodedef": "ND_max_color3",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_color4FA_genglsl": {
      "nodedef": "ND_max_color4FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_color4FA_genmdl": {
      "nodedef": "ND_max_color4FA",
      "sourcecode": "mx::stdlib::mx_max_color4({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_color4FA_genmsl": {
      "nodedef": "ND_max_color4FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_color4FA_genosl": {
      "nodedef": "ND_max_color4FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_color4_genglsl": {
      "nodedef": "ND_max_color4",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_color4_genmdl": {
      "nodedef": "ND_max_color4",
      "sourcecode": "mx::stdlib::mx_max_color4({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_color4_genmsl": {
      "nodedef": "ND_max_color4",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_color4_genosl": {
      "nodedef": "ND_max_color4",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_float_genglsl": {
      "nodedef": "ND_max_float",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_float_genmdl": {
      "nodedef": "ND_max_float",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_float_genmsl": {
      "nodedef": "ND_max_float",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_float_genosl": {
      "nodedef": "ND_max_float",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_vector2FA_genglsl": {
      "nodedef": "ND_max_vector2FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_vector2FA_genmdl": {
      "nodedef": "ND_max_vector2FA",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_vector2FA_genmsl": {
      "nodedef": "ND_max_vector2FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_vector2FA_genosl": {
      "nodedef": "ND_max_vector2FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_vector2_genglsl": {
      "nodedef": "ND_max_vector2",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_vector2_genmdl": {
      "nodedef": "ND_max_vector2",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_vector2_genmsl": {
      "nodedef": "ND_max_vector2",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_vector2_genosl": {
      "nodedef": "ND_max_vector2",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_vector3FA_genglsl": {
      "nodedef": "ND_max_vector3FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_vector3FA_genmdl": {
      "nodedef": "ND_max_vector3FA",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_vector3FA_genmsl": {
      "nodedef": "ND_max_vector3FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_vector3FA_genosl": {
      "nodedef": "ND_max_vector3FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_vector3_genglsl": {
      "nodedef": "ND_max_vector3",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_vector3_genmdl": {
      "nodedef": "ND_max_vector3",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_vector3_genmsl": {
      "nodedef": "ND_max_vector3",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_vector3_genosl": {
      "nodedef": "ND_max_vector3",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_vector4FA_genglsl": {
      "nodedef": "ND_max_vector4FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_vector4FA_genmdl": {
      "nodedef": "ND_max_vector4FA",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_vector4FA_genmsl": {
      "nodedef": "ND_max_vector4FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_vector4FA_genosl": {
      "nodedef": "ND_max_vector4FA",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_max_vector4_genglsl": {
      "nodedef": "ND_max_vector4",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_max_vector4_genmdl": {
      "nodedef": "ND_max_vector4",
      "sourcecode": "math::max({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_max_vector4_genmsl": {
      "nodedef": "ND_max_vector4",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_max_vector4_genosl": {
      "nodedef": "ND_max_vector4",
      "sourcecode": "max({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_measured_edf_genmdl": {
      "nodedef": "ND_measured_edf",
      "sourcecode": "mx::pbrlib::mx_measured_edf(mxp_color:{{color}}, mxp_normal:{{normal}}, mxp_file:{{file}}",
      "target": "genmdl"
    },
    "implementation:IM_min_color3FA_genglsl": {
      "nodedef": "ND_min_color3FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_color3FA_genmdl": {
      "nodedef": "ND_min_color3FA",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_color3FA_genmsl": {
      "nodedef": "ND_min_color3FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_color3FA_genosl": {
      "nodedef": "ND_min_color3FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_color3_genglsl": {
      "nodedef": "ND_min_color3",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_color3_genmdl": {
      "nodedef": "ND_min_color3",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_color3_genmsl": {
      "nodedef": "ND_min_color3",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_color3_genosl": {
      "nodedef": "ND_min_color3",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_color4FA_genglsl": {
      "nodedef": "ND_min_color4FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_color4FA_genmdl": {
      "nodedef": "ND_min_color4FA",
      "sourcecode": "mx::stdlib::mx_min_color4({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_color4FA_genmsl": {
      "nodedef": "ND_min_color4FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_color4FA_genosl": {
      "nodedef": "ND_min_color4FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_color4_genglsl": {
      "nodedef": "ND_min_color4",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_color4_genmdl": {
      "nodedef": "ND_min_color4",
      "sourcecode": "mx::stdlib::mx_min_color4({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_color4_genmsl": {
      "nodedef": "ND_min_color4",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_color4_genosl": {
      "nodedef": "ND_min_color4",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_float_genglsl": {
      "nodedef": "ND_min_float",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_float_genmdl": {
      "nodedef": "ND_min_float",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_float_genmsl": {
      "nodedef": "ND_min_float",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_float_genosl": {
      "nodedef": "ND_min_float",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_vector2FA_genglsl": {
      "nodedef": "ND_min_vector2FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_vector2FA_genmdl": {
      "nodedef": "ND_min_vector2FA",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_vector2FA_genmsl": {
      "nodedef": "ND_min_vector2FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_vector2FA_genosl": {
      "nodedef": "ND_min_vector2FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_vector2_genglsl": {
      "nodedef": "ND_min_vector2",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_vector2_genmdl": {
      "nodedef": "ND_min_vector2",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_vector2_genmsl": {
      "nodedef": "ND_min_vector2",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_vector2_genosl": {
      "nodedef": "ND_min_vector2",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_vector3FA_genglsl": {
      "nodedef": "ND_min_vector3FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_vector3FA_genmdl": {
      "nodedef": "ND_min_vector3FA",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_vector3FA_genmsl": {
      "nodedef": "ND_min_vector3FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_vector3FA_genosl": {
      "nodedef": "ND_min_vector3FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_vector3_genglsl": {
      "nodedef": "ND_min_vector3",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_vector3_genmdl": {
      "nodedef": "ND_min_vector3",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_vector3_genmsl": {
      "nodedef": "ND_min_vector3",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_vector3_genosl": {
      "nodedef": "ND_min_vector3",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_vector4FA_genglsl": {
      "nodedef": "ND_min_vector4FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_vector4FA_genmdl": {
      "nodedef": "ND_min_vector4FA",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_vector4FA_genmsl": {
      "nodedef": "ND_min_vector4FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_vector4FA_genosl": {
      "nodedef": "ND_min_vector4FA",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_min_vector4_genglsl": {
      "nodedef": "ND_min_vector4",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_min_vector4_genmdl": {
      "nodedef": "ND_min_vector4",
      "sourcecode": "math::min({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_min_vector4_genmsl": {
      "nodedef": "ND_min_vector4",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_min_vector4_genosl": {
      "nodedef": "ND_min_vector4",
      "sourcecode": "min({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_minus_color3_genglsl": {
      "nodedef": "ND_minus_color3",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_minus_color3_genmdl": {
      "nodedef": "ND_minus_color3",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_minus_color3_genmsl": {
      "nodedef": "ND_minus_color3",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_minus_color3_genosl": {
      "nodedef": "ND_minus_color3",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_minus_color4_genglsl": {
      "nodedef": "ND_minus_color4",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_minus_color4_genmdl": {
      "nodedef": "ND_minus_color4",
      "sourcecode": "mx::stdlib::mx_minus_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_minus_color4_genmsl": {
      "nodedef": "ND_minus_color4",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_minus_color4_genosl": {
      "nodedef": "ND_minus_color4",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_minus_float_genglsl": {
      "nodedef": "ND_minus_float",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_minus_float_genmdl": {
      "nodedef": "ND_minus_float",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_minus_float_genmsl": {
      "nodedef": "ND_minus_float",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_minus_float_genosl": {
      "nodedef": "ND_minus_float",
      "sourcecode": "({{mix}}*({{bg}} - {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_mix_bsdf_genglsl": {
      "nodedef": "ND_mix_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_mix_bsdf_genmdl": {
      "nodedef": "ND_mix_bsdf",
      "sourcecode": "mx::pbrlib::mx_mix_bsdf(mxp_fg:{{fg}}, mxp_bg:{{bg}}, mxp_mix:{{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_bsdf_genmsl": {
      "nodedef": "ND_mix_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_mix_bsdf_genosl": {
      "nodedef": "ND_mix_bsdf",
      "target": "genosl"
    },
    "implementation:IM_mix_color3_color3_genglsl": {
      "nodedef": "ND_mix_color3_color3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_color3_color3_genmdl": {
      "nodedef": "ND_mix_color3_color3",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_color3_color3_genmsl": {
      "nodedef": "ND_mix_color3_color3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_color3_color3_genosl": {
      "nodedef": "ND_mix_color3_color3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_color3_genglsl": {
      "nodedef": "ND_mix_color3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_color3_genmdl": {
      "nodedef": "ND_mix_color3",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_color3_genmsl": {
      "nodedef": "ND_mix_color3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_color3_genosl": {
      "nodedef": "ND_mix_color3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_color4_color4_genglsl": {
      "nodedef": "ND_mix_color4_color4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_color4_color4_genmdl": {
      "nodedef": "ND_mix_color4_color4",
      "sourcecode": "mx::stdlib::mx_mix_color4_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_color4_color4_genmsl": {
      "nodedef": "ND_mix_color4_color4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_color4_color4_genosl": {
      "nodedef": "ND_mix_color4_color4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_color4_genglsl": {
      "nodedef": "ND_mix_color4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_color4_genmdl": {
      "nodedef": "ND_mix_color4",
      "sourcecode": "mx::stdlib::mx_mix_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_color4_genmsl": {
      "nodedef": "ND_mix_color4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_color4_genosl": {
      "nodedef": "ND_mix_color4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_displacementshader_genmdl": {
      "nodedef": "ND_mix_displacementshader",
      "sourcecode": "mx::stdlib::mx_mix_displacementshader({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_edf_genglsl": {
      "nodedef": "ND_mix_edf",
      "target": "genglsl"
    },
    "implementation:IM_mix_edf_genmdl": {
      "nodedef": "ND_mix_edf",
      "sourcecode": "mx::pbrlib::mx_mix_edf(mxp_fg:{{fg}}, mxp_bg:{{bg}}, mxp_mix:{{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_edf_genmsl": {
      "nodedef": "ND_mix_edf",
      "target": "genmsl"
    },
    "implementation:IM_mix_edf_genosl": {
      "nodedef": "ND_mix_edf",
      "target": "genosl"
    },
    "implementation:IM_mix_float_genglsl": {
      "nodedef": "ND_mix_float",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_float_genmdl": {
      "nodedef": "ND_mix_float",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_float_genmsl": {
      "nodedef": "ND_mix_float",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_float_genosl": {
      "nodedef": "ND_mix_float",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_surfaceshader_genglsl": {
      "file": "mx_mix_surfaceshader.glsl",
      "function": "mx_mix_surfaceshader",
      "nodedef": "ND_mix_surfaceshader",
      "target": "genglsl"
    },
    "implementation:IM_mix_surfaceshader_genmdl": {
      "nodedef": "ND_mix_surfaceshader",
      "sourcecode": "mx::stdlib::mx_mix_surfaceshader({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_surfaceshader_genmsl": {
      "file": "../genglsl/mx_mix_surfaceshader.glsl",
      "function": "mx_mix_surfaceshader",
      "nodedef": "ND_mix_surfaceshader",
      "target": "genmsl"
    },
    "implementation:IM_mix_surfaceshader_genosl": {
      "file": "mx_mix_surfaceshader.osl",
      "function": "mx_mix_surfaceshader",
      "nodedef": "ND_mix_surfaceshader",
      "target": "genosl"
    },
    "implementation:IM_mix_vdf_genmdl": {
      "nodedef": "ND_mix_vdf",
      "sourcecode": "mx::pbrlib::mx_mix_vdf(mxp_fg:{{fg}}, mxp_bg:{{bg}}, mxp_mix:{{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_vector2_genglsl": {
      "nodedef": "ND_mix_vector2",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_vector2_genmdl": {
      "nodedef": "ND_mix_vector2",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_vector2_genmsl": {
      "nodedef": "ND_mix_vector2",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_vector2_genosl": {
      "nodedef": "ND_mix_vector2",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_vector2_vector2_genglsl": {
      "nodedef": "ND_mix_vector2_vector2",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_vector2_vector2_genmdl": {
      "nodedef": "ND_mix_vector2_vector2",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_vector2_vector2_genmsl": {
      "nodedef": "ND_mix_vector2_vector2",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_vector2_vector2_genosl": {
      "nodedef": "ND_mix_vector2_vector2",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_vector3_genglsl": {
      "nodedef": "ND_mix_vector3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_vector3_genmdl": {
      "nodedef": "ND_mix_vector3",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_vector3_genmsl": {
      "nodedef": "ND_mix_vector3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_vector3_genosl": {
      "nodedef": "ND_mix_vector3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_vector3_vector3_genglsl": {
      "nodedef": "ND_mix_vector3_vector3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_vector3_vector3_genmdl": {
      "nodedef": "ND_mix_vector3_vector3",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_vector3_vector3_genmsl": {
      "nodedef": "ND_mix_vector3_vector3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_vector3_vector3_genosl": {
      "nodedef": "ND_mix_vector3_vector3",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_vector4_genglsl": {
      "nodedef": "ND_mix_vector4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_vector4_genmdl": {
      "nodedef": "ND_mix_vector4",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_vector4_genmsl": {
      "nodedef": "ND_mix_vector4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_vector4_genosl": {
      "nodedef": "ND_mix_vector4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_vector4_vector4_genglsl": {
      "nodedef": "ND_mix_vector4_vector4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_mix_vector4_vector4_genmdl": {
      "nodedef": "ND_mix_vector4_vector4",
      "sourcecode": "math::lerp({{bg}}, {{fg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_mix_vector4_vector4_genmsl": {
      "nodedef": "ND_mix_vector4_vector4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_mix_vector4_vector4_genosl": {
      "nodedef": "ND_mix_vector4_vector4",
      "sourcecode": "mix({{bg}}, {{fg}}, {{mix}})",
      "target": "genosl"
    },
    "implementation:IM_mix_volumeshader_genmdl": {
      "nodedef": "ND_mix_volumeshader",
      "sourcecode": "mx::stdlib::mx_mix_volumeshader({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_color3FA_genglsl": {
      "nodedef": "ND_modulo_color3FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_color3FA_genmdl": {
      "nodedef": "ND_modulo_color3FA",
      "sourcecode": "mx::stdlib::mx_modulo_color3FA({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_color3FA_genmsl": {
      "nodedef": "ND_modulo_color3FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_color3FA_genosl": {
      "nodedef": "ND_modulo_color3FA",
      "sourcecode": "mod({{in1}}, color({{in2}},{{in2}},{{in2}}))",
      "target": "genosl"
    },
    "implementation:IM_modulo_color3_genglsl": {
      "nodedef": "ND_modulo_color3",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_color3_genmdl": {
      "nodedef": "ND_modulo_color3",
      "sourcecode": "mx::stdlib::mx_modulo_color3({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_color3_genmsl": {
      "nodedef": "ND_modulo_color3",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_color3_genosl": {
      "nodedef": "ND_modulo_color3",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_color4FA_genglsl": {
      "nodedef": "ND_modulo_color4FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_color4FA_genmdl": {
      "nodedef": "ND_modulo_color4FA",
      "sourcecode": "mx::stdlib::mx_modulo_color4FA({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_color4FA_genmsl": {
      "nodedef": "ND_modulo_color4FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_color4FA_genosl": {
      "nodedef": "ND_modulo_color4FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_color4_genglsl": {
      "nodedef": "ND_modulo_color4",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_color4_genmdl": {
      "nodedef": "ND_modulo_color4",
      "sourcecode": "mx::stdlib::mx_modulo_color4({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_color4_genmsl": {
      "nodedef": "ND_modulo_color4",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_color4_genosl": {
      "nodedef": "ND_modulo_color4",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_float_genglsl": {
      "nodedef": "ND_modulo_float",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_float_genmdl": {
      "nodedef": "ND_modulo_float",
      "sourcecode": "mx_mod({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_float_genmsl": {
      "nodedef": "ND_modulo_float",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_float_genosl": {
      "nodedef": "ND_modulo_float",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_vector2FA_genglsl": {
      "nodedef": "ND_modulo_vector2FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_vector2FA_genmdl": {
      "nodedef": "ND_modulo_vector2FA",
      "sourcecode": "mx_mod({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_vector2FA_genmsl": {
      "nodedef": "ND_modulo_vector2FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_vector2FA_genosl": {
      "nodedef": "ND_modulo_vector2FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_vector2_genglsl": {
      "nodedef": "ND_modulo_vector2",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_vector2_genmdl": {
      "nodedef": "ND_modulo_vector2",
      "sourcecode": "mx_mod({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_vector2_genmsl": {
      "nodedef": "ND_modulo_vector2",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_vector2_genosl": {
      "nodedef": "ND_modulo_vector2",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_vector3FA_genglsl": {
      "nodedef": "ND_modulo_vector3FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_vector3FA_genmdl": {
      "nodedef": "ND_modulo_vector3FA",
      "sourcecode": "mx_mod({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_vector3FA_genmsl": {
      "nodedef": "ND_modulo_vector3FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_vector3FA_genosl": {
      "nodedef": "ND_modulo_vector3FA",
      "sourcecode": "mod({{in1}}, vector({{in2}},{{in2}},{{in2}}))",
      "target": "genosl"
    },
    "implementation:IM_modulo_vector3_genglsl": {
      "nodedef": "ND_modulo_vector3",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_vector3_genmdl": {
      "nodedef": "ND_modulo_vector3",
      "sourcecode": "mx_mod({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_vector3_genmsl": {
      "nodedef": "ND_modulo_vector3",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_vector3_genosl": {
      "nodedef": "ND_modulo_vector3",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_vector4FA_genglsl": {
      "nodedef": "ND_modulo_vector4FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_vector4FA_genmdl": {
      "nodedef": "ND_modulo_vector4FA",
      "sourcecode": "mx_mod({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_vector4FA_genmsl": {
      "nodedef": "ND_modulo_vector4FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_vector4FA_genosl": {
      "nodedef": "ND_modulo_vector4FA",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_modulo_vector4_genglsl": {
      "nodedef": "ND_modulo_vector4",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_modulo_vector4_genmdl": {
      "nodedef": "ND_modulo_vector4",
      "sourcecode": "mx_mod({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_modulo_vector4_genmsl": {
      "nodedef": "ND_modulo_vector4",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_modulo_vector4_genosl": {
      "nodedef": "ND_modulo_vector4",
      "sourcecode": "mod({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_multiply_bsdfC_genglsl": {
      "nodedef": "ND_multiply_bsdfC",
      "target": "genglsl"
    },
    "implementation:IM_multiply_bsdfC_genmdl": {
      "nodedef": "ND_multiply_bsdfC",
      "sourcecode": "mx::pbrlib::mx_multiply_bsdf_color3(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_bsdfC_genmsl": {
      "nodedef": "ND_multiply_bsdfC",
      "target": "genmsl"
    },
    "implementation:IM_multiply_bsdfC_genosl": {
      "nodedef": "ND_multiply_bsdfC",
      "target": "genosl"
    },
    "implementation:IM_multiply_bsdfF_genglsl": {
      "nodedef": "ND_multiply_bsdfF",
      "target": "genglsl"
    },
    "implementation:IM_multiply_bsdfF_genmdl": {
      "nodedef": "ND_multiply_bsdfF",
      "sourcecode": "mx::pbrlib::mx_multiply_bsdf_float(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_bsdfF_genmsl": {
      "nodedef": "ND_multiply_bsdfF",
      "target": "genmsl"
    },
    "implementation:IM_multiply_bsdfF_genosl": {
      "nodedef": "ND_multiply_bsdfF",
      "target": "genosl"
    },
    "implementation:IM_multiply_color3FA_genglsl": {
      "nodedef": "ND_multiply_color3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_color3FA_genmdl": {
      "nodedef": "ND_multiply_color3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_color3FA_genmsl": {
      "nodedef": "ND_multiply_color3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_color3FA_genosl": {
      "nodedef": "ND_multiply_color3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_color3_genglsl": {
      "nodedef": "ND_multiply_color3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_color3_genmdl": {
      "nodedef": "ND_multiply_color3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_color3_genmsl": {
      "nodedef": "ND_multiply_color3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_color3_genosl": {
      "nodedef": "ND_multiply_color3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_color4FA_genglsl": {
      "nodedef": "ND_multiply_color4FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_color4FA_genmdl": {
      "nodedef": "ND_multiply_color4FA",
      "sourcecode": "mx_multiply({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_color4FA_genmsl": {
      "nodedef": "ND_multiply_color4FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_color4FA_genosl": {
      "nodedef": "ND_multiply_color4FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_color4_genglsl": {
      "nodedef": "ND_multiply_color4",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_color4_genmdl": {
      "nodedef": "ND_multiply_color4",
      "sourcecode": "mx_multiply({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_color4_genmsl": {
      "nodedef": "ND_multiply_color4",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_color4_genosl": {
      "nodedef": "ND_multiply_color4",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_edfC_genglsl": {
      "nodedef": "ND_multiply_edfC",
      "target": "genglsl"
    },
    "implementation:IM_multiply_edfC_genmdl": {
      "nodedef": "ND_multiply_edfC",
      "sourcecode": "mx::pbrlib::mx_multiply_edf_color3(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_edfC_genmsl": {
      "nodedef": "ND_multiply_edfC",
      "target": "genmsl"
    },
    "implementation:IM_multiply_edfC_genosl": {
      "nodedef": "ND_multiply_edfC",
      "target": "genosl"
    },
    "implementation:IM_multiply_edfF_genglsl": {
      "nodedef": "ND_multiply_edfF",
      "target": "genglsl"
    },
    "implementation:IM_multiply_edfF_genmdl": {
      "nodedef": "ND_multiply_edfF",
      "sourcecode": "mx::pbrlib::mx_multiply_edf_float(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_edfF_genmsl": {
      "nodedef": "ND_multiply_edfF",
      "target": "genmsl"
    },
    "implementation:IM_multiply_edfF_genosl": {
      "nodedef": "ND_multiply_edfF",
      "target": "genosl"
    },
    "implementation:IM_multiply_float_genglsl": {
      "nodedef": "ND_multiply_float",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_float_genmdl": {
      "nodedef": "ND_multiply_float",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_float_genmsl": {
      "nodedef": "ND_multiply_float",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_float_genosl": {
      "nodedef": "ND_multiply_float",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_matrix33_genglsl": {
      "nodedef": "ND_multiply_matrix33",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_matrix33_genmdl": {
      "nodedef": "ND_multiply_matrix33",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_matrix33_genmsl": {
      "nodedef": "ND_multiply_matrix33",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_matrix33_genosl": {
      "nodedef": "ND_multiply_matrix33",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_matrix44_genglsl": {
      "nodedef": "ND_multiply_matrix44",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_matrix44_genmdl": {
      "nodedef": "ND_multiply_matrix44",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_matrix44_genmsl": {
      "nodedef": "ND_multiply_matrix44",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_matrix44_genosl": {
      "nodedef": "ND_multiply_matrix44",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_vdfC_genmdl": {
      "nodedef": "ND_multiply_vdfC",
      "sourcecode": "mx::pbrlib::mx_multiply_vdf_color3(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vdfF_genmdl": {
      "nodedef": "ND_multiply_vdfF",
      "sourcecode": "mx::pbrlib::mx_multiply_vdf_float(mxp_in1:{{in1}}, mxp_in2:{{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vector2FA_genglsl": {
      "nodedef": "ND_multiply_vector2FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_vector2FA_genmdl": {
      "nodedef": "ND_multiply_vector2FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vector2FA_genmsl": {
      "nodedef": "ND_multiply_vector2FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_vector2FA_genosl": {
      "nodedef": "ND_multiply_vector2FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_vector2_genglsl": {
      "nodedef": "ND_multiply_vector2",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_vector2_genmdl": {
      "nodedef": "ND_multiply_vector2",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vector2_genmsl": {
      "nodedef": "ND_multiply_vector2",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_vector2_genosl": {
      "nodedef": "ND_multiply_vector2",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_vector3FA_genglsl": {
      "nodedef": "ND_multiply_vector3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_vector3FA_genmdl": {
      "nodedef": "ND_multiply_vector3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vector3FA_genmsl": {
      "nodedef": "ND_multiply_vector3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_vector3FA_genosl": {
      "nodedef": "ND_multiply_vector3FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_vector3_genglsl": {
      "nodedef": "ND_multiply_vector3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_vector3_genmdl": {
      "nodedef": "ND_multiply_vector3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vector3_genmsl": {
      "nodedef": "ND_multiply_vector3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_vector3_genosl": {
      "nodedef": "ND_multiply_vector3",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_vector4FA_genglsl": {
      "nodedef": "ND_multiply_vector4FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_vector4FA_genmdl": {
      "nodedef": "ND_multiply_vector4FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vector4FA_genmsl": {
      "nodedef": "ND_multiply_vector4FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_vector4FA_genosl": {
      "nodedef": "ND_multiply_vector4FA",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_multiply_vector4_genglsl": {
      "nodedef": "ND_multiply_vector4",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_multiply_vector4_genmdl": {
      "nodedef": "ND_multiply_vector4",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_multiply_vector4_genmsl": {
      "nodedef": "ND_multiply_vector4",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_multiply_vector4_genosl": {
      "nodedef": "ND_multiply_vector4",
      "sourcecode": "{{in1}} * {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_noise2d_color3FA_genglsl": {
      "file": "mx_noise2d_fa_vector3.glsl",
      "function": "mx_noise2d_fa_vector3",
      "nodedef": "ND_noise2d_color3FA",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_color3FA_genmdl": {
      "nodedef": "ND_noise2d_color3FA",
      "sourcecode": "mx::stdlib::mx_noise2d_color3FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_color3FA_genmsl": {
      "file": "../genglsl/mx_noise2d_fa_vector3.glsl",
      "function": "mx_noise2d_fa_vector3",
      "nodedef": "ND_noise2d_color3FA",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_color3FA_genosl": {
      "file": "mx_noise2d_fa_color3.osl",
      "function": "mx_noise2d_fa_color3",
      "nodedef": "ND_noise2d_color3FA",
      "target": "genosl"
    },
    "implementation:IM_noise2d_color3_genglsl": {
      "file": "mx_noise2d_vector3.glsl",
      "function": "mx_noise2d_vector3",
      "nodedef": "ND_noise2d_color3",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_color3_genmdl": {
      "nodedef": "ND_noise2d_color3",
      "sourcecode": "mx::stdlib::mx_noise2d_color3(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_color3_genmsl": {
      "file": "../genglsl/mx_noise2d_vector3.glsl",
      "function": "mx_noise2d_vector3",
      "nodedef": "ND_noise2d_color3",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_color3_genosl": {
      "file": "mx_noise2d_color3.osl",
      "function": "mx_noise2d_color3",
      "nodedef": "ND_noise2d_color3",
      "target": "genosl"
    },
    "implementation:IM_noise2d_color4FA_genglsl": {
      "file": "mx_noise2d_fa_vector4.glsl",
      "function": "mx_noise2d_fa_vector4",
      "nodedef": "ND_noise2d_color4FA",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_color4FA_genmdl": {
      "nodedef": "ND_noise2d_color4FA",
      "sourcecode": "mx::stdlib::mx_noise2d_color4FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_color4FA_genmsl": {
      "file": "../genglsl/mx_noise2d_fa_vector4.glsl",
      "function": "mx_noise2d_fa_vector4",
      "nodedef": "ND_noise2d_color4FA",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_color4FA_genosl": {
      "file": "mx_noise2d_fa_color4.osl",
      "function": "mx_noise2d_fa_color4",
      "nodedef": "ND_noise2d_color4FA",
      "target": "genosl"
    },
    "implementation:IM_noise2d_color4_genglsl": {
      "file": "mx_noise2d_vector4.glsl",
      "function": "mx_noise2d_vector4",
      "nodedef": "ND_noise2d_color4",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_color4_genmdl": {
      "nodedef": "ND_noise2d_color4",
      "sourcecode": "mx::stdlib::mx_noise2d_color4(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_color4_genmsl": {
      "file": "../genglsl/mx_noise2d_vector4.glsl",
      "function": "mx_noise2d_vector4",
      "nodedef": "ND_noise2d_color4",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_color4_genosl": {
      "file": "mx_noise2d_color4.osl",
      "function": "mx_noise2d_color4",
      "nodedef": "ND_noise2d_color4",
      "target": "genosl"
    },
    "implementation:IM_noise2d_float_genglsl": {
      "file": "mx_noise2d_float.glsl",
      "function": "mx_noise2d_float",
      "nodedef": "ND_noise2d_float",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_float_genmdl": {
      "nodedef": "ND_noise2d_float",
      "sourcecode": "mx::stdlib::mx_noise2d_float(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_float_genmsl": {
      "file": "../genglsl/mx_noise2d_float.glsl",
      "function": "mx_noise2d_float",
      "nodedef": "ND_noise2d_float",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_float_genosl": {
      "file": "mx_noise2d_float.osl",
      "function": "mx_noise2d_float",
      "nodedef": "ND_noise2d_float",
      "target": "genosl"
    },
    "implementation:IM_noise2d_vector2FA_genglsl": {
      "file": "mx_noise2d_fa_vector2.glsl",
      "function": "mx_noise2d_fa_vector2",
      "nodedef": "ND_noise2d_vector2FA",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_vector2FA_genmdl": {
      "nodedef": "ND_noise2d_vector2FA",
      "sourcecode": "mx::stdlib::mx_noise2d_float2FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_vector2FA_genmsl": {
      "file": "../genglsl/mx_noise2d_fa_vector2.glsl",
      "function": "mx_noise2d_fa_vector2",
      "nodedef": "ND_noise2d_vector2FA",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_vector2FA_genosl": {
      "file": "mx_noise2d_fa_vector2.osl",
      "function": "mx_noise2d_fa_vector2",
      "nodedef": "ND_noise2d_vector2FA",
      "target": "genosl"
    },
    "implementation:IM_noise2d_vector2_genglsl": {
      "file": "mx_noise2d_vector2.glsl",
      "function": "mx_noise2d_vector2",
      "nodedef": "ND_noise2d_vector2",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_vector2_genmdl": {
      "nodedef": "ND_noise2d_vector2",
      "sourcecode": "mx::stdlib::mx_noise2d_float2(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_vector2_genmsl": {
      "file": "../genglsl/mx_noise2d_vector2.glsl",
      "function": "mx_noise2d_vector2",
      "nodedef": "ND_noise2d_vector2",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_vector2_genosl": {
      "file": "mx_noise2d_vector2.osl",
      "function": "mx_noise2d_vector2",
      "nodedef": "ND_noise2d_vector2",
      "target": "genosl"
    },
    "implementation:IM_noise2d_vector3FA_genglsl": {
      "file": "mx_noise2d_fa_vector3.glsl",
      "function": "mx_noise2d_fa_vector3",
      "nodedef": "ND_noise2d_vector3FA",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_vector3FA_genmdl": {
      "nodedef": "ND_noise2d_vector3FA",
      "sourcecode": "mx::stdlib::mx_noise2d_float3FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_vector3FA_genmsl": {
      "file": "../genglsl/mx_noise2d_fa_vector3.glsl",
      "function": "mx_noise2d_fa_vector3",
      "nodedef": "ND_noise2d_vector3FA",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_vector3FA_genosl": {
      "file": "mx_noise2d_fa_vector3.osl",
      "function": "mx_noise2d_fa_vector3",
      "nodedef": "ND_noise2d_vector3FA",
      "target": "genosl"
    },
    "implementation:IM_noise2d_vector3_genglsl": {
      "file": "mx_noise2d_vector3.glsl",
      "function": "mx_noise2d_vector3",
      "nodedef": "ND_noise2d_vector3",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_vector3_genmdl": {
      "nodedef": "ND_noise2d_vector3",
      "sourcecode": "mx::stdlib::mx_noise2d_float3(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_vector3_genmsl": {
      "file": "../genglsl/mx_noise2d_vector3.glsl",
      "function": "mx_noise2d_vector3",
      "nodedef": "ND_noise2d_vector3",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_vector3_genosl": {
      "file": "mx_noise2d_vector3.osl",
      "function": "mx_noise2d_vector3",
      "nodedef": "ND_noise2d_vector3",
      "target": "genosl"
    },
    "implementation:IM_noise2d_vector4FA_genglsl": {
      "file": "mx_noise2d_fa_vector4.glsl",
      "function": "mx_noise2d_fa_vector4",
      "nodedef": "ND_noise2d_vector4FA",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_vector4FA_genmdl": {
      "nodedef": "ND_noise2d_vector4FA",
      "sourcecode": "mx::stdlib::mx_noise2d_float4FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_vector4FA_genmsl": {
      "file": "../genglsl/mx_noise2d_fa_vector4.glsl",
      "function": "mx_noise2d_fa_vector4",
      "nodedef": "ND_noise2d_vector4FA",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_vector4FA_genosl": {
      "file": "mx_noise2d_fa_vector4.osl",
      "function": "mx_noise2d_fa_vector4",
      "nodedef": "ND_noise2d_vector4FA",
      "target": "genosl"
    },
    "implementation:IM_noise2d_vector4_genglsl": {
      "file": "mx_noise2d_vector4.glsl",
      "function": "mx_noise2d_vector4",
      "nodedef": "ND_noise2d_vector4",
      "target": "genglsl"
    },
    "implementation:IM_noise2d_vector4_genmdl": {
      "nodedef": "ND_noise2d_vector4",
      "sourcecode": "mx::stdlib::mx_noise2d_float4(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_noise2d_vector4_genmsl": {
      "file": "../genglsl/mx_noise2d_vector4.glsl",
      "function": "mx_noise2d_vector4",
      "nodedef": "ND_noise2d_vector4",
      "target": "genmsl"
    },
    "implementation:IM_noise2d_vector4_genosl": {
      "file": "mx_noise2d_vector4.osl",
      "function": "mx_noise2d_vector4",
      "nodedef": "ND_noise2d_vector4",
      "target": "genosl"
    },
    "implementation:IM_noise3d_color3FA_genglsl": {
      "file": "mx_noise3d_fa_vector3.glsl",
      "function": "mx_noise3d_fa_vector3",
      "nodedef": "ND_noise3d_color3FA",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_color3FA_genmdl": {
      "nodedef": "ND_noise3d_color3FA",
      "sourcecode": "mx::stdlib::mx_noise3d_color3FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_color3FA_genmsl": {
      "file": "../genglsl/mx_noise3d_fa_vector3.glsl",
      "function": "mx_noise3d_fa_vector3",
      "nodedef": "ND_noise3d_color3FA",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_color3FA_genosl": {
      "file": "mx_noise3d_fa_color3.osl",
      "function": "mx_noise3d_fa_color3",
      "nodedef": "ND_noise3d_color3FA",
      "target": "genosl"
    },
    "implementation:IM_noise3d_color3_genglsl": {
      "file": "mx_noise3d_vector3.glsl",
      "function": "mx_noise3d_vector3",
      "nodedef": "ND_noise3d_color3",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_color3_genmdl": {
      "nodedef": "ND_noise3d_color3",
      "sourcecode": "mx::stdlib::mx_noise3d_color3(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_color3_genmsl": {
      "file": "../genglsl/mx_noise3d_vector3.glsl",
      "function": "mx_noise3d_vector3",
      "nodedef": "ND_noise3d_color3",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_color3_genosl": {
      "file": "mx_noise3d_color3.osl",
      "function": "mx_noise3d_color3",
      "nodedef": "ND_noise3d_color3",
      "target": "genosl"
    },
    "implementation:IM_noise3d_color4FA_genglsl": {
      "file": "mx_noise3d_fa_vector4.glsl",
      "function": "mx_noise3d_fa_vector4",
      "nodedef": "ND_noise3d_color4FA",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_color4FA_genmdl": {
      "nodedef": "ND_noise3d_color4FA",
      "sourcecode": "mx::stdlib::mx_noise3d_color4FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_color4FA_genmsl": {
      "file": "../genglsl/mx_noise3d_fa_vector4.glsl",
      "function": "mx_noise3d_fa_vector4",
      "nodedef": "ND_noise3d_color4FA",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_color4FA_genosl": {
      "file": "mx_noise3d_fa_color4.osl",
      "function": "mx_noise3d_fa_color4",
      "nodedef": "ND_noise3d_color4FA",
      "target": "genosl"
    },
    "implementation:IM_noise3d_color4_genglsl": {
      "file": "mx_noise3d_vector4.glsl",
      "function": "mx_noise3d_vector4",
      "nodedef": "ND_noise3d_color4",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_color4_genmdl": {
      "nodedef": "ND_noise3d_color4",
      "sourcecode": "mx::stdlib::mx_noise3d_color4(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_color4_genmsl": {
      "file": "../genglsl/mx_noise3d_vector4.glsl",
      "function": "mx_noise3d_vector4",
      "nodedef": "ND_noise3d_color4",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_color4_genosl": {
      "file": "mx_noise3d_color4.osl",
      "function": "mx_noise3d_color4",
      "nodedef": "ND_noise3d_color4",
      "target": "genosl"
    },
    "implementation:IM_noise3d_float_genglsl": {
      "file": "mx_noise3d_float.glsl",
      "function": "mx_noise3d_float",
      "nodedef": "ND_noise3d_float",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_float_genmdl": {
      "nodedef": "ND_noise3d_float",
      "sourcecode": "mx::stdlib::mx_noise3d_float(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_float_genmsl": {
      "file": "../genglsl/mx_noise3d_float.glsl",
      "function": "mx_noise3d_float",
      "nodedef": "ND_noise3d_float",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_float_genosl": {
      "file": "mx_noise3d_float.osl",
      "function": "mx_noise3d_float",
      "nodedef": "ND_noise3d_float",
      "target": "genosl"
    },
    "implementation:IM_noise3d_vector2FA_genglsl": {
      "file": "mx_noise3d_fa_vector2.glsl",
      "function": "mx_noise3d_fa_vector2",
      "nodedef": "ND_noise3d_vector2FA",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_vector2FA_genmdl": {
      "nodedef": "ND_noise3d_vector2FA",
      "sourcecode": "mx::stdlib::mx_noise3d_float2FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_vector2FA_genmsl": {
      "file": "../genglsl/mx_noise3d_fa_vector2.glsl",
      "function": "mx_noise3d_fa_vector2",
      "nodedef": "ND_noise3d_vector2FA",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_vector2FA_genosl": {
      "file": "mx_noise3d_fa_vector2.osl",
      "function": "mx_noise3d_fa_vector2",
      "nodedef": "ND_noise3d_vector2FA",
      "target": "genosl"
    },
    "implementation:IM_noise3d_vector2_genglsl": {
      "file": "mx_noise3d_vector2.glsl",
      "function": "mx_noise3d_vector2",
      "nodedef": "ND_noise3d_vector2",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_vector2_genmdl": {
      "nodedef": "ND_noise3d_vector2",
      "sourcecode": "mx::stdlib::mx_noise3d_float2(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_vector2_genmsl": {
      "file": "../genglsl/mx_noise3d_vector2.glsl",
      "function": "mx_noise3d_vector2",
      "nodedef": "ND_noise3d_vector2",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_vector2_genosl": {
      "file": "mx_noise3d_vector2.osl",
      "function": "mx_noise3d_vector2",
      "nodedef": "ND_noise3d_vector2",
      "target": "genosl"
    },
    "implementation:IM_noise3d_vector3FA_genglsl": {
      "file": "mx_noise3d_fa_vector3.glsl",
      "function": "mx_noise3d_fa_vector3",
      "nodedef": "ND_noise3d_vector3FA",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_vector3FA_genmdl": {
      "nodedef": "ND_noise3d_vector3FA",
      "sourcecode": "mx::stdlib::mx_noise3d_float3FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_vector3FA_genmsl": {
      "file": "../genglsl/mx_noise3d_fa_vector3.glsl",
      "function": "mx_noise3d_fa_vector3",
      "nodedef": "ND_noise3d_vector3FA",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_vector3FA_genosl": {
      "file": "mx_noise3d_fa_vector3.osl",
      "function": "mx_noise3d_fa_vector3",
      "nodedef": "ND_noise3d_vector3FA",
      "target": "genosl"
    },
    "implementation:IM_noise3d_vector3_genglsl": {
      "file": "mx_noise3d_vector3.glsl",
      "function": "mx_noise3d_vector3",
      "nodedef": "ND_noise3d_vector3",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_vector3_genmdl": {
      "nodedef": "ND_noise3d_vector3",
      "sourcecode": "mx::stdlib::mx_noise3d_float3(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_vector3_genmsl": {
      "file": "../genglsl/mx_noise3d_vector3.glsl",
      "function": "mx_noise3d_vector3",
      "nodedef": "ND_noise3d_vector3",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_vector3_genosl": {
      "file": "mx_noise3d_vector3.osl",
      "function": "mx_noise3d_vector3",
      "nodedef": "ND_noise3d_vector3",
      "target": "genosl"
    },
    "implementation:IM_noise3d_vector4FA_genglsl": {
      "file": "mx_noise3d_fa_vector4.glsl",
      "function": "mx_noise3d_fa_vector4",
      "nodedef": "ND_noise3d_vector4FA",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_vector4FA_genmdl": {
      "nodedef": "ND_noise3d_vector4FA",
      "sourcecode": "mx::stdlib::mx_noise3d_float4FA(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_vector4FA_genmsl": {
      "file": "../genglsl/mx_noise3d_fa_vector4.glsl",
      "function": "mx_noise3d_fa_vector4",
      "nodedef": "ND_noise3d_vector4FA",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_vector4FA_genosl": {
      "file": "mx_noise3d_fa_vector4.osl",
      "function": "mx_noise3d_fa_vector4",
      "nodedef": "ND_noise3d_vector4FA",
      "target": "genosl"
    },
    "implementation:IM_noise3d_vector4_genglsl": {
      "file": "mx_noise3d_vector4.glsl",
      "function": "mx_noise3d_vector4",
      "nodedef": "ND_noise3d_vector4",
      "target": "genglsl"
    },
    "implementation:IM_noise3d_vector4_genmdl": {
      "nodedef": "ND_noise3d_vector4",
      "sourcecode": "mx::stdlib::mx_noise3d_float4(mxp_amplitude:{{amplitude}}, mxp_pivot:{{pivot}}, mxp_position:{{position}})",
      "target": "genmdl"
    },
    "implementation:IM_noise3d_vector4_genmsl": {
      "file": "../genglsl/mx_noise3d_vector4.glsl",
      "function": "mx_noise3d_vector4",
      "nodedef": "ND_noise3d_vector4",
      "target": "genmsl"
    },
    "implementation:IM_noise3d_vector4_genosl": {
      "file": "mx_noise3d_vector4.osl",
      "function": "mx_noise3d_vector4",
      "nodedef": "ND_noise3d_vector4",
      "target": "genosl"
    },
    "implementation:IM_normal_vector3_genglsl": {
      "nodedef": "ND_normal_vector3",
      "target": "genglsl"
    },
    "implementation:IM_normal_vector3_genmdl": {
      "nodedef": "ND_normal_vector3",
      "sourcecode": "mx::stdlib::mx_normal_vector3(mxp_space:{{space}})",
      "target": "genmdl"
    },
    "implementation:IM_normal_vector3_genmsl": {
      "nodedef": "ND_normal_vector3",
      "target": "genmsl"
    },
    "implementation:IM_normal_vector3_genosl": {
      "nodedef": "ND_normal_vector3",
      "sourcecode": "transform({{space}}, N)",
      "target": "genosl"
    },
    "implementation:IM_normalize_vector2_genglsl": {
      "nodedef": "ND_normalize_vector2",
      "sourcecode": "normalize({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_normalize_vector2_genmdl": {
      "nodedef": "ND_normalize_vector2",
      "sourcecode": "math::normalize({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_normalize_vector2_genmsl": {
      "nodedef": "ND_normalize_vector2",
      "sourcecode": "normalize({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_normalize_vector2_genosl": {
      "nodedef": "ND_normalize_vector2",
      "sourcecode": "normalize({{in}})",
      "target": "genosl"
    },
    "implementation:IM_normalize_vector3_genglsl": {
      "nodedef": "ND_normalize_vector3",
      "sourcecode": "normalize({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_normalize_vector3_genmdl": {
      "nodedef": "ND_normalize_vector3",
      "sourcecode": "math::normalize({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_normalize_vector3_genmsl": {
      "nodedef": "ND_normalize_vector3",
      "sourcecode": "normalize({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_normalize_vector3_genosl": {
      "nodedef": "ND_normalize_vector3",
      "sourcecode": "normalize({{in}})",
      "target": "genosl"
    },
    "implementation:IM_normalize_vector4_genglsl": {
      "nodedef": "ND_normalize_vector4",
      "sourcecode": "normalize({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_normalize_vector4_genmdl": {
      "nodedef": "ND_normalize_vector4",
      "sourcecode": "math::normalize({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_normalize_vector4_genmsl": {
      "nodedef": "ND_normalize_vector4",
      "sourcecode": "normalize({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_normalize_vector4_genosl": {
      "nodedef": "ND_normalize_vector4",
      "sourcecode": "normalize({{in}})",
      "target": "genosl"
    },
    "implementation:IM_normalmap_genglsl": {
      "file": "mx_normalmap.glsl",
      "function": "mx_normalmap",
      "nodedef": "ND_normalmap",
      "target": "genglsl"
    },
    "implementation:IM_normalmap_genmdl": {
      "nodedef": "ND_normalmap",
      "sourcecode": "mx::stdlib::mx_normalmap(mxp_in:{{in}}, mxp_space:{{space}}, mxp_scale:{{scale}}, mxp_normal:{{normal}}, mxp_tangent:{{tangent}})",
      "target": "genmdl"
    },
    "implementation:IM_normalmap_genmsl": {
      "file": "mx_normalmap.metal",
      "function": "mx_normalmap",
      "nodedef": "ND_normalmap",
      "target": "genmsl"
    },
    "implementation:IM_normalmap_genosl": {
      "file": "mx_normalmap.osl",
      "function": "mx_normalmap",
      "nodedef": "ND_normalmap",
      "target": "genosl"
    },
    "implementation:IM_oren_nayar_diffuse_bsdf_genglsl": {
      "file": "mx_oren_nayar_diffuse_bsdf.glsl",
      "function": "mx_oren_nayar_diffuse_bsdf",
      "nodedef": "ND_oren_nayar_diffuse_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_oren_nayar_diffuse_bsdf_genmdl": {
      "nodedef": "ND_oren_nayar_diffuse_bsdf",
      "sourcecode": "mx::pbrlib::mx_oren_nayar_diffuse_bsdf(mxp_weight:{{weight}}, mxp_color:{{color}}, mxp_roughness:{{roughness}}, mxp_normal:{{normal}})",
      "target": "genmdl"
    },
    "implementation:IM_oren_nayar_diffuse_bsdf_genmsl": {
      "file": "../genglsl/mx_oren_nayar_diffuse_bsdf.glsl",
      "function": "mx_oren_nayar_diffuse_bsdf",
      "nodedef": "ND_oren_nayar_diffuse_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_oren_nayar_diffuse_bsdf_genosl": {
      "file": "legacy/mx_oren_nayar_diffuse_bsdf.osl",
      "function": "mx_oren_nayar_diffuse_bsdf",
      "nodedef": "ND_oren_nayar_diffuse_bsdf",
      "target": "genosl"
    },
    "implementation:IM_out_color4_genglsl": {
      "nodedef": "ND_out_color4",
      "sourcecode": "({{fg}}*(1.0-{{bg}}.a)  * {{mix}}) + ({{bg}} * (1.0-{{mix}}));",
      "target": "genglsl"
    },
    "implementation:IM_out_color4_genmdl": {
      "nodedef": "ND_out_color4",
      "sourcecode": "mx::stdlib::mx_out_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_out_color4_genmsl": {
      "nodedef": "ND_out_color4",
      "sourcecode": "({{fg}}*(1.0-{{bg}}.a)  * {{mix}}) + ({{bg}} * (1.0-{{mix}}));",
      "target": "genmsl"
    },
    "implementation:IM_out_color4_genosl": {
      "nodedef": "ND_out_color4",
      "sourcecode": "({{fg}}*(1.0-{{bg}}.a)  * {{mix}}) + ({{bg}} * (1.0-{{mix}}))",
      "target": "genosl"
    },
    "implementation:IM_outside_color3_genglsl": {
      "nodedef": "ND_outside_color3",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genglsl"
    },
    "implementation:IM_outside_color3_genmdl": {
      "nodedef": "ND_outside_color3",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genmdl"
    },
    "implementation:IM_outside_color3_genmsl": {
      "nodedef": "ND_outside_color3",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genmsl"
    },
    "implementation:IM_outside_color3_genosl": {
      "nodedef": "ND_outside_color3",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genosl"
    },
    "implementation:IM_outside_color4_genglsl": {
      "nodedef": "ND_outside_color4",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genglsl"
    },
    "implementation:IM_outside_color4_genmdl": {
      "nodedef": "ND_outside_color4",
      "sourcecode": "mx_multiply({{in}}, 1.0 - {{mask}})",
      "target": "genmdl"
    },
    "implementation:IM_outside_color4_genmsl": {
      "nodedef": "ND_outside_color4",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genmsl"
    },
    "implementation:IM_outside_color4_genosl": {
      "nodedef": "ND_outside_color4",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genosl"
    },
    "implementation:IM_outside_float_genglsl": {
      "nodedef": "ND_outside_float",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genglsl"
    },
    "implementation:IM_outside_float_genmdl": {
      "nodedef": "ND_outside_float",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genmdl"
    },
    "implementation:IM_outside_float_genmsl": {
      "nodedef": "ND_outside_float",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genmsl"
    },
    "implementation:IM_outside_float_genosl": {
      "nodedef": "ND_outside_float",
      "sourcecode": "{{in}} * (1.0 - {{mask}})",
      "target": "genosl"
    },
    "implementation:IM_over_color4_genglsl": {
      "nodedef": "ND_over_color4",
      "sourcecode": "({{fg}} + ({{bg}}*(1.0-{{fg}}[3]))) * {{mix}} + {{bg}} * (1.0-{{mix}})",
      "target": "genglsl"
    },
    "implementation:IM_over_color4_genmdl": {
      "nodedef": "ND_over_color4",
      "sourcecode": "mx::stdlib::mx_over_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_over_color4_genmsl": {
      "nodedef": "ND_over_color4",
      "sourcecode": "({{fg}} + ({{bg}}*(1.0-{{fg}}[3]))) * {{mix}} + {{bg}} * (1.0-{{mix}})",
      "target": "genmsl"
    },
    "implementation:IM_over_color4_genosl": {
      "nodedef": "ND_over_color4",
      "sourcecode": "({{fg}} + ({{bg}}*(1.0-{{fg}}.a))) * {{mix}} + {{bg}} * (1.0-{{mix}})",
      "target": "genosl"
    },
    "implementation:IM_overlay_color3_genglsl": {
      "file": "mx_overlay_color3.glsl",
      "function": "mx_overlay_color3",
      "nodedef": "ND_overlay_color3",
      "target": "genglsl"
    },
    "implementation:IM_overlay_color3_genmdl": {
      "nodedef": "ND_overlay_color3",
      "sourcecode": "mx::stdlib::mx_overlay_color3({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_overlay_color3_genmsl": {
      "file": "../genglsl/mx_overlay_color3.glsl",
      "function": "mx_overlay_color3",
      "nodedef": "ND_overlay_color3",
      "target": "genmsl"
    },
    "implementation:IM_overlay_color3_genosl": {
      "file": "mx_overlay_color3.osl",
      "function": "mx_overlay_color3",
      "nodedef": "ND_overlay_color3",
      "target": "genosl"
    },
    "implementation:IM_overlay_color4_genglsl": {
      "file": "mx_overlay_color4.glsl",
      "function": "mx_overlay_color4",
      "nodedef": "ND_overlay_color4",
      "target": "genglsl"
    },
    "implementation:IM_overlay_color4_genmdl": {
      "nodedef": "ND_overlay_color4",
      "sourcecode": "mx::stdlib::mx_overlay_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_overlay_color4_genmsl": {
      "file": "../genglsl/mx_overlay_color4.glsl",
      "function": "mx_overlay_color4",
      "nodedef": "ND_overlay_color4",
      "target": "genmsl"
    },
    "implementation:IM_overlay_color4_genosl": {
      "file": "mx_overlay_color4.osl",
      "function": "mx_overlay_color4",
      "nodedef": "ND_overlay_color4",
      "target": "genosl"
    },
    "implementation:IM_overlay_float_genglsl": {
      "nodedef": "ND_overlay_float",
      "sourcecode": "({{fg}} < 0.5) ? ({{mix}}*2.0*{{fg}}*{{bg}}) + ((1.0-{{mix}})*{{bg}}) : ({{mix}}*(1.0-(1.0-{{fg}})*(1.0-{{bg}}))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_overlay_float_genmdl": {
      "nodedef": "ND_overlay_float",
      "sourcecode": "mx::stdlib::mx_overlay_float({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_overlay_float_genmsl": {
      "nodedef": "ND_overlay_float",
      "sourcecode": "({{fg}} < 0.5) ? ({{mix}}*2.0*{{fg}}*{{bg}}) + ((1.0-{{mix}})*{{bg}}) : ({{mix}}*(1.0-(1.0-{{fg}})*(1.0-{{bg}}))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_overlay_float_genosl": {
      "nodedef": "ND_overlay_float",
      "sourcecode": "({{fg}} < 0.5) ? ({{mix}}*2.0*{{fg}}*{{bg}}) + ((1.0-{{mix}})*{{bg}}) : ({{mix}}*(1.0-(1.0-{{fg}})*(1.0-{{bg}}))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_plus_color3_genglsl": {
      "nodedef": "ND_plus_color3",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_plus_color3_genmdl": {
      "nodedef": "ND_plus_color3",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_plus_color3_genmsl": {
      "nodedef": "ND_plus_color3",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_plus_color3_genosl": {
      "nodedef": "ND_plus_color3",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_plus_color4_genglsl": {
      "nodedef": "ND_plus_color4",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_plus_color4_genmdl": {
      "nodedef": "ND_plus_color4",
      "sourcecode": "mx::stdlib::mx_plus_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_plus_color4_genmsl": {
      "nodedef": "ND_plus_color4",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_plus_color4_genosl": {
      "nodedef": "ND_plus_color4",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_plus_float_genglsl": {
      "nodedef": "ND_plus_float",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_plus_float_genmdl": {
      "nodedef": "ND_plus_float",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_plus_float_genmsl": {
      "nodedef": "ND_plus_float",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_plus_float_genosl": {
      "nodedef": "ND_plus_float",
      "sourcecode": "({{mix}}*({{bg}} + {{fg}})) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_point_light_genglsl": {
      "file": "mx_point_light.glsl",
      "function": "mx_point_light",
      "nodedef": "ND_point_light",
      "target": "genglsl"
    },
    "implementation:IM_point_light_genmsl": {
      "file": "mx_point_light.metal",
      "function": "mx_point_light",
      "nodedef": "ND_point_light",
      "target": "genmsl"
    },
    "implementation:IM_position_vector3_genglsl": {
      "nodedef": "ND_position_vector3",
      "target": "genglsl"
    },
    "implementation:IM_position_vector3_genmdl": {
      "nodedef": "ND_position_vector3",
      "sourcecode": "mx::stdlib::mx_position_vector3(mxp_space:{{space}})",
      "target": "genmdl"
    },
    "implementation:IM_position_vector3_genmsl": {
      "nodedef": "ND_position_vector3",
      "target": "genmsl"
    },
    "implementation:IM_position_vector3_genosl": {
      "nodedef": "ND_position_vector3",
      "sourcecode": "transform({{space}}, P)",
      "target": "genosl"
    },
    "implementation:IM_power_color3FA_genglsl": {
      "nodedef": "ND_power_color3FA",
      "sourcecode": "pow({{in1}}, vec3({{in2}}))",
      "target": "genglsl"
    },
    "implementation:IM_power_color3FA_genmdl": {
      "nodedef": "ND_power_color3FA",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_color3FA_genmsl": {
      "nodedef": "ND_power_color3FA",
      "sourcecode": "pow({{in1}}, vec3({{in2}}))",
      "target": "genmsl"
    },
    "implementation:IM_power_color3FA_genosl": {
      "nodedef": "ND_power_color3FA",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_color3_genglsl": {
      "nodedef": "ND_power_color3",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_power_color3_genmdl": {
      "nodedef": "ND_power_color3",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_color3_genmsl": {
      "nodedef": "ND_power_color3",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_power_color3_genosl": {
      "nodedef": "ND_power_color3",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_color4FA_genglsl": {
      "nodedef": "ND_power_color4FA",
      "sourcecode": "pow({{in1}}, vec4({{in2}}))",
      "target": "genglsl"
    },
    "implementation:IM_power_color4FA_genmdl": {
      "nodedef": "ND_power_color4FA",
      "sourcecode": "mx::stdlib::mx_power_color4FA({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_color4FA_genmsl": {
      "nodedef": "ND_power_color4FA",
      "sourcecode": "pow({{in1}}, vec4({{in2}}))",
      "target": "genmsl"
    },
    "implementation:IM_power_color4FA_genosl": {
      "nodedef": "ND_power_color4FA",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_color4_genglsl": {
      "nodedef": "ND_power_color4",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_power_color4_genmdl": {
      "nodedef": "ND_power_color4",
      "sourcecode": "mx::stdlib::mx_power_color4({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_color4_genmsl": {
      "nodedef": "ND_power_color4",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_power_color4_genosl": {
      "nodedef": "ND_power_color4",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_float_genglsl": {
      "nodedef": "ND_power_float",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_power_float_genmdl": {
      "nodedef": "ND_power_float",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_float_genmsl": {
      "nodedef": "ND_power_float",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_power_float_genosl": {
      "nodedef": "ND_power_float",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_vector2FA_genglsl": {
      "nodedef": "ND_power_vector2FA",
      "sourcecode": "pow({{in1}}, vec2({{in2}}))",
      "target": "genglsl"
    },
    "implementation:IM_power_vector2FA_genmdl": {
      "nodedef": "ND_power_vector2FA",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_vector2FA_genmsl": {
      "nodedef": "ND_power_vector2FA",
      "sourcecode": "pow({{in1}}, vec2({{in2}}))",
      "target": "genmsl"
    },
    "implementation:IM_power_vector2FA_genosl": {
      "nodedef": "ND_power_vector2FA",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_vector2_genglsl": {
      "nodedef": "ND_power_vector2",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_power_vector2_genmdl": {
      "nodedef": "ND_power_vector2",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_vector2_genmsl": {
      "nodedef": "ND_power_vector2",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_power_vector2_genosl": {
      "nodedef": "ND_power_vector2",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_vector3FA_genglsl": {
      "nodedef": "ND_power_vector3FA",
      "sourcecode": "pow({{in1}}, vec3({{in2}}))",
      "target": "genglsl"
    },
    "implementation:IM_power_vector3FA_genmdl": {
      "nodedef": "ND_power_vector3FA",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_vector3FA_genmsl": {
      "nodedef": "ND_power_vector3FA",
      "sourcecode": "pow({{in1}}, vec3({{in2}}))",
      "target": "genmsl"
    },
    "implementation:IM_power_vector3FA_genosl": {
      "nodedef": "ND_power_vector3FA",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_vector3_genglsl": {
      "nodedef": "ND_power_vector3",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_power_vector3_genmdl": {
      "nodedef": "ND_power_vector3",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_vector3_genmsl": {
      "nodedef": "ND_power_vector3",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_power_vector3_genosl": {
      "nodedef": "ND_power_vector3",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_vector4FA_genglsl": {
      "nodedef": "ND_power_vector4FA",
      "sourcecode": "pow({{in1}}, vec4({{in2}}))",
      "target": "genglsl"
    },
    "implementation:IM_power_vector4FA_genmdl": {
      "nodedef": "ND_power_vector4FA",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_vector4FA_genmsl": {
      "nodedef": "ND_power_vector4FA",
      "sourcecode": "pow({{in1}}, vec4({{in2}}))",
      "target": "genmsl"
    },
    "implementation:IM_power_vector4FA_genosl": {
      "nodedef": "ND_power_vector4FA",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_power_vector4_genglsl": {
      "nodedef": "ND_power_vector4",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genglsl"
    },
    "implementation:IM_power_vector4_genmdl": {
      "nodedef": "ND_power_vector4",
      "sourcecode": "math::pow({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_power_vector4_genmsl": {
      "nodedef": "ND_power_vector4",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genmsl"
    },
    "implementation:IM_power_vector4_genosl": {
      "nodedef": "ND_power_vector4",
      "sourcecode": "pow({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_premult_color4_genglsl": {
      "file": "mx_premult_color4.glsl",
      "function": "mx_premult_color4",
      "nodedef": "ND_premult_color4",
      "target": "genglsl"
    },
    "implementation:IM_premult_color4_genmdl": {
      "nodedef": "ND_premult_color4",
      "sourcecode": "mx::stdlib::mx_premult_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_premult_color4_genmsl": {
      "file": "../genglsl/mx_premult_color4.glsl",
      "function": "mx_premult_color4",
      "nodedef": "ND_premult_color4",
      "target": "genmsl"
    },
    "implementation:IM_premult_color4_genosl": {
      "file": "mx_premult_color4.osl",
      "function": "mx_premult_color4",
      "nodedef": "ND_premult_color4",
      "target": "genosl"
    },
    "implementation:IM_ramplr_color3_genglsl": {
      "file": "mx_ramplr_vector3.glsl",
      "function": "mx_ramplr_vector3",
      "nodedef": "ND_ramplr_color3",
      "target": "genglsl"
    },
    "implementation:IM_ramplr_color3_genmdl": {
      "nodedef": "ND_ramplr_color3",
      "sourcecode": "mx::stdlib::mx_ramplr_color3(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramplr_color3_genmsl": {
      "file": "../genglsl/mx_ramplr_vector3.glsl",
      "function": "mx_ramplr_vector3",
      "nodedef": "ND_ramplr_color3",
      "target": "genmsl"
    },
    "implementation:IM_ramplr_color3_genosl": {
      "nodedef": "ND_ramplr_color3",
      "sourcecode": "mix({{valuel}}, {{valuer}}, clamp({{texcoord}}.x, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramplr_color4_genglsl": {
      "file": "mx_ramplr_vector4.glsl",
      "function": "mx_ramplr_vector4",
      "nodedef": "ND_ramplr_color4",
      "target": "genglsl"
    },
    "implementation:IM_ramplr_color4_genmdl": {
      "nodedef": "ND_ramplr_color4",
      "sourcecode": "mx::stdlib::mx_ramplr_color4(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramplr_color4_genmsl": {
      "file": "../genglsl/mx_ramplr_vector4.glsl",
      "function": "mx_ramplr_vector4",
      "nodedef": "ND_ramplr_color4",
      "target": "genmsl"
    },
    "implementation:IM_ramplr_color4_genosl": {
      "nodedef": "ND_ramplr_color4",
      "sourcecode": "mix({{valuel}}, {{valuer}}, clamp({{texcoord}}.x, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramplr_float_genglsl": {
      "file": "mx_ramplr_float.glsl",
      "function": "mx_ramplr_float",
      "nodedef": "ND_ramplr_float",
      "target": "genglsl"
    },
    "implementation:IM_ramplr_float_genmdl": {
      "nodedef": "ND_ramplr_float",
      "sourcecode": "mx::stdlib::mx_ramplr_float(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramplr_float_genmsl": {
      "file": "../genglsl/mx_ramplr_float.glsl",
      "function": "mx_ramplr_float",
      "nodedef": "ND_ramplr_float",
      "target": "genmsl"
    },
    "implementation:IM_ramplr_float_genosl": {
      "nodedef": "ND_ramplr_float",
      "sourcecode": "mix({{valuel}}, {{valuer}}, clamp({{texcoord}}.x, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramplr_vector2_genglsl": {
      "file": "mx_ramplr_vector2.glsl",
      "function": "mx_ramplr_vector2",
      "nodedef": "ND_ramplr_vector2",
      "target": "genglsl"
    },
    "implementation:IM_ramplr_vector2_genmdl": {
      "nodedef": "ND_ramplr_vector2",
      "sourcecode": "mx::stdlib::mx_ramplr_vector2(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramplr_vector2_genmsl": {
      "file": "../genglsl/mx_ramplr_vector2.glsl",
      "function": "mx_ramplr_vector2",
      "nodedef": "ND_ramplr_vector2",
      "target": "genmsl"
    },
    "implementation:IM_ramplr_vector2_genosl": {
      "nodedef": "ND_ramplr_vector2",
      "sourcecode": "mix({{valuel}}, {{valuer}}, clamp({{texcoord}}.x, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramplr_vector3_genglsl": {
      "file": "mx_ramplr_vector3.glsl",
      "function": "mx_ramplr_vector3",
      "nodedef": "ND_ramplr_vector3",
      "target": "genglsl"
    },
    "implementation:IM_ramplr_vector3_genmdl": {
      "nodedef": "ND_ramplr_vector3",
      "sourcecode": "mx::stdlib::mx_ramplr_vector3(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramplr_vector3_genmsl": {
      "file": "../genglsl/mx_ramplr_vector3.glsl",
      "function": "mx_ramplr_vector3",
      "nodedef": "ND_ramplr_vector3",
      "target": "genmsl"
    },
    "implementation:IM_ramplr_vector3_genosl": {
      "nodedef": "ND_ramplr_vector3",
      "sourcecode": "mix({{valuel}}, {{valuer}}, clamp({{texcoord}}.x, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramplr_vector4_genglsl": {
      "file": "mx_ramplr_vector4.glsl",
      "function": "mx_ramplr_vector4",
      "nodedef": "ND_ramplr_vector4",
      "target": "genglsl"
    },
    "implementation:IM_ramplr_vector4_genmdl": {
      "nodedef": "ND_ramplr_vector4",
      "sourcecode": "mx::stdlib::mx_ramplr_vector4(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramplr_vector4_genmsl": {
      "file": "../genglsl/mx_ramplr_vector4.glsl",
      "function": "mx_ramplr_vector4",
      "nodedef": "ND_ramplr_vector4",
      "target": "genmsl"
    },
    "implementation:IM_ramplr_vector4_genosl": {
      "nodedef": "ND_ramplr_vector4",
      "sourcecode": "mix({{valuel}}, {{valuer}}, clamp({{texcoord}}.x, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramptb_color3_genglsl": {
      "file": "mx_ramptb_vector3.glsl",
      "function": "mx_ramptb_vector3",
      "nodedef": "ND_ramptb_color3",
      "target": "genglsl"
    },
    "implementation:IM_ramptb_color3_genmdl": {
      "nodedef": "ND_ramptb_color3",
      "sourcecode": "mx::stdlib::mx_ramptb_color3(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramptb_color3_genmsl": {
      "file": "../genglsl/mx_ramptb_vector3.glsl",
      "function": "mx_ramptb_vector3",
      "nodedef": "ND_ramptb_color3",
      "target": "genmsl"
    },
    "implementation:IM_ramptb_color3_genosl": {
      "nodedef": "ND_ramptb_color3",
      "sourcecode": "mix({{valuet}}, {{valueb}}, clamp({{texcoord}}.y, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramptb_color4_genglsl": {
      "file": "mx_ramptb_vector4.glsl",
      "function": "mx_ramptb_vector4",
      "nodedef": "ND_ramptb_color4",
      "target": "genglsl"
    },
    "implementation:IM_ramptb_color4_genmdl": {
      "nodedef": "ND_ramptb_color4",
      "sourcecode": "mx::stdlib::mx_ramptb_color4(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramptb_color4_genmsl": {
      "file": "../genglsl/mx_ramptb_vector4.glsl",
      "function": "mx_ramptb_vector4",
      "nodedef": "ND_ramptb_color4",
      "target": "genmsl"
    },
    "implementation:IM_ramptb_color4_genosl": {
      "nodedef": "ND_ramptb_color4",
      "sourcecode": "mix({{valuet}}, {{valueb}}, clamp({{texcoord}}.y, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramptb_float_genglsl": {
      "file": "mx_ramptb_float.glsl",
      "function": "mx_ramptb_float",
      "nodedef": "ND_ramptb_float",
      "target": "genglsl"
    },
    "implementation:IM_ramptb_float_genmdl": {
      "nodedef": "ND_ramptb_float",
      "sourcecode": "mx::stdlib::mx_ramptb_float(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramptb_float_genmsl": {
      "file": "../genglsl/mx_ramptb_float.glsl",
      "function": "mx_ramptb_float",
      "nodedef": "ND_ramptb_float",
      "target": "genmsl"
    },
    "implementation:IM_ramptb_float_genosl": {
      "nodedef": "ND_ramptb_float",
      "sourcecode": "mix({{valuet}}, {{valueb}}, clamp({{texcoord}}.y, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramptb_vector2_genglsl": {
      "file": "mx_ramptb_vector2.glsl",
      "function": "mx_ramptb_vector2",
      "nodedef": "ND_ramptb_vector2",
      "target": "genglsl"
    },
    "implementation:IM_ramptb_vector2_genmdl": {
      "nodedef": "ND_ramptb_vector2",
      "sourcecode": "mx::stdlib::mx_ramptb_vector2(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramptb_vector2_genmsl": {
      "file": "../genglsl/mx_ramptb_vector2.glsl",
      "function": "mx_ramptb_vector2",
      "nodedef": "ND_ramptb_vector2",
      "target": "genmsl"
    },
    "implementation:IM_ramptb_vector2_genosl": {
      "nodedef": "ND_ramptb_vector2",
      "sourcecode": "mix({{valuet}}, {{valueb}}, clamp({{texcoord}}.y, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramptb_vector3_genglsl": {
      "file": "mx_ramptb_vector3.glsl",
      "function": "mx_ramptb_vector3",
      "nodedef": "ND_ramptb_vector3",
      "target": "genglsl"
    },
    "implementation:IM_ramptb_vector3_genmdl": {
      "nodedef": "ND_ramptb_vector3",
      "sourcecode": "mx::stdlib::mx_ramptb_vector3(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramptb_vector3_genmsl": {
      "file": "../genglsl/mx_ramptb_vector3.glsl",
      "function": "mx_ramptb_vector3",
      "nodedef": "ND_ramptb_vector3",
      "target": "genmsl"
    },
    "implementation:IM_ramptb_vector3_genosl": {
      "nodedef": "ND_ramptb_vector3",
      "sourcecode": "mix({{valuet}}, {{valueb}}, clamp({{texcoord}}.y, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_ramptb_vector4_genglsl": {
      "file": "mx_ramptb_vector4.glsl",
      "function": "mx_ramptb_vector4",
      "nodedef": "ND_ramptb_vector4",
      "target": "genglsl"
    },
    "implementation:IM_ramptb_vector4_genmdl": {
      "nodedef": "ND_ramptb_vector4",
      "sourcecode": "mx::stdlib::mx_ramptb_vector4(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_ramptb_vector4_genmsl": {
      "file": "../genglsl/mx_ramptb_vector4.glsl",
      "function": "mx_ramptb_vector4",
      "nodedef": "ND_ramptb_vector4",
      "target": "genmsl"
    },
    "implementation:IM_ramptb_vector4_genosl": {
      "nodedef": "ND_ramptb_vector4",
      "sourcecode": "mix({{valuet}}, {{valueb}}, clamp({{texcoord}}.y, 0, 1))",
      "target": "genosl"
    },
    "implementation:IM_remap_color3FA_genglsl": {
      "nodedef": "ND_remap_color3FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_color3FA_genmdl": {
      "nodedef": "ND_remap_color3FA",
      "sourcecode": "mx::stdlib::mx_remap_color3FA({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_color3FA_genmsl": {
      "nodedef": "ND_remap_color3FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_color3FA_genosl": {
      "nodedef": "ND_remap_color3FA",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_color3_genglsl": {
      "nodedef": "ND_remap_color3",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_color3_genmdl": {
      "nodedef": "ND_remap_color3",
      "sourcecode": "mx::stdlib::mx_remap_color3({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_color3_genmsl": {
      "nodedef": "ND_remap_color3",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_color3_genosl": {
      "nodedef": "ND_remap_color3",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_color4FA_genglsl": {
      "nodedef": "ND_remap_color4FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_color4FA_genmdl": {
      "nodedef": "ND_remap_color4FA",
      "sourcecode": "mx::stdlib::mx_remap_color4FA({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_color4FA_genmsl": {
      "nodedef": "ND_remap_color4FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_color4FA_genosl": {
      "nodedef": "ND_remap_color4FA",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_color4_genglsl": {
      "nodedef": "ND_remap_color4",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_color4_genmdl": {
      "nodedef": "ND_remap_color4",
      "sourcecode": "mx::stdlib::mx_remap_color4({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_color4_genmsl": {
      "nodedef": "ND_remap_color4",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_color4_genosl": {
      "nodedef": "ND_remap_color4",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_float_genglsl": {
      "nodedef": "ND_remap_float",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_float_genmdl": {
      "nodedef": "ND_remap_float",
      "sourcecode": "mx::stdlib::mx_remap_float({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_float_genmsl": {
      "nodedef": "ND_remap_float",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_float_genosl": {
      "nodedef": "ND_remap_float",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_vector2FA_genglsl": {
      "nodedef": "ND_remap_vector2FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_vector2FA_genmdl": {
      "nodedef": "ND_remap_vector2FA",
      "sourcecode": "mx::stdlib::mx_remap_vector2FA({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_vector2FA_genmsl": {
      "nodedef": "ND_remap_vector2FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_vector2FA_genosl": {
      "nodedef": "ND_remap_vector2FA",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_vector2_genglsl": {
      "nodedef": "ND_remap_vector2",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_vector2_genmdl": {
      "nodedef": "ND_remap_vector2",
      "sourcecode": "mx::stdlib::mx_remap_vector2({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_vector2_genmsl": {
      "nodedef": "ND_remap_vector2",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_vector2_genosl": {
      "nodedef": "ND_remap_vector2",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_vector3FA_genglsl": {
      "nodedef": "ND_remap_vector3FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_vector3FA_genmdl": {
      "nodedef": "ND_remap_vector3FA",
      "sourcecode": "mx::stdlib::mx_remap_vector3FA({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_vector3FA_genmsl": {
      "nodedef": "ND_remap_vector3FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_vector3FA_genosl": {
      "nodedef": "ND_remap_vector3FA",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_vector3_genglsl": {
      "nodedef": "ND_remap_vector3",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_vector3_genmdl": {
      "nodedef": "ND_remap_vector3",
      "sourcecode": "mx::stdlib::mx_remap_vector3({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_vector3_genmsl": {
      "nodedef": "ND_remap_vector3",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_vector3_genosl": {
      "nodedef": "ND_remap_vector3",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_vector4FA_genglsl": {
      "nodedef": "ND_remap_vector4FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_vector4FA_genmdl": {
      "nodedef": "ND_remap_vector4FA",
      "sourcecode": "mx::stdlib::mx_remap_vector4FA({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_vector4FA_genmsl": {
      "nodedef": "ND_remap_vector4FA",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_vector4FA_genosl": {
      "nodedef": "ND_remap_vector4FA",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_remap_vector4_genglsl": {
      "nodedef": "ND_remap_vector4",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genglsl"
    },
    "implementation:IM_remap_vector4_genmdl": {
      "nodedef": "ND_remap_vector4",
      "sourcecode": "mx::stdlib::mx_remap_vector4({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}})",
      "target": "genmdl"
    },
    "implementation:IM_remap_vector4_genmsl": {
      "nodedef": "ND_remap_vector4",
      "sourcecode": "{{outlow}} + ({{in}} - {{inlow}}) * ({{outhigh}} - {{outlow}}) / ({{inhigh}} - {{inlow}})",
      "target": "genmsl"
    },
    "implementation:IM_remap_vector4_genosl": {
      "nodedef": "ND_remap_vector4",
      "sourcecode": "mx_remap({{in}}, {{inlow}}, {{inhigh}}, {{outlow}}, {{outhigh}}, 0)",
      "target": "genosl"
    },
    "implementation:IM_rgbtohsv_color3_genglsl": {
      "file": "mx_rgbtohsv_color3.glsl",
      "function": "mx_rgbtohsv_color3",
      "nodedef": "ND_rgbtohsv_color3",
      "target": "genglsl"
    },
    "implementation:IM_rgbtohsv_color3_genmdl": {
      "nodedef": "ND_rgbtohsv_color3",
      "sourcecode": "mx::stdlib::mx_rgbtohsv_color3({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_rgbtohsv_color3_genmsl": {
      "file": "../genglsl/mx_rgbtohsv_color3.glsl",
      "function": "mx_rgbtohsv_color3",
      "nodedef": "ND_rgbtohsv_color3",
      "target": "genmsl"
    },
    "implementation:IM_rgbtohsv_color3_genosl": {
      "file": "mx_rgbtohsv_color3.osl",
      "function": "mx_rgbtohsv_color3",
      "nodedef": "ND_rgbtohsv_color3",
      "target": "genosl"
    },
    "implementation:IM_rgbtohsv_color4_genglsl": {
      "file": "mx_rgbtohsv_color4.glsl",
      "function": "mx_rgbtohsv_color4",
      "nodedef": "ND_rgbtohsv_color4",
      "target": "genglsl"
    },
    "implementation:IM_rgbtohsv_color4_genmdl": {
      "nodedef": "ND_rgbtohsv_color4",
      "sourcecode": "mx::stdlib::mx_rgbtohsv_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_rgbtohsv_color4_genmsl": {
      "file": "../genglsl/mx_rgbtohsv_color4.glsl",
      "function": "mx_rgbtohsv_color4",
      "nodedef": "ND_rgbtohsv_color4",
      "target": "genmsl"
    },
    "implementation:IM_rgbtohsv_color4_genosl": {
      "file": "mx_rgbtohsv_color4.osl",
      "function": "mx_rgbtohsv_color4",
      "nodedef": "ND_rgbtohsv_color4",
      "target": "genosl"
    },
    "implementation:IM_rotate2d_vector2_genglsl": {
      "file": "mx_rotate_vector2.glsl",
      "function": "mx_rotate_vector2",
      "nodedef": "ND_rotate2d_vector2",
      "target": "genglsl"
    },
    "implementation:IM_rotate2d_vector2_genmdl": {
      "nodedef": "ND_rotate2d_vector2",
      "sourcecode": "mx::stdlib::mx_rotate2d_vector2(mxp_in:{{in}}, mxp_amount:{{amount}})",
      "target": "genmdl"
    },
    "implementation:IM_rotate2d_vector2_genmsl": {
      "file": "../genglsl/mx_rotate_vector2.glsl",
      "function": "mx_rotate_vector2",
      "nodedef": "ND_rotate2d_vector2",
      "target": "genmsl"
    },
    "implementation:IM_rotate2d_vector2_genosl": {
      "file": "mx_rotate_vector2.osl",
      "function": "mx_rotate_vector2",
      "nodedef": "ND_rotate2d_vector2",
      "target": "genosl"
    },
    "implementation:IM_rotate3d_vector3_genglsl": {
      "file": "mx_rotate_vector3.glsl",
      "function": "mx_rotate_vector3",
      "nodedef": "ND_rotate3d_vector3",
      "target": "genglsl"
    },
    "implementation:IM_rotate3d_vector3_genmdl": {
      "nodedef": "ND_rotate3d_vector3",
      "sourcecode": "mx::stdlib::mx_rotate3d_vector3(mxp_in:{{in}}, mxp_amount:{{amount}}, mxp_axis:{{axis}})",
      "target": "genmdl"
    },
    "implementation:IM_rotate3d_vector3_genmsl": {
      "file": "../genglsl/mx_rotate_vector3.glsl",
      "function": "mx_rotate_vector3",
      "nodedef": "ND_rotate3d_vector3",
      "target": "genmsl"
    },
    "implementation:IM_rotate3d_vector3_genosl": {
      "file": "mx_rotate_vector3.osl",
      "function": "mx_rotate_vector3",
      "nodedef": "ND_rotate3d_vector3",
      "target": "genosl"
    },
    "implementation:IM_roughness_anisotropy_genglsl": {
      "file": "mx_roughness_anisotropy.glsl",
      "function": "mx_roughness_anisotropy",
      "nodedef": "ND_roughness_anisotropy",
      "target": "genglsl"
    },
    "implementation:IM_roughness_anisotropy_genmdl": {
      "nodedef": "ND_roughness_anisotropy",
      "sourcecode": "mx::pbrlib::mx_roughness_anisotropy(mxp_roughness:{{roughness}}, mxp_anisotropy:{{anisotropy}})",
      "target": "genmdl"
    },
    "implementation:IM_roughness_anisotropy_genmsl": {
      "file": "../genglsl/mx_roughness_anisotropy.glsl",
      "function": "mx_roughness_anisotropy",
      "nodedef": "ND_roughness_anisotropy",
      "target": "genmsl"
    },
    "implementation:IM_roughness_anisotropy_genosl": {
      "file": "mx_roughness_anisotropy.osl",
      "function": "mx_roughness_anisotropy",
      "nodedef": "ND_roughness_anisotropy",
      "target": "genosl"
    },
    "implementation:IM_roughness_dual_genglsl": {
      "file": "mx_roughness_dual.glsl",
      "function": "mx_roughness_dual",
      "nodedef": "ND_roughness_dual",
      "target": "genglsl"
    },
    "implementation:IM_roughness_dual_genmdl": {
      "nodedef": "ND_roughness_dual",
      "sourcecode": "mx::pbrlib::mx_roughness_dual(mxp_roughness:{{roughness}})",
      "target": "genmdl"
    },
    "implementation:IM_roughness_dual_genmsl": {
      "file": "../genglsl/mx_roughness_dual.glsl",
      "function": "mx_roughness_dual",
      "nodedef": "ND_roughness_dual",
      "target": "genmsl"
    },
    "implementation:IM_roughness_dual_genosl": {
      "file": "mx_roughness_dual.osl",
      "function": "mx_roughness_dual",
      "nodedef": "ND_roughness_dual",
      "target": "genosl"
    },
    "implementation:IM_screen_color3_genglsl": {
      "nodedef": "ND_screen_color3",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1.0 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_screen_color3_genmdl": {
      "nodedef": "ND_screen_color3",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_screen_color3_genmsl": {
      "nodedef": "ND_screen_color3",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1.0 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_screen_color3_genosl": {
      "nodedef": "ND_screen_color3",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_screen_color4_genglsl": {
      "nodedef": "ND_screen_color4",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1.0 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_screen_color4_genmdl": {
      "nodedef": "ND_screen_color4",
      "sourcecode": "mx::stdlib::mx_screen_color4({{fg}}, {{bg}}, {{mix}})",
      "target": "genmdl"
    },
    "implementation:IM_screen_color4_genmsl": {
      "nodedef": "ND_screen_color4",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1.0 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_screen_color4_genosl": {
      "nodedef": "ND_screen_color4",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_screen_float_genglsl": {
      "nodedef": "ND_screen_float",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1.0 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genglsl"
    },
    "implementation:IM_screen_float_genmdl": {
      "nodedef": "ND_screen_float",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmdl"
    },
    "implementation:IM_screen_float_genmsl": {
      "nodedef": "ND_screen_float",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1.0 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genmsl"
    },
    "implementation:IM_screen_float_genosl": {
      "nodedef": "ND_screen_float",
      "sourcecode": "({{mix}}*((1.0 - (1.0 - {{fg}}) * (1 - {{bg}})))) + ((1.0-{{mix}})*{{bg}})",
      "target": "genosl"
    },
    "implementation:IM_sheen_bsdf_genglsl": {
      "file": "mx_sheen_bsdf.glsl",
      "function": "mx_sheen_bsdf",
      "nodedef": "ND_sheen_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_sheen_bsdf_genmdl": {
      "nodedef": "ND_sheen_bsdf",
      "sourcecode": "mx::pbrlib::mx_sheen_bsdf(mxp_weight:{{weight}}, mxp_color:{{color}}, mxp_roughness:{{roughness}}, mxp_normal:{{normal}}, mxp_base:{{base}})",
      "target": "genmdl"
    },
    "implementation:IM_sheen_bsdf_genmsl": {
      "file": "../genglsl/mx_sheen_bsdf.glsl",
      "function": "mx_sheen_bsdf",
      "nodedef": "ND_sheen_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_sheen_bsdf_genosl": {
      "file": "legacy/mx_sheen_bsdf.osl",
      "function": "mx_sheen_bsdf",
      "nodedef": "ND_sheen_bsdf",
      "target": "genosl"
    },
    "implementation:IM_sign_color3_genglsl": {
      "nodedef": "ND_sign_color3",
      "sourcecode": "sign({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sign_color3_genmdl": {
      "nodedef": "ND_sign_color3",
      "sourcecode": "mx::stdlib::mx_sign_color3({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sign_color3_genmsl": {
      "nodedef": "ND_sign_color3",
      "sourcecode": "sign({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sign_color3_genosl": {
      "nodedef": "ND_sign_color3",
      "sourcecode": "sign({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sign_color4_genglsl": {
      "nodedef": "ND_sign_color4",
      "sourcecode": "sign({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sign_color4_genmdl": {
      "nodedef": "ND_sign_color4",
      "sourcecode": "mx::stdlib::mx_sign_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sign_color4_genmsl": {
      "nodedef": "ND_sign_color4",
      "sourcecode": "sign({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sign_color4_genosl": {
      "nodedef": "ND_sign_color4",
      "sourcecode": "sign({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sign_float_genglsl": {
      "nodedef": "ND_sign_float",
      "sourcecode": "sign({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sign_float_genmdl": {
      "nodedef": "ND_sign_float",
      "sourcecode": "math::sign({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sign_float_genmsl": {
      "nodedef": "ND_sign_float",
      "sourcecode": "sign({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sign_float_genosl": {
      "nodedef": "ND_sign_float",
      "sourcecode": "sign({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sign_vector2_genglsl": {
      "nodedef": "ND_sign_vector2",
      "sourcecode": "sign({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sign_vector2_genmdl": {
      "nodedef": "ND_sign_vector2",
      "sourcecode": "math::sign({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sign_vector2_genmsl": {
      "nodedef": "ND_sign_vector2",
      "sourcecode": "sign({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sign_vector2_genosl": {
      "nodedef": "ND_sign_vector2",
      "sourcecode": "sign({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sign_vector3_genglsl": {
      "nodedef": "ND_sign_vector3",
      "sourcecode": "sign({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sign_vector3_genmdl": {
      "nodedef": "ND_sign_vector3",
      "sourcecode": "math::sign({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sign_vector3_genmsl": {
      "nodedef": "ND_sign_vector3",
      "sourcecode": "sign({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sign_vector3_genosl": {
      "nodedef": "ND_sign_vector3",
      "sourcecode": "sign({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sign_vector4_genglsl": {
      "nodedef": "ND_sign_vector4",
      "sourcecode": "sign({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sign_vector4_genmdl": {
      "nodedef": "ND_sign_vector4",
      "sourcecode": "math::sign({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sign_vector4_genmsl": {
      "nodedef": "ND_sign_vector4",
      "sourcecode": "sign({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sign_vector4_genosl": {
      "nodedef": "ND_sign_vector4",
      "sourcecode": "sign({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sin_float_genglsl": {
      "nodedef": "ND_sin_float",
      "sourcecode": "sin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sin_float_genmdl": {
      "nodedef": "ND_sin_float",
      "sourcecode": "math::sin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sin_float_genmsl": {
      "nodedef": "ND_sin_float",
      "sourcecode": "sin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sin_float_genosl": {
      "nodedef": "ND_sin_float",
      "sourcecode": "sin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sin_vector2_genglsl": {
      "nodedef": "ND_sin_vector2",
      "sourcecode": "sin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sin_vector2_genmdl": {
      "nodedef": "ND_sin_vector2",
      "sourcecode": "math::sin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sin_vector2_genmsl": {
      "nodedef": "ND_sin_vector2",
      "sourcecode": "sin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sin_vector2_genosl": {
      "nodedef": "ND_sin_vector2",
      "sourcecode": "sin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sin_vector3_genglsl": {
      "nodedef": "ND_sin_vector3",
      "sourcecode": "sin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sin_vector3_genmdl": {
      "nodedef": "ND_sin_vector3",
      "sourcecode": "math::sin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sin_vector3_genmsl": {
      "nodedef": "ND_sin_vector3",
      "sourcecode": "sin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sin_vector3_genosl": {
      "nodedef": "ND_sin_vector3",
      "sourcecode": "sin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sin_vector4_genglsl": {
      "nodedef": "ND_sin_vector4",
      "sourcecode": "sin({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sin_vector4_genmdl": {
      "nodedef": "ND_sin_vector4",
      "sourcecode": "math::sin({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sin_vector4_genmsl": {
      "nodedef": "ND_sin_vector4",
      "sourcecode": "sin({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sin_vector4_genosl": {
      "nodedef": "ND_sin_vector4",
      "sourcecode": "sin({{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_color3FA_genglsl": {
      "file": "mx_smoothstep_vec3FA.glsl",
      "function": "mx_smoothstep_vec3FA",
      "nodedef": "ND_smoothstep_color3FA",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_color3FA_genmdl": {
      "nodedef": "ND_smoothstep_color3FA",
      "sourcecode": "mx::stdlib::mx_smoothstep_color3FA({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_color3FA_genmsl": {
      "file": "mx_smoothstep_vec3FA.metal",
      "function": "mx_smoothstep_vec3FA",
      "nodedef": "ND_smoothstep_color3FA",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_color3FA_genosl": {
      "nodedef": "ND_smoothstep_color3FA",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_color3_genglsl": {
      "file": "mx_smoothstep_vec3.glsl",
      "function": "mx_smoothstep_vec3",
      "nodedef": "ND_smoothstep_color3",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_color3_genmdl": {
      "nodedef": "ND_smoothstep_color3",
      "sourcecode": "mx::stdlib::mx_smoothstep_color3({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_color3_genmsl": {
      "file": "mx_smoothstep_vec3.metal",
      "function": "mx_smoothstep_vec3",
      "nodedef": "ND_smoothstep_color3",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_color3_genosl": {
      "nodedef": "ND_smoothstep_color3",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_color4FA_genglsl": {
      "file": "mx_smoothstep_vec4FA.glsl",
      "function": "mx_smoothstep_vec4FA",
      "nodedef": "ND_smoothstep_color4FA",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_color4FA_genmdl": {
      "nodedef": "ND_smoothstep_color4FA",
      "sourcecode": "mx::stdlib::mx_smoothstep_color4FA({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_color4FA_genmsl": {
      "file": "mx_smoothstep_vec4FA.metal",
      "function": "mx_smoothstep_vec4FA",
      "nodedef": "ND_smoothstep_color4FA",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_color4FA_genosl": {
      "nodedef": "ND_smoothstep_color4FA",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_color4_genglsl": {
      "file": "mx_smoothstep_vec4.glsl",
      "function": "mx_smoothstep_vec4",
      "nodedef": "ND_smoothstep_color4",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_color4_genmdl": {
      "nodedef": "ND_smoothstep_color4",
      "sourcecode": "mx::stdlib::mx_smoothstep_color4({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_color4_genmsl": {
      "file": "mx_smoothstep_vec4.metal",
      "function": "mx_smoothstep_vec4",
      "nodedef": "ND_smoothstep_color4",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_color4_genosl": {
      "nodedef": "ND_smoothstep_color4",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_float_genglsl": {
      "file": "mx_smoothstep_float.glsl",
      "function": "mx_smoothstep_float",
      "nodedef": "ND_smoothstep_float",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_float_genmdl": {
      "nodedef": "ND_smoothstep_float",
      "sourcecode": "mx::stdlib::mx_smoothstep_float({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_float_genmsl": {
      "file": "mx_smoothstep_float.metal",
      "function": "mx_smoothstep_float",
      "nodedef": "ND_smoothstep_float",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_float_genosl": {
      "nodedef": "ND_smoothstep_float",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_vector2FA_genglsl": {
      "file": "mx_smoothstep_vec2FA.glsl",
      "function": "mx_smoothstep_vec2FA",
      "nodedef": "ND_smoothstep_vector2FA",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_vector2FA_genmdl": {
      "nodedef": "ND_smoothstep_vector2FA",
      "sourcecode": "mx::stdlib::mx_smoothstep_vector2FA({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_vector2FA_genmsl": {
      "file": "mx_smoothstep_vec2FA.metal",
      "function": "mx_smoothstep_vec2FA",
      "nodedef": "ND_smoothstep_vector2FA",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_vector2FA_genosl": {
      "nodedef": "ND_smoothstep_vector2FA",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_vector2_genglsl": {
      "file": "mx_smoothstep_vec2.glsl",
      "function": "mx_smoothstep_vec2",
      "nodedef": "ND_smoothstep_vector2",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_vector2_genmdl": {
      "nodedef": "ND_smoothstep_vector2",
      "sourcecode": "mx::stdlib::mx_smoothstep_vector2({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_vector2_genmsl": {
      "file": "mx_smoothstep_vec2.metal",
      "function": "mx_smoothstep_vec2",
      "nodedef": "ND_smoothstep_vector2",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_vector2_genosl": {
      "nodedef": "ND_smoothstep_vector2",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_vector3FA_genglsl": {
      "file": "mx_smoothstep_vec3FA.glsl",
      "function": "mx_smoothstep_vec3FA",
      "nodedef": "ND_smoothstep_vector3FA",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_vector3FA_genmdl": {
      "nodedef": "ND_smoothstep_vector3FA",
      "sourcecode": "mx::stdlib::mx_smoothstep_vector3FA({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_vector3FA_genmsl": {
      "file": "mx_smoothstep_vec3FA.metal",
      "function": "mx_smoothstep_vec3FA",
      "nodedef": "ND_smoothstep_vector3FA",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_vector3FA_genosl": {
      "nodedef": "ND_smoothstep_vector3FA",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_vector3_genglsl": {
      "file": "mx_smoothstep_vec3.glsl",
      "function": "mx_smoothstep_vec3",
      "nodedef": "ND_smoothstep_vector3",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_vector3_genmdl": {
      "nodedef": "ND_smoothstep_vector3",
      "sourcecode": "mx::stdlib::mx_smoothstep_vector3({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_vector3_genmsl": {
      "file": "mx_smoothstep_vec3.metal",
      "function": "mx_smoothstep_vec3",
      "nodedef": "ND_smoothstep_vector3",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_vector3_genosl": {
      "nodedef": "ND_smoothstep_vector3",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_vector4FA_genglsl": {
      "file": "mx_smoothstep_vec4FA.glsl",
      "function": "mx_smoothstep_vec4FA",
      "nodedef": "ND_smoothstep_vector4FA",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_vector4FA_genmdl": {
      "nodedef": "ND_smoothstep_vector4FA",
      "sourcecode": "mx::stdlib::mx_smoothstep_vector4FA({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_vector4FA_genmsl": {
      "file": "mx_smoothstep_vec4FA.metal",
      "function": "mx_smoothstep_vec4FA",
      "nodedef": "ND_smoothstep_vector4FA",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_vector4FA_genosl": {
      "nodedef": "ND_smoothstep_vector4FA",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_smoothstep_vector4_genglsl": {
      "file": "mx_smoothstep_vec4.glsl",
      "function": "mx_smoothstep_vec4",
      "nodedef": "ND_smoothstep_vector4",
      "target": "genglsl"
    },
    "implementation:IM_smoothstep_vector4_genmdl": {
      "nodedef": "ND_smoothstep_vector4",
      "sourcecode": "mx::stdlib::mx_smoothstep_vector4({{in}}, {{low}}, {{high}})",
      "target": "genmdl"
    },
    "implementation:IM_smoothstep_vector4_genmsl": {
      "file": "mx_smoothstep_vec4.metal",
      "function": "mx_smoothstep_vec4",
      "nodedef": "ND_smoothstep_vector4",
      "target": "genmsl"
    },
    "implementation:IM_smoothstep_vector4_genosl": {
      "nodedef": "ND_smoothstep_vector4",
      "sourcecode": "smoothstep({{low}}, {{high}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_splitlr_color3_genglsl": {
      "file": "mx_splitlr_vector3.glsl",
      "function": "mx_splitlr_vector3",
      "nodedef": "ND_splitlr_color3",
      "target": "genglsl"
    },
    "implementation:IM_splitlr_color3_genmdl": {
      "nodedef": "ND_splitlr_color3",
      "sourcecode": "mx::stdlib::mx_splitlr_color3(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splitlr_color3_genmsl": {
      "file": "../genglsl/mx_splitlr_vector3.glsl",
      "function": "mx_splitlr_vector3",
      "nodedef": "ND_splitlr_color3",
      "target": "genmsl"
    },
    "implementation:IM_splitlr_color3_genosl": {
      "nodedef": "ND_splitlr_color3",
      "sourcecode": "mix({{valuel}}, {{valuer}}, aastep({{center}}, {{texcoord}}.x))",
      "target": "genosl"
    },
    "implementation:IM_splitlr_color4_genglsl": {
      "file": "mx_splitlr_vector4.glsl",
      "function": "mx_splitlr_vector4",
      "nodedef": "ND_splitlr_color4",
      "target": "genglsl"
    },
    "implementation:IM_splitlr_color4_genmdl": {
      "nodedef": "ND_splitlr_color4",
      "sourcecode": "mx::stdlib::mx_splitlr_color4(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splitlr_color4_genmsl": {
      "file": "../genglsl/mx_splitlr_vector4.glsl",
      "function": "mx_splitlr_vector4",
      "nodedef": "ND_splitlr_color4",
      "target": "genmsl"
    },
    "implementation:IM_splitlr_color4_genosl": {
      "nodedef": "ND_splitlr_color4",
      "sourcecode": "mix({{valuel}}, {{valuer}}, aastep({{center}}, {{texcoord}}.x))",
      "target": "genosl"
    },
    "implementation:IM_splitlr_float_genglsl": {
      "file": "mx_splitlr_float.glsl",
      "function": "mx_splitlr_float",
      "nodedef": "ND_splitlr_float",
      "target": "genglsl"
    },
    "implementation:IM_splitlr_float_genmdl": {
      "nodedef": "ND_splitlr_float",
      "sourcecode": "mx::stdlib::mx_splitlr_float(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splitlr_float_genmsl": {
      "file": "../genglsl/mx_splitlr_float.glsl",
      "function": "mx_splitlr_float",
      "nodedef": "ND_splitlr_float",
      "target": "genmsl"
    },
    "implementation:IM_splitlr_float_genosl": {
      "nodedef": "ND_splitlr_float",
      "sourcecode": "mix({{valuel}}, {{valuer}}, aastep({{center}}, {{texcoord}}.x))",
      "target": "genosl"
    },
    "implementation:IM_splitlr_vector2_genglsl": {
      "file": "mx_splitlr_vector2.glsl",
      "function": "mx_splitlr_vector2",
      "nodedef": "ND_splitlr_vector2",
      "target": "genglsl"
    },
    "implementation:IM_splitlr_vector2_genmdl": {
      "nodedef": "ND_splitlr_vector2",
      "sourcecode": "mx::stdlib::mx_splitlr_vector2(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splitlr_vector2_genmsl": {
      "file": "../genglsl/mx_splitlr_vector2.glsl",
      "function": "mx_splitlr_vector2",
      "nodedef": "ND_splitlr_vector2",
      "target": "genmsl"
    },
    "implementation:IM_splitlr_vector2_genosl": {
      "nodedef": "ND_splitlr_vector2",
      "sourcecode": "mix({{valuel}}, {{valuer}}, aastep({{center}}, {{texcoord}}.x))",
      "target": "genosl"
    },
    "implementation:IM_splitlr_vector3_genglsl": {
      "file": "mx_splitlr_vector3.glsl",
      "function": "mx_splitlr_vector3",
      "nodedef": "ND_splitlr_vector3",
      "target": "genglsl"
    },
    "implementation:IM_splitlr_vector3_genmdl": {
      "nodedef": "ND_splitlr_vector3",
      "sourcecode": "mx::stdlib::mx_splitlr_vector3(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splitlr_vector3_genmsl": {
      "file": "../genglsl/mx_splitlr_vector3.glsl",
      "function": "mx_splitlr_vector3",
      "nodedef": "ND_splitlr_vector3",
      "target": "genmsl"
    },
    "implementation:IM_splitlr_vector3_genosl": {
      "nodedef": "ND_splitlr_vector3",
      "sourcecode": "mix({{valuel}}, {{valuer}}, aastep({{center}}, {{texcoord}}.x))",
      "target": "genosl"
    },
    "implementation:IM_splitlr_vector4_genglsl": {
      "file": "mx_splitlr_vector4.glsl",
      "function": "mx_splitlr_vector4",
      "nodedef": "ND_splitlr_vector4",
      "target": "genglsl"
    },
    "implementation:IM_splitlr_vector4_genmdl": {
      "nodedef": "ND_splitlr_vector4",
      "sourcecode": "mx::stdlib::mx_splitlr_vector4(mxp_valuel:{{valuel}}, mxp_valuer:{{valuer}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splitlr_vector4_genmsl": {
      "file": "../genglsl/mx_splitlr_vector4.glsl",
      "function": "mx_splitlr_vector4",
      "nodedef": "ND_splitlr_vector4",
      "target": "genmsl"
    },
    "implementation:IM_splitlr_vector4_genosl": {
      "nodedef": "ND_splitlr_vector4",
      "sourcecode": "mix({{valuel}}, {{valuer}}, aastep({{center}}, {{texcoord}}.x))",
      "target": "genosl"
    },
    "implementation:IM_splittb_color3_genglsl": {
      "file": "mx_splittb_vector3.glsl",
      "function": "mx_splittb_vector3",
      "nodedef": "ND_splittb_color3",
      "target": "genglsl"
    },
    "implementation:IM_splittb_color3_genmdl": {
      "nodedef": "ND_splittb_color3",
      "sourcecode": "mx::stdlib::mx_splittb_color3(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splittb_color3_genmsl": {
      "file": "../genglsl/mx_splittb_vector3.glsl",
      "function": "mx_splittb_vector3",
      "nodedef": "ND_splittb_color3",
      "target": "genmsl"
    },
    "implementation:IM_splittb_color3_genosl": {
      "nodedef": "ND_splittb_color3",
      "sourcecode": "mix({{valuet}}, {{valueb}}, aastep({{center}}, {{texcoord}}.y))",
      "target": "genosl"
    },
    "implementation:IM_splittb_color4_genglsl": {
      "file": "mx_splittb_vector4.glsl",
      "function": "mx_splittb_vector4",
      "nodedef": "ND_splittb_color4",
      "target": "genglsl"
    },
    "implementation:IM_splittb_color4_genmdl": {
      "nodedef": "ND_splittb_color4",
      "sourcecode": "mx::stdlib::mx_splittb_color4(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splittb_color4_genmsl": {
      "file": "../genglsl/mx_splittb_vector4.glsl",
      "function": "mx_splittb_vector4",
      "nodedef": "ND_splittb_color4",
      "target": "genmsl"
    },
    "implementation:IM_splittb_color4_genosl": {
      "nodedef": "ND_splittb_color4",
      "sourcecode": "mix({{valuet}}, {{valueb}}, aastep({{center}}, {{texcoord}}.y))",
      "target": "genosl"
    },
    "implementation:IM_splittb_float_genglsl": {
      "file": "mx_splittb_float.glsl",
      "function": "mx_splittb_float",
      "nodedef": "ND_splittb_float",
      "target": "genglsl"
    },
    "implementation:IM_splittb_float_genmdl": {
      "nodedef": "ND_splittb_float",
      "sourcecode": "mx::stdlib::mx_splittb_float(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splittb_float_genmsl": {
      "file": "../genglsl/mx_splittb_float.glsl",
      "function": "mx_splittb_float",
      "nodedef": "ND_splittb_float",
      "target": "genmsl"
    },
    "implementation:IM_splittb_float_genosl": {
      "nodedef": "ND_splittb_float",
      "sourcecode": "mix({{valuet}}, {{valueb}}, aastep({{center}}, {{texcoord}}.y))",
      "target": "genosl"
    },
    "implementation:IM_splittb_vector2_genglsl": {
      "file": "mx_splittb_vector2.glsl",
      "function": "mx_splittb_vector2",
      "nodedef": "ND_splittb_vector2",
      "target": "genglsl"
    },
    "implementation:IM_splittb_vector2_genmdl": {
      "nodedef": "ND_splittb_vector2",
      "sourcecode": "mx::stdlib::mx_splittb_vector2(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splittb_vector2_genmsl": {
      "file": "../genglsl/mx_splittb_vector2.glsl",
      "function": "mx_splittb_vector2",
      "nodedef": "ND_splittb_vector2",
      "target": "genmsl"
    },
    "implementation:IM_splittb_vector2_genosl": {
      "nodedef": "ND_splittb_vector2",
      "sourcecode": "mix({{valuet}}, {{valueb}}, aastep({{center}}, {{texcoord}}.y))",
      "target": "genosl"
    },
    "implementation:IM_splittb_vector3_genglsl": {
      "file": "mx_splittb_vector3.glsl",
      "function": "mx_splittb_vector3",
      "nodedef": "ND_splittb_vector3",
      "target": "genglsl"
    },
    "implementation:IM_splittb_vector3_genmdl": {
      "nodedef": "ND_splittb_vector3",
      "sourcecode": "mx::stdlib::mx_splittb_vector3(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splittb_vector3_genmsl": {
      "file": "../genglsl/mx_splittb_vector3.glsl",
      "function": "mx_splittb_vector3",
      "nodedef": "ND_splittb_vector3",
      "target": "genmsl"
    },
    "implementation:IM_splittb_vector3_genosl": {
      "nodedef": "ND_splittb_vector3",
      "sourcecode": "mix({{valuet}}, {{valueb}}, aastep({{center}}, {{texcoord}}.y))",
      "target": "genosl"
    },
    "implementation:IM_splittb_vector4_genglsl": {
      "file": "mx_splittb_vector4.glsl",
      "function": "mx_splittb_vector4",
      "nodedef": "ND_splittb_vector4",
      "target": "genglsl"
    },
    "implementation:IM_splittb_vector4_genmdl": {
      "nodedef": "ND_splittb_vector4",
      "sourcecode": "mx::stdlib::mx_splittb_vector4(mxp_valuet:{{valuet}}, mxp_valueb:{{valueb}}, mxp_center:{{center}}, mxp_texcoord:{{texcoord}})",
      "target": "genmdl"
    },
    "implementation:IM_splittb_vector4_genmsl": {
      "file": "../genglsl/mx_splittb_vector4.glsl",
      "function": "mx_splittb_vector4",
      "nodedef": "ND_splittb_vector4",
      "target": "genmsl"
    },
    "implementation:IM_splittb_vector4_genosl": {
      "nodedef": "ND_splittb_vector4",
      "sourcecode": "mix({{valuet}}, {{valueb}}, aastep({{center}}, {{texcoord}}.y))",
      "target": "genosl"
    },
    "implementation:IM_spot_light_genglsl": {
      "file": "mx_spot_light.glsl",
      "function": "mx_spot_light",
      "nodedef": "ND_spot_light",
      "target": "genglsl"
    },
    "implementation:IM_spot_light_genmsl": {
      "file": "mx_spot_light.metal",
      "function": "mx_spot_light",
      "nodedef": "ND_spot_light",
      "target": "genmsl"
    },
    "implementation:IM_sqrt_float_genglsl": {
      "nodedef": "ND_sqrt_float",
      "sourcecode": "sqrt({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sqrt_float_genmdl": {
      "nodedef": "ND_sqrt_float",
      "sourcecode": "math::sqrt({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sqrt_float_genmsl": {
      "nodedef": "ND_sqrt_float",
      "sourcecode": "sqrt({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sqrt_float_genosl": {
      "nodedef": "ND_sqrt_float",
      "sourcecode": "sqrt({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sqrt_vector2_genglsl": {
      "nodedef": "ND_sqrt_vector2",
      "sourcecode": "sqrt({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sqrt_vector2_genmdl": {
      "nodedef": "ND_sqrt_vector2",
      "sourcecode": "math::sqrt({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sqrt_vector2_genmsl": {
      "nodedef": "ND_sqrt_vector2",
      "sourcecode": "sqrt({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sqrt_vector2_genosl": {
      "nodedef": "ND_sqrt_vector2",
      "sourcecode": "sqrt({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sqrt_vector3_genglsl": {
      "nodedef": "ND_sqrt_vector3",
      "sourcecode": "sqrt({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sqrt_vector3_genmdl": {
      "nodedef": "ND_sqrt_vector3",
      "sourcecode": "math::sqrt({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sqrt_vector3_genmsl": {
      "nodedef": "ND_sqrt_vector3",
      "sourcecode": "sqrt({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sqrt_vector3_genosl": {
      "nodedef": "ND_sqrt_vector3",
      "sourcecode": "sqrt({{in}})",
      "target": "genosl"
    },
    "implementation:IM_sqrt_vector4_genglsl": {
      "nodedef": "ND_sqrt_vector4",
      "sourcecode": "sqrt({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_sqrt_vector4_genmdl": {
      "nodedef": "ND_sqrt_vector4",
      "sourcecode": "math::sqrt({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_sqrt_vector4_genmsl": {
      "nodedef": "ND_sqrt_vector4",
      "sourcecode": "sqrt({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_sqrt_vector4_genosl": {
      "nodedef": "ND_sqrt_vector4",
      "sourcecode": "sqrt({{in}})",
      "target": "genosl"
    },
    "implementation:IM_subsurface_bsdf_genglsl": {
      "file": "mx_subsurface_bsdf.glsl",
      "function": "mx_subsurface_bsdf",
      "nodedef": "ND_subsurface_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_subsurface_bsdf_genmdl": {
      "nodedef": "ND_subsurface_bsdf",
      "sourcecode": "mx::pbrlib::mx_subsurface_bsdf(mxp_weight:{{weight}}, mxp_color:{{color}}, mxp_radius:{{radius}}, mxp_anisotropy:{{anisotropy}}, mxp_normal:{{normal}})",
      "target": "genmdl"
    },
    "implementation:IM_subsurface_bsdf_genmsl": {
      "file": "../genglsl/mx_subsurface_bsdf.glsl",
      "function": "mx_subsurface_bsdf",
      "nodedef": "ND_subsurface_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_subsurface_bsdf_genosl": {
      "file": "legacy/mx_subsurface_bsdf.osl",
      "function": "mx_subsurface_bsdf",
      "nodedef": "ND_subsurface_bsdf",
      "target": "genosl"
    },
    "implementation:IM_subtract_color3FA_genglsl": {
      "nodedef": "ND_subtract_color3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_color3FA_genmdl": {
      "nodedef": "ND_subtract_color3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_color3FA_genmsl": {
      "nodedef": "ND_subtract_color3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_color3FA_genosl": {
      "nodedef": "ND_subtract_color3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_color3_genglsl": {
      "nodedef": "ND_subtract_color3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_color3_genmdl": {
      "nodedef": "ND_subtract_color3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_color3_genmsl": {
      "nodedef": "ND_subtract_color3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_color3_genosl": {
      "nodedef": "ND_subtract_color3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_color4FA_genglsl": {
      "nodedef": "ND_subtract_color4FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_color4FA_genmdl": {
      "nodedef": "ND_subtract_color4FA",
      "sourcecode": "mx_subtract({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_subtract_color4FA_genmsl": {
      "nodedef": "ND_subtract_color4FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_color4FA_genosl": {
      "nodedef": "ND_subtract_color4FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_color4_genglsl": {
      "nodedef": "ND_subtract_color4",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_color4_genmdl": {
      "nodedef": "ND_subtract_color4",
      "sourcecode": "mx_subtract({{in1}}, {{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_subtract_color4_genmsl": {
      "nodedef": "ND_subtract_color4",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_color4_genosl": {
      "nodedef": "ND_subtract_color4",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_float_genglsl": {
      "nodedef": "ND_subtract_float",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_float_genmdl": {
      "nodedef": "ND_subtract_float",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_float_genmsl": {
      "nodedef": "ND_subtract_float",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_float_genosl": {
      "nodedef": "ND_subtract_float",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_matrix33FA_genglsl": {
      "nodedef": "ND_subtract_matrix33FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_matrix33FA_genmdl": {
      "nodedef": "ND_subtract_matrix33FA",
      "sourcecode": "{{in1}} - float3x3({{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_subtract_matrix33FA_genmsl": {
      "nodedef": "ND_subtract_matrix33FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_matrix33FA_genosl": {
      "nodedef": "ND_subtract_matrix33FA",
      "sourcecode": "mx_subtract({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_subtract_matrix33_genglsl": {
      "nodedef": "ND_subtract_matrix33",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_matrix33_genmdl": {
      "nodedef": "ND_subtract_matrix33",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_matrix33_genmsl": {
      "nodedef": "ND_subtract_matrix33",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_matrix33_genosl": {
      "nodedef": "ND_subtract_matrix33",
      "sourcecode": "mx_subtract({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_subtract_matrix44FA_genglsl": {
      "nodedef": "ND_subtract_matrix44FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_matrix44FA_genmdl": {
      "nodedef": "ND_subtract_matrix44FA",
      "sourcecode": "{{in1}} - float4x4({{in2}})",
      "target": "genmdl"
    },
    "implementation:IM_subtract_matrix44FA_genmsl": {
      "nodedef": "ND_subtract_matrix44FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_matrix44FA_genosl": {
      "nodedef": "ND_subtract_matrix44FA",
      "sourcecode": "mx_subtract({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_subtract_matrix44_genglsl": {
      "nodedef": "ND_subtract_matrix44",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_matrix44_genmdl": {
      "nodedef": "ND_subtract_matrix44",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_matrix44_genmsl": {
      "nodedef": "ND_subtract_matrix44",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_matrix44_genosl": {
      "nodedef": "ND_subtract_matrix44",
      "sourcecode": "mx_subtract({{in1}}, {{in2}})",
      "target": "genosl"
    },
    "implementation:IM_subtract_vector2FA_genglsl": {
      "nodedef": "ND_subtract_vector2FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_vector2FA_genmdl": {
      "nodedef": "ND_subtract_vector2FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_vector2FA_genmsl": {
      "nodedef": "ND_subtract_vector2FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_vector2FA_genosl": {
      "nodedef": "ND_subtract_vector2FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_vector2_genglsl": {
      "nodedef": "ND_subtract_vector2",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_vector2_genmdl": {
      "nodedef": "ND_subtract_vector2",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_vector2_genmsl": {
      "nodedef": "ND_subtract_vector2",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_vector2_genosl": {
      "nodedef": "ND_subtract_vector2",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_vector3FA_genglsl": {
      "nodedef": "ND_subtract_vector3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_vector3FA_genmdl": {
      "nodedef": "ND_subtract_vector3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_vector3FA_genmsl": {
      "nodedef": "ND_subtract_vector3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_vector3FA_genosl": {
      "nodedef": "ND_subtract_vector3FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_vector3_genglsl": {
      "nodedef": "ND_subtract_vector3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_vector3_genmdl": {
      "nodedef": "ND_subtract_vector3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_vector3_genmsl": {
      "nodedef": "ND_subtract_vector3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_vector3_genosl": {
      "nodedef": "ND_subtract_vector3",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_vector4FA_genglsl": {
      "nodedef": "ND_subtract_vector4FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_vector4FA_genmdl": {
      "nodedef": "ND_subtract_vector4FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_vector4FA_genmsl": {
      "nodedef": "ND_subtract_vector4FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_vector4FA_genosl": {
      "nodedef": "ND_subtract_vector4FA",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_subtract_vector4_genglsl": {
      "nodedef": "ND_subtract_vector4",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genglsl"
    },
    "implementation:IM_subtract_vector4_genmdl": {
      "nodedef": "ND_subtract_vector4",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmdl"
    },
    "implementation:IM_subtract_vector4_genmsl": {
      "nodedef": "ND_subtract_vector4",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genmsl"
    },
    "implementation:IM_subtract_vector4_genosl": {
      "nodedef": "ND_subtract_vector4",
      "sourcecode": "{{in1}} - {{in2}}",
      "target": "genosl"
    },
    "implementation:IM_surface_genglsl": {
      "nodedef": "ND_surface",
      "target": "genglsl"
    },
    "implementation:IM_surface_genmdl": {
      "nodedef": "ND_surface",
      "target": "genmdl"
    },
    "implementation:IM_surface_genmsl": {
      "nodedef": "ND_surface",
      "target": "genmsl"
    },
    "implementation:IM_surface_genosl": {
      "file": "legacy/mx_surface.osl",
      "function": "mx_surface",
      "nodedef": "ND_surface",
      "target": "genosl"
    },
    "implementation:IM_surface_unlit_genglsl": {
      "nodedef": "ND_surface_unlit",
      "target": "genglsl"
    },
    "implementation:IM_surface_unlit_genmdl": {
      "nodedef": "ND_surface_unlit",
      "sourcecode": "mx::stdlib::mx_surface_unlit({{emission}}, {{emission_color}}, {{transmission}}, {{transmission_color}}, {{opacity}})",
      "target": "genmdl"
    },
    "implementation:IM_surface_unlit_genmsl": {
      "nodedef": "ND_surface_unlit",
      "target": "genmsl"
    },
    "implementation:IM_surface_unlit_genosl": {
      "file": "mx_surface_unlit.osl",
      "function": "mx_surface_unlit",
      "nodedef": "ND_surface_unlit",
      "target": "genosl"
    },
    "implementation:IM_surfacematerial_genglsl": {
      "nodedef": "ND_surfacematerial",
      "target": "genglsl"
    },
    "implementation:IM_surfacematerial_genmdl": {
      "nodedef": "ND_surfacematerial",
      "target": "genmdl"
    },
    "implementation:IM_surfacematerial_genmsl": {
      "nodedef": "ND_surfacematerial",
      "target": "genmsl"
    },
    "implementation:IM_surfacematerial_genosl": {
      "nodedef": "ND_surfacematerial",
      "target": "genosl"
    },
    "implementation:IM_switch_color3I_genglsl": {
      "nodedef": "ND_switch_color3I",
      "target": "genglsl"
    },
    "implementation:IM_switch_color3I_genmdl": {
      "nodedef": "ND_switch_color3I",
      "sourcecode": "mx::stdlib::mx_switch_color3I({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_color3I_genmsl": {
      "nodedef": "ND_switch_color3I",
      "target": "genmsl"
    },
    "implementation:IM_switch_color3I_genosl": {
      "nodedef": "ND_switch_color3I",
      "target": "genosl"
    },
    "implementation:IM_switch_color3_genglsl": {
      "nodedef": "ND_switch_color3",
      "target": "genglsl"
    },
    "implementation:IM_switch_color3_genmdl": {
      "nodedef": "ND_switch_color3",
      "sourcecode": "mx::stdlib::mx_switch_color3({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_color3_genmsl": {
      "nodedef": "ND_switch_color3",
      "target": "genmsl"
    },
    "implementation:IM_switch_color3_genosl": {
      "nodedef": "ND_switch_color3",
      "target": "genosl"
    },
    "implementation:IM_switch_color4I_genglsl": {
      "nodedef": "ND_switch_color4I",
      "target": "genglsl"
    },
    "implementation:IM_switch_color4I_genmdl": {
      "nodedef": "ND_switch_color4I",
      "sourcecode": "mx::stdlib::mx_switch_color4I({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_color4I_genmsl": {
      "nodedef": "ND_switch_color4I",
      "target": "genmsl"
    },
    "implementation:IM_switch_color4I_genosl": {
      "nodedef": "ND_switch_color4I",
      "target": "genosl"
    },
    "implementation:IM_switch_color4_genglsl": {
      "nodedef": "ND_switch_color4",
      "target": "genglsl"
    },
    "implementation:IM_switch_color4_genmdl": {
      "nodedef": "ND_switch_color4",
      "sourcecode": "mx::stdlib::mx_switch_color4({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_color4_genmsl": {
      "nodedef": "ND_switch_color4",
      "target": "genmsl"
    },
    "implementation:IM_switch_color4_genosl": {
      "nodedef": "ND_switch_color4",
      "target": "genosl"
    },
    "implementation:IM_switch_floatI_genglsl": {
      "nodedef": "ND_switch_floatI",
      "target": "genglsl"
    },
    "implementation:IM_switch_floatI_genmdl": {
      "nodedef": "ND_switch_floatI",
      "sourcecode": "mx::stdlib::mx_switch_floatI({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_floatI_genmsl": {
      "nodedef": "ND_switch_floatI",
      "target": "genmsl"
    },
    "implementation:IM_switch_floatI_genosl": {
      "nodedef": "ND_switch_floatI",
      "target": "genosl"
    },
    "implementation:IM_switch_float_genglsl": {
      "nodedef": "ND_switch_float",
      "target": "genglsl"
    },
    "implementation:IM_switch_float_genmdl": {
      "nodedef": "ND_switch_float",
      "sourcecode": "mx::stdlib::mx_switch_float({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_float_genmsl": {
      "nodedef": "ND_switch_float",
      "target": "genmsl"
    },
    "implementation:IM_switch_float_genosl": {
      "nodedef": "ND_switch_float",
      "target": "genosl"
    },
    "implementation:IM_switch_vector2I_genglsl": {
      "nodedef": "ND_switch_vector2I",
      "target": "genglsl"
    },
    "implementation:IM_switch_vector2I_genmdl": {
      "nodedef": "ND_switch_vector2I",
      "sourcecode": "mx::stdlib::mx_switch_vector2I({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_vector2I_genmsl": {
      "nodedef": "ND_switch_vector2I",
      "target": "genmsl"
    },
    "implementation:IM_switch_vector2I_genosl": {
      "nodedef": "ND_switch_vector2I",
      "target": "genosl"
    },
    "implementation:IM_switch_vector2_genglsl": {
      "nodedef": "ND_switch_vector2",
      "target": "genglsl"
    },
    "implementation:IM_switch_vector2_genmdl": {
      "nodedef": "ND_switch_vector2",
      "sourcecode": "mx::stdlib::mx_switch_vector2({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_vector2_genmsl": {
      "nodedef": "ND_switch_vector2",
      "target": "genmsl"
    },
    "implementation:IM_switch_vector2_genosl": {
      "nodedef": "ND_switch_vector2",
      "target": "genosl"
    },
    "implementation:IM_switch_vector3I_genglsl": {
      "nodedef": "ND_switch_vector3I",
      "target": "genglsl"
    },
    "implementation:IM_switch_vector3I_genmdl": {
      "nodedef": "ND_switch_vector3I",
      "sourcecode": "mx::stdlib::mx_switch_vector3I({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_vector3I_genmsl": {
      "nodedef": "ND_switch_vector3I",
      "target": "genmsl"
    },
    "implementation:IM_switch_vector3I_genosl": {
      "nodedef": "ND_switch_vector3I",
      "target": "genosl"
    },
    "implementation:IM_switch_vector3_genglsl": {
      "nodedef": "ND_switch_vector3",
      "target": "genglsl"
    },
    "implementation:IM_switch_vector3_genmdl": {
      "nodedef": "ND_switch_vector3",
      "sourcecode": "mx::stdlib::mx_switch_vector3({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_vector3_genmsl": {
      "nodedef": "ND_switch_vector3",
      "target": "genmsl"
    },
    "implementation:IM_switch_vector3_genosl": {
      "nodedef": "ND_switch_vector3",
      "target": "genosl"
    },
    "implementation:IM_switch_vector4I_genglsl": {
      "nodedef": "ND_switch_vector4I",
      "target": "genglsl"
    },
    "implementation:IM_switch_vector4I_genmdl": {
      "nodedef": "ND_switch_vector4I",
      "sourcecode": "mx::stdlib::mx_switch_vector4I({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_vector4I_genmsl": {
      "nodedef": "ND_switch_vector4I",
      "target": "genmsl"
    },
    "implementation:IM_switch_vector4I_genosl": {
      "nodedef": "ND_switch_vector4I",
      "target": "genosl"
    },
    "implementation:IM_switch_vector4_genglsl": {
      "nodedef": "ND_switch_vector4",
      "target": "genglsl"
    },
    "implementation:IM_switch_vector4_genmdl": {
      "nodedef": "ND_switch_vector4",
      "sourcecode": "mx::stdlib::mx_switch_vector4({{in1}}, {{in2}}, {{in3}}, {{in4}}, {{in5}}, {{which}})",
      "target": "genmdl"
    },
    "implementation:IM_switch_vector4_genmsl": {
      "nodedef": "ND_switch_vector4",
      "target": "genmsl"
    },
    "implementation:IM_switch_vector4_genosl": {
      "nodedef": "ND_switch_vector4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color3_color3_genglsl": {
      "nodedef": "ND_swizzle_color3_color3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color3_color3_genmdl": {
      "nodedef": "ND_swizzle_color3_color3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color3_color3_genmsl": {
      "nodedef": "ND_swizzle_color3_color3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color3_color3_genosl": {
      "nodedef": "ND_swizzle_color3_color3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color3_color4_genglsl": {
      "nodedef": "ND_swizzle_color3_color4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color3_color4_genmdl": {
      "nodedef": "ND_swizzle_color3_color4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color3_color4_genmsl": {
      "nodedef": "ND_swizzle_color3_color4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color3_color4_genosl": {
      "nodedef": "ND_swizzle_color3_color4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color3_float_genglsl": {
      "nodedef": "ND_swizzle_color3_float",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color3_float_genmdl": {
      "nodedef": "ND_swizzle_color3_float",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color3_float_genmsl": {
      "nodedef": "ND_swizzle_color3_float",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color3_float_genosl": {
      "nodedef": "ND_swizzle_color3_float",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color3_vector2_genglsl": {
      "nodedef": "ND_swizzle_color3_vector2",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color3_vector2_genmdl": {
      "nodedef": "ND_swizzle_color3_vector2",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color3_vector2_genmsl": {
      "nodedef": "ND_swizzle_color3_vector2",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color3_vector2_genosl": {
      "nodedef": "ND_swizzle_color3_vector2",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color3_vector3_genglsl": {
      "nodedef": "ND_swizzle_color3_vector3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color3_vector3_genmdl": {
      "nodedef": "ND_swizzle_color3_vector3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color3_vector3_genmsl": {
      "nodedef": "ND_swizzle_color3_vector3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color3_vector3_genosl": {
      "nodedef": "ND_swizzle_color3_vector3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color3_vector4_genglsl": {
      "nodedef": "ND_swizzle_color3_vector4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color3_vector4_genmdl": {
      "nodedef": "ND_swizzle_color3_vector4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color3_vector4_genmsl": {
      "nodedef": "ND_swizzle_color3_vector4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color3_vector4_genosl": {
      "nodedef": "ND_swizzle_color3_vector4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color4_color3_genglsl": {
      "nodedef": "ND_swizzle_color4_color3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color4_color3_genmdl": {
      "nodedef": "ND_swizzle_color4_color3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color4_color3_genmsl": {
      "nodedef": "ND_swizzle_color4_color3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color4_color3_genosl": {
      "nodedef": "ND_swizzle_color4_color3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color4_color4_genglsl": {
      "nodedef": "ND_swizzle_color4_color4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color4_color4_genmdl": {
      "nodedef": "ND_swizzle_color4_color4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color4_color4_genmsl": {
      "nodedef": "ND_swizzle_color4_color4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color4_color4_genosl": {
      "nodedef": "ND_swizzle_color4_color4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color4_float_genglsl": {
      "nodedef": "ND_swizzle_color4_float",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color4_float_genmdl": {
      "nodedef": "ND_swizzle_color4_float",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color4_float_genmsl": {
      "nodedef": "ND_swizzle_color4_float",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color4_float_genosl": {
      "nodedef": "ND_swizzle_color4_float",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color4_vector2_genglsl": {
      "nodedef": "ND_swizzle_color4_vector2",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color4_vector2_genmdl": {
      "nodedef": "ND_swizzle_color4_vector2",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color4_vector2_genmsl": {
      "nodedef": "ND_swizzle_color4_vector2",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color4_vector2_genosl": {
      "nodedef": "ND_swizzle_color4_vector2",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color4_vector3_genglsl": {
      "nodedef": "ND_swizzle_color4_vector3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color4_vector3_genmdl": {
      "nodedef": "ND_swizzle_color4_vector3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color4_vector3_genmsl": {
      "nodedef": "ND_swizzle_color4_vector3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color4_vector3_genosl": {
      "nodedef": "ND_swizzle_color4_vector3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_color4_vector4_genglsl": {
      "nodedef": "ND_swizzle_color4_vector4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_color4_vector4_genmdl": {
      "nodedef": "ND_swizzle_color4_vector4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_color4_vector4_genmsl": {
      "nodedef": "ND_swizzle_color4_vector4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_color4_vector4_genosl": {
      "nodedef": "ND_swizzle_color4_vector4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_float_color3_genglsl": {
      "nodedef": "ND_swizzle_float_color3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_float_color3_genmdl": {
      "nodedef": "ND_swizzle_float_color3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_float_color3_genmsl": {
      "nodedef": "ND_swizzle_float_color3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_float_color3_genosl": {
      "nodedef": "ND_swizzle_float_color3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_float_color4_genglsl": {
      "nodedef": "ND_swizzle_float_color4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_float_color4_genmdl": {
      "nodedef": "ND_swizzle_float_color4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_float_color4_genmsl": {
      "nodedef": "ND_swizzle_float_color4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_float_color4_genosl": {
      "nodedef": "ND_swizzle_float_color4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_float_vector2_genglsl": {
      "nodedef": "ND_swizzle_float_vector2",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_float_vector2_genmdl": {
      "nodedef": "ND_swizzle_float_vector2",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_float_vector2_genmsl": {
      "nodedef": "ND_swizzle_float_vector2",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_float_vector2_genosl": {
      "nodedef": "ND_swizzle_float_vector2",
      "target": "genosl"
    },
    "implementation:IM_swizzle_float_vector3_genglsl": {
      "nodedef": "ND_swizzle_float_vector3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_float_vector3_genmdl": {
      "nodedef": "ND_swizzle_float_vector3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_float_vector3_genmsl": {
      "nodedef": "ND_swizzle_float_vector3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_float_vector3_genosl": {
      "nodedef": "ND_swizzle_float_vector3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_float_vector4_genglsl": {
      "nodedef": "ND_swizzle_float_vector4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_float_vector4_genmdl": {
      "nodedef": "ND_swizzle_float_vector4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_float_vector4_genmsl": {
      "nodedef": "ND_swizzle_float_vector4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_float_vector4_genosl": {
      "nodedef": "ND_swizzle_float_vector4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector2_color3_genglsl": {
      "nodedef": "ND_swizzle_vector2_color3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector2_color3_genmdl": {
      "nodedef": "ND_swizzle_vector2_color3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector2_color3_genmsl": {
      "nodedef": "ND_swizzle_vector2_color3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector2_color3_genosl": {
      "nodedef": "ND_swizzle_vector2_color3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector2_color4_genglsl": {
      "nodedef": "ND_swizzle_vector2_color4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector2_color4_genmdl": {
      "nodedef": "ND_swizzle_vector2_color4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector2_color4_genmsl": {
      "nodedef": "ND_swizzle_vector2_color4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector2_color4_genosl": {
      "nodedef": "ND_swizzle_vector2_color4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector2_float_genglsl": {
      "nodedef": "ND_swizzle_vector2_float",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector2_float_genmdl": {
      "nodedef": "ND_swizzle_vector2_float",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector2_float_genmsl": {
      "nodedef": "ND_swizzle_vector2_float",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector2_float_genosl": {
      "nodedef": "ND_swizzle_vector2_float",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector2_vector2_genglsl": {
      "nodedef": "ND_swizzle_vector2_vector2",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector2_vector2_genmdl": {
      "nodedef": "ND_swizzle_vector2_vector2",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector2_vector2_genmsl": {
      "nodedef": "ND_swizzle_vector2_vector2",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector2_vector2_genosl": {
      "nodedef": "ND_swizzle_vector2_vector2",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector2_vector3_genglsl": {
      "nodedef": "ND_swizzle_vector2_vector3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector2_vector3_genmdl": {
      "nodedef": "ND_swizzle_vector2_vector3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector2_vector3_genmsl": {
      "nodedef": "ND_swizzle_vector2_vector3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector2_vector3_genosl": {
      "nodedef": "ND_swizzle_vector2_vector3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector2_vector4_genglsl": {
      "nodedef": "ND_swizzle_vector2_vector4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector2_vector4_genmdl": {
      "nodedef": "ND_swizzle_vector2_vector4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector2_vector4_genmsl": {
      "nodedef": "ND_swizzle_vector2_vector4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector2_vector4_genosl": {
      "nodedef": "ND_swizzle_vector2_vector4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector3_color3_genglsl": {
      "nodedef": "ND_swizzle_vector3_color3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector3_color3_genmdl": {
      "nodedef": "ND_swizzle_vector3_color3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector3_color3_genmsl": {
      "nodedef": "ND_swizzle_vector3_color3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector3_color3_genosl": {
      "nodedef": "ND_swizzle_vector3_color3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector3_color4_genglsl": {
      "nodedef": "ND_swizzle_vector3_color4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector3_color4_genmdl": {
      "nodedef": "ND_swizzle_vector3_color4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector3_color4_genmsl": {
      "nodedef": "ND_swizzle_vector3_color4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector3_color4_genosl": {
      "nodedef": "ND_swizzle_vector3_color4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector3_float_genglsl": {
      "nodedef": "ND_swizzle_vector3_float",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector3_float_genmdl": {
      "nodedef": "ND_swizzle_vector3_float",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector3_float_genmsl": {
      "nodedef": "ND_swizzle_vector3_float",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector3_float_genosl": {
      "nodedef": "ND_swizzle_vector3_float",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector3_vector2_genglsl": {
      "nodedef": "ND_swizzle_vector3_vector2",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector3_vector2_genmdl": {
      "nodedef": "ND_swizzle_vector3_vector2",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector3_vector2_genmsl": {
      "nodedef": "ND_swizzle_vector3_vector2",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector3_vector2_genosl": {
      "nodedef": "ND_swizzle_vector3_vector2",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector3_vector3_genglsl": {
      "nodedef": "ND_swizzle_vector3_vector3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector3_vector3_genmdl": {
      "nodedef": "ND_swizzle_vector3_vector3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector3_vector3_genmsl": {
      "nodedef": "ND_swizzle_vector3_vector3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector3_vector3_genosl": {
      "nodedef": "ND_swizzle_vector3_vector3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector3_vector4_genglsl": {
      "nodedef": "ND_swizzle_vector3_vector4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector3_vector4_genmdl": {
      "nodedef": "ND_swizzle_vector3_vector4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector3_vector4_genmsl": {
      "nodedef": "ND_swizzle_vector3_vector4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector3_vector4_genosl": {
      "nodedef": "ND_swizzle_vector3_vector4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector4_color3_genglsl": {
      "nodedef": "ND_swizzle_vector4_color3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector4_color3_genmdl": {
      "nodedef": "ND_swizzle_vector4_color3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector4_color3_genmsl": {
      "nodedef": "ND_swizzle_vector4_color3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector4_color3_genosl": {
      "nodedef": "ND_swizzle_vector4_color3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector4_color4_genglsl": {
      "nodedef": "ND_swizzle_vector4_color4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector4_color4_genmdl": {
      "nodedef": "ND_swizzle_vector4_color4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector4_color4_genmsl": {
      "nodedef": "ND_swizzle_vector4_color4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector4_color4_genosl": {
      "nodedef": "ND_swizzle_vector4_color4",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector4_float_genglsl": {
      "nodedef": "ND_swizzle_vector4_float",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector4_float_genmdl": {
      "nodedef": "ND_swizzle_vector4_float",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector4_float_genmsl": {
      "nodedef": "ND_swizzle_vector4_float",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector4_float_genosl": {
      "nodedef": "ND_swizzle_vector4_float",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector4_vector2_genglsl": {
      "nodedef": "ND_swizzle_vector4_vector2",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector4_vector2_genmdl": {
      "nodedef": "ND_swizzle_vector4_vector2",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector4_vector2_genmsl": {
      "nodedef": "ND_swizzle_vector4_vector2",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector4_vector2_genosl": {
      "nodedef": "ND_swizzle_vector4_vector2",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector4_vector3_genglsl": {
      "nodedef": "ND_swizzle_vector4_vector3",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector4_vector3_genmdl": {
      "nodedef": "ND_swizzle_vector4_vector3",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector4_vector3_genmsl": {
      "nodedef": "ND_swizzle_vector4_vector3",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector4_vector3_genosl": {
      "nodedef": "ND_swizzle_vector4_vector3",
      "target": "genosl"
    },
    "implementation:IM_swizzle_vector4_vector4_genglsl": {
      "nodedef": "ND_swizzle_vector4_vector4",
      "target": "genglsl"
    },
    "implementation:IM_swizzle_vector4_vector4_genmdl": {
      "nodedef": "ND_swizzle_vector4_vector4",
      "target": "genmdl"
    },
    "implementation:IM_swizzle_vector4_vector4_genmsl": {
      "nodedef": "ND_swizzle_vector4_vector4",
      "target": "genmsl"
    },
    "implementation:IM_swizzle_vector4_vector4_genosl": {
      "nodedef": "ND_swizzle_vector4_vector4",
      "target": "genosl"
    },
    "implementation:IM_tan_float_genglsl": {
      "nodedef": "ND_tan_float",
      "sourcecode": "tan({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_tan_float_genmdl": {
      "nodedef": "ND_tan_float",
      "sourcecode": "math::tan({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_tan_float_genmsl": {
      "nodedef": "ND_tan_float",
      "sourcecode": "tan({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_tan_float_genosl": {
      "nodedef": "ND_tan_float",
      "sourcecode": "tan({{in}})",
      "target": "genosl"
    },
    "implementation:IM_tan_vector2_genglsl": {
      "nodedef": "ND_tan_vector2",
      "sourcecode": "tan({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_tan_vector2_genmdl": {
      "nodedef": "ND_tan_vector2",
      "sourcecode": "math::tan({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_tan_vector2_genmsl": {
      "nodedef": "ND_tan_vector2",
      "sourcecode": "tan({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_tan_vector2_genosl": {
      "nodedef": "ND_tan_vector2",
      "sourcecode": "tan({{in}})",
      "target": "genosl"
    },
    "implementation:IM_tan_vector3_genglsl": {
      "nodedef": "ND_tan_vector3",
      "sourcecode": "tan({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_tan_vector3_genmdl": {
      "nodedef": "ND_tan_vector3",
      "sourcecode": "math::tan({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_tan_vector3_genmsl": {
      "nodedef": "ND_tan_vector3",
      "sourcecode": "tan({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_tan_vector3_genosl": {
      "nodedef": "ND_tan_vector3",
      "sourcecode": "tan({{in}})",
      "target": "genosl"
    },
    "implementation:IM_tan_vector4_genglsl": {
      "nodedef": "ND_tan_vector4",
      "sourcecode": "tan({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_tan_vector4_genmdl": {
      "nodedef": "ND_tan_vector4",
      "sourcecode": "math::tan({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_tan_vector4_genmsl": {
      "nodedef": "ND_tan_vector4",
      "sourcecode": "tan({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_tan_vector4_genosl": {
      "nodedef": "ND_tan_vector4",
      "sourcecode": "tan({{in}})",
      "target": "genosl"
    },
    "implementation:IM_tangent_vector3_genglsl": {
      "nodedef": "ND_tangent_vector3",
      "target": "genglsl"
    },
    "implementation:IM_tangent_vector3_genmdl": {
      "nodedef": "ND_tangent_vector3",
      "sourcecode": "mx::stdlib::mx_tangent_vector3(mxp_space:{{space}}, mxp_index:{{index}})",
      "target": "genmdl"
    },
    "implementation:IM_tangent_vector3_genmsl": {
      "nodedef": "ND_tangent_vector3",
      "target": "genmsl"
    },
    "implementation:IM_tangent_vector3_genosl": {
      "nodedef": "ND_tangent_vector3",
      "sourcecode": "transform({{space}}, normalize(dPdu))",
      "target": "genosl"
    },
    "implementation:IM_texcoord_vector2_genglsl": {
      "nodedef": "ND_texcoord_vector2",
      "target": "genglsl"
    },
    "implementation:IM_texcoord_vector2_genmdl": {
      "nodedef": "ND_texcoord_vector2",
      "sourcecode": "mx::stdlib::mx_texcoord_vector2(mxp_index:{{index}})",
      "target": "genmdl"
    },
    "implementation:IM_texcoord_vector2_genmsl": {
      "nodedef": "ND_texcoord_vector2",
      "target": "genmsl"
    },
    "implementation:IM_texcoord_vector2_genosl": {
      "nodedef": "ND_texcoord_vector2",
      "sourcecode": "vector2(u,v)",
      "target": "genosl"
    },
    "implementation:IM_texcoord_vector3_genglsl": {
      "nodedef": "ND_texcoord_vector3",
      "target": "genglsl"
    },
    "implementation:IM_texcoord_vector3_genmdl": {
      "nodedef": "ND_texcoord_vector3",
      "sourcecode": "mx::stdlib::mx_texcoord_vector3(mxp_index:{{index}})",
      "target": "genmdl"
    },
    "implementation:IM_texcoord_vector3_genmsl": {
      "nodedef": "ND_texcoord_vector3",
      "target": "genmsl"
    },
    "implementation:IM_texcoord_vector3_genosl": {
      "nodedef": "ND_texcoord_vector3",
      "sourcecode": "vector(u,v,0)",
      "target": "genosl"
    },
    "implementation:IM_thin_film_bsdf_genglsl": {
      "nodedef": "ND_thin_film_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_thin_film_bsdf_genmdl": {
      "nodedef": "ND_thin_film_bsdf",
      "sourcecode": "mx::pbrlib::mx_thin_film_bsdf(mxp_thickness:{{thickness}}, mxp_ior:{{ior}}, mxp_base:{{base}})",
      "target": "genmdl"
    },
    "implementation:IM_thin_film_bsdf_genmsl": {
      "nodedef": "ND_thin_film_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_thin_film_bsdf_genosl": {
      "nodedef": "ND_thin_film_bsdf",
      "target": "genosl"
    },
    "implementation:IM_thin_surface_genmdl": {
      "nodedef": "ND_thin_surface",
      "sourcecode": "mx::pbrlib::mx_thin_surface(mxp_front_bsdf:{{front_bsdf}}, mxp_front_edf:{{front_edf}}, mxp_back_bsdf:{{back_bsdf}}, mxp_back_edf:{{back_edf}}, mxp_opacity:{{opacity}})",
      "target": "genmdl"
    },
    "implementation:IM_time_float_genglsl": {
      "function": "mx_time_float",
      "nodedef": "ND_time_float",
      "target": "genglsl"
    },
    "implementation:IM_time_float_genmdl": {
      "nodedef": "ND_time_float",
      "sourcecode": "mx::stdlib::mx_time_float()",
      "target": "genmdl"
    },
    "implementation:IM_time_float_genmsl": {
      "function": "mx_time_float",
      "nodedef": "ND_time_float",
      "target": "genmsl"
    },
    "implementation:IM_time_float_genosl": {
      "file": "mx_time_float.osl",
      "function": "mx_time_float",
      "nodedef": "ND_time_float",
      "target": "genosl"
    },
    "implementation:IM_transformmatrix_vector2M3_genglsl": {
      "file": "mx_transformmatrix_vector2M3.glsl",
      "function": "mx_transformmatrix_vector2M3",
      "nodedef": "ND_transformmatrix_vector2M3",
      "target": "genglsl"
    },
    "implementation:IM_transformmatrix_vector2M3_genmdl": {
      "nodedef": "ND_transformmatrix_vector2M3",
      "sourcecode": "mx::stdlib::mx_transformmatrix_vector2M3({{in}}, {{mat}})",
      "target": "genmdl"
    },
    "implementation:IM_transformmatrix_vector2M3_genmsl": {
      "file": "../genglsl/mx_transformmatrix_vector2M3.glsl",
      "function": "mx_transformmatrix_vector2M3",
      "nodedef": "ND_transformmatrix_vector2M3",
      "target": "genmsl"
    },
    "implementation:IM_transformmatrix_vector2M3_genosl": {
      "file": "mx_transformmatrix_vector2M3.osl",
      "function": "mx_transformmatrix_vector2M3",
      "nodedef": "ND_transformmatrix_vector2M3",
      "target": "genosl"
    },
    "implementation:IM_transformmatrix_vector3M4_genglsl": {
      "file": "mx_transformmatrix_vector3M4.glsl",
      "function": "mx_transformmatrix_vector3M4",
      "nodedef": "ND_transformmatrix_vector3M4",
      "target": "genglsl"
    },
    "implementation:IM_transformmatrix_vector3M4_genmdl": {
      "nodedef": "ND_transformmatrix_vector3M4",
      "sourcecode": "mx::stdlib::mx_transformmatrix_vector3M4({{in}}, {{mat}})",
      "target": "genmdl"
    },
    "implementation:IM_transformmatrix_vector3M4_genmsl": {
      "file": "../genglsl/mx_transformmatrix_vector3M4.glsl",
      "function": "mx_transformmatrix_vector3M4",
      "nodedef": "ND_transformmatrix_vector3M4",
      "target": "genmsl"
    },
    "implementation:IM_transformmatrix_vector3M4_genosl": {
      "nodedef": "ND_transformmatrix_vector3M4",
      "sourcecode": "transform({{mat}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_transformmatrix_vector3_genglsl": {
      "nodedef": "ND_transformmatrix_vector3",
      "sourcecode": "{{mat}} * {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_transformmatrix_vector3_genmdl": {
      "nodedef": "ND_transformmatrix_vector3",
      "sourcecode": "mx::stdlib::mx_transformmatrix_vector3({{in}}, {{mat}})",
      "target": "genmdl"
    },
    "implementation:IM_transformmatrix_vector3_genmsl": {
      "nodedef": "ND_transformmatrix_vector3",
      "sourcecode": "{{mat}} * {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_transformmatrix_vector3_genosl": {
      "nodedef": "ND_transformmatrix_vector3",
      "sourcecode": "transform({{mat}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_transformmatrix_vector4_genglsl": {
      "nodedef": "ND_transformmatrix_vector4",
      "sourcecode": "{{mat}} * {{in}}",
      "target": "genglsl"
    },
    "implementation:IM_transformmatrix_vector4_genmdl": {
      "nodedef": "ND_transformmatrix_vector4",
      "sourcecode": "mx::stdlib::mx_transformmatrix_vector4({{in}}, {{mat}})",
      "target": "genmdl"
    },
    "implementation:IM_transformmatrix_vector4_genmsl": {
      "nodedef": "ND_transformmatrix_vector4",
      "sourcecode": "{{mat}} * {{in}}",
      "target": "genmsl"
    },
    "implementation:IM_transformmatrix_vector4_genosl": {
      "nodedef": "ND_transformmatrix_vector4",
      "sourcecode": "transform({{mat}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_transformnormal_vector3_genglsl": {
      "nodedef": "ND_transformnormal_vector3",
      "target": "genglsl"
    },
    "implementation:IM_transformnormal_vector3_genmdl": {
      "nodedef": "ND_transformnormal_vector3",
      "sourcecode": "mx::stdlib::mx_transformnormal_vector3({{in}}, {{fromspace}}, {{tospace}})",
      "target": "genmdl"
    },
    "implementation:IM_transformnormal_vector3_genmsl": {
      "nodedef": "ND_transformnormal_vector3",
      "target": "genmsl"
    },
    "implementation:IM_transformnormal_vector3_genosl": {
      "nodedef": "ND_transformnormal_vector3",
      "sourcecode": "transform({{fromspace}}, {{tospace}}, normal({{in}}))",
      "target": "genosl"
    },
    "implementation:IM_transformpoint_vector3_genglsl": {
      "nodedef": "ND_transformpoint_vector3",
      "target": "genglsl"
    },
    "implementation:IM_transformpoint_vector3_genmdl": {
      "nodedef": "ND_transformpoint_vector3",
      "sourcecode": "mx::stdlib::mx_transformpoint_vector3({{in}}, {{fromspace}}, {{tospace}})",
      "target": "genmdl"
    },
    "implementation:IM_transformpoint_vector3_genmsl": {
      "nodedef": "ND_transformpoint_vector3",
      "target": "genmsl"
    },
    "implementation:IM_transformpoint_vector3_genosl": {
      "nodedef": "ND_transformpoint_vector3",
      "sourcecode": "transform({{fromspace}}, {{tospace}}, point({{in}}))",
      "target": "genosl"
    },
    "implementation:IM_transformvector_vector3_genglsl": {
      "nodedef": "ND_transformvector_vector3",
      "target": "genglsl"
    },
    "implementation:IM_transformvector_vector3_genmdl": {
      "nodedef": "ND_transformvector_vector3",
      "sourcecode": "mx::stdlib::mx_transformvector_vector3({{in}}, {{fromspace}}, {{tospace}})",
      "target": "genmdl"
    },
    "implementation:IM_transformvector_vector3_genmsl": {
      "nodedef": "ND_transformvector_vector3",
      "target": "genmsl"
    },
    "implementation:IM_transformvector_vector3_genosl": {
      "nodedef": "ND_transformvector_vector3",
      "sourcecode": "transform({{fromspace}}, {{tospace}}, {{in}})",
      "target": "genosl"
    },
    "implementation:IM_translucent_bsdf_genglsl": {
      "file": "mx_translucent_bsdf.glsl",
      "function": "mx_translucent_bsdf",
      "nodedef": "ND_translucent_bsdf",
      "target": "genglsl"
    },
    "implementation:IM_translucent_bsdf_genmdl": {
      "nodedef": "ND_translucent_bsdf",
      "sourcecode": "mx::pbrlib::mx_translucent_bsdf(mxp_weight:{{weight}}, mxp_color:{{color}}, mxp_normal:{{normal}})",
      "target": "genmdl"
    },
    "implementation:IM_translucent_bsdf_genmsl": {
      "file": "../genglsl/mx_translucent_bsdf.glsl",
      "function": "mx_translucent_bsdf",
      "nodedef": "ND_translucent_bsdf",
      "target": "genmsl"
    },
    "implementation:IM_translucent_bsdf_genosl": {
      "file": "legacy/mx_translucent_bsdf.osl",
      "function": "mx_translucent_bsdf",
      "nodedef": "ND_translucent_bsdf",
      "target": "genosl"
    },
    "implementation:IM_transpose_matrix33_genglsl": {
      "nodedef": "ND_transpose_matrix33",
      "sourcecode": "transpose({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_transpose_matrix33_genmdl": {
      "nodedef": "ND_transpose_matrix33",
      "sourcecode": "math::transpose({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_transpose_matrix33_genmsl": {
      "nodedef": "ND_transpose_matrix33",
      "sourcecode": "transpose({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_transpose_matrix33_genosl": {
      "nodedef": "ND_transpose_matrix33",
      "sourcecode": "transpose({{in}})",
      "target": "genosl"
    },
    "implementation:IM_transpose_matrix44_genglsl": {
      "nodedef": "ND_transpose_matrix44",
      "sourcecode": "transpose({{in}})",
      "target": "genglsl"
    },
    "implementation:IM_transpose_matrix44_genmdl": {
      "nodedef": "ND_transpose_matrix44",
      "sourcecode": "math::transpose({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_transpose_matrix44_genmsl": {
      "nodedef": "ND_transpose_matrix44",
      "sourcecode": "transpose({{in}})",
      "target": "genmsl"
    },
    "implementation:IM_transpose_matrix44_genosl": {
      "nodedef": "ND_transpose_matrix44",
      "sourcecode": "transpose({{in}})",
      "target": "genosl"
    },
    "implementation:IM_uniform_edf_genglsl": {
      "file": "mx_uniform_edf.glsl",
      "function": "mx_uniform_edf",
      "nodedef": "ND_uniform_edf",
      "target": "genglsl"
    },
    "implementation:IM_uniform_edf_genmdl": {
      "nodedef": "ND_uniform_edf",
      "sourcecode": "mx::pbrlib::mx_uniform_edf(mxp_color:{{color}})",
      "target": "genmdl"
    },
    "implementation:IM_uniform_edf_genmsl": {
      "file": "../genglsl/mx_uniform_edf.glsl",
      "function": "mx_uniform_edf",
      "nodedef": "ND_uniform_edf",
      "target": "genmsl"
    },
    "implementation:IM_uniform_edf_genosl": {
      "nodedef": "ND_uniform_edf",
      "sourcecode": "{{color}} * emission()",
      "target": "genosl"
    },
    "implementation:IM_unpremult_color4_genglsl": {
      "file": "mx_unpremult_color4.glsl",
      "function": "mx_unpremult_color4",
      "nodedef": "ND_unpremult_color4",
      "target": "genglsl"
    },
    "implementation:IM_unpremult_color4_genmdl": {
      "nodedef": "ND_unpremult_color4",
      "sourcecode": "mx::stdlib::mx_unpremult_color4({{in}})",
      "target": "genmdl"
    },
    "implementation:IM_unpremult_color4_genmsl": {
      "file": "../genglsl/mx_unpremult_color4.glsl",
      "function": "mx_unpremult_color4",
      "nodedef": "ND_unpremult_color4",
      "target": "genmsl"
    },
    "implementation:IM_unpremult_color4_genosl": {
      "file": "mx_unpremult_color4.osl",
      "function": "mx_unpremult_color4",
      "nodedef": "ND_unpremult_color4",
      "target": "genosl"
    },
    "implementation:IM_volume_genmdl": {
      "nodedef": "ND_volume",
      "sourcecode": "mx::pbrlib::mx_volume(mxp_vdf:{{vdf}}, mxp_edf:{{edf}})",
      "target": "genmdl"
    },
    "implementation:IM_worleynoise2d_float_genglsl": {
      "file": "mx_worleynoise2d_float.glsl",
      "function": "mx_worleynoise2d_float",
      "nodedef": "ND_worleynoise2d_float",
      "target": "genglsl"
    },
    "implementation:IM_worleynoise2d_float_genmdl": {
      "nodedef": "ND_worleynoise2d_float",
      "sourcecode": "mx::stdlib::mx_worleynoise2d_float(mxp_texcoord:{{texcoord}}, mxp_jitter:{{jitter}})",
      "target": "genmdl"
    },
    "implementation:IM_worleynoise2d_float_genmsl": {
      "file": "../genglsl/mx_worleynoise2d_float.glsl",
      "function": "mx_worleynoise2d_float",
      "nodedef": "ND_worleynoise2d_float",
      "target": "genmsl"
    },
    "implementation:IM_worleynoise2d_float_genosl": {
      "file": "mx_worleynoise2d_float.osl",
      "function": "mx_worleynoise2d_float",
      "nodedef": "ND_worleynoise2d_float",
      "target": "genosl"
    },
    "implementation:IM_worleynoise2d_vector2_genglsl": {
      "file": "mx_worleynoise2d_vector2.glsl",
      "function": "mx_worleynoise2d_vector2",
      "nodedef": "ND_worleynoise2d_vector2",
      "target": "genglsl"
    },
    "implementation:IM_worleynoise2d_vector2_genmdl": {
      "nodedef": "ND_worleynoise2d_vector2",
      "sourcecode": "mx::stdlib::mx_worleynoise2d_float2(mxp_texcoord:{{texcoord}}, mxp_jitter:{{jitter}})",
      "target": "genmdl"
    },
    "implementation:IM_worleynoise2d_vector2_genmsl": {
      "file": "../genglsl/mx_worleynoise2d_vector2.glsl",
      "function": "mx_worleynoise2d_vector2",
      "nodedef": "ND_worleynoise2d_vector2",
      "target": "genmsl"
    },
    "implementation:IM_worleynoise2d_vector2_genosl": {
      "file": "mx_worleynoise2d_vector2.osl",
      "function": "mx_worleynoise2d_vector2",
      "nodedef": "ND_worleynoise2d_vector2",
      "target": "genosl"
    },
    "implementation:IM_worleynoise2d_vector3_genglsl": {
      "file": "mx_worleynoise2d_vector3.glsl",
      "function": "mx_worleynoise2d_vector3",
      "nodedef": "ND_worleynoise2d_vector3",
      "target": "genglsl"
    },
    "implementation:IM_worleynoise2d_vector3_genmdl": {
      "nodedef": "ND_worleynoise2d_vector3",
      "sourcecode": "mx::stdlib::mx_worleynoise2d_float3(mxp_texcoord:{{texcoord}}, mxp_jitter:{{jitter}})",
      "target": "genmdl"
    },
    "implementation:IM_worleynoise2d_vector3_genmsl": {
      "file": "../genglsl/mx_worleynoise2d_vector3.glsl",
      "function": "mx_worleynoise2d_vector3",
      "nodedef": "ND_worleynoise2d_vector3",
      "target": "genmsl"
    },
    "implementation:IM_worleynoise2d_vector3_genosl": {
      "file": "mx_worleynoise2d_vector3.osl",
      "function": "mx_worleynoise2d_vector3",
      "nodedef": "ND_worleynoise2d_vector3",
      "target": "genosl"
    },
    "implementation:IM_worleynoise3d_float_genglsl": {
      "file": "mx_worleynoise3d_float.glsl",
      "function": "mx_worleynoise3d_float",
      "nodedef": "ND_worleynoise3d_float",
      "target": "genglsl"
    },
    "implementation:IM_worleynoise3d_float_genmdl": {
      "nodedef": "ND_worleynoise3d_float",
      "sourcecode": "mx::stdlib::mx_worleynoise3d_float(mxp_position:{{position}}, mxp_jitter:{{jitter}})",
      "target": "genmdl"
    },
    "implementation:IM_worleynoise3d_float_genmsl": {
      "file": "../genglsl/mx_worleynoise3d_float.glsl",
      "function": "mx_worleynoise3d_float",
      "nodedef": "ND_worleynoise3d_float",
      "target": "genmsl"
    },
    "implementation:IM_worleynoise3d_float_genosl": {
      "file": "mx_worleynoise3d_float.osl",
      "function": "mx_worleynoise3d_float",
      "nodedef": "ND_worleynoise3d_float",
      "target": "genosl"
    },
    "implementation:IM_worleynoise3d_vector2_genglsl": {
      "file": "mx_worleynoise3d_vector2.glsl",
      "function": "mx_worleynoise3d_vector2",
      "nodedef": "ND_worleynoise3d_vector2",
      "target": "genglsl"
    },
    "implementation:IM_worleynoise3d_vector2_genmdl": {
      "nodedef": "ND_worleynoise3d_vector2",
      "sourcecode": "mx::stdlib::mx_worleynoise3d_float2(mxp_position:{{position}}, mxp_jitter:{{jitter}})",
      "target": "genmdl"
    },
    "implementation:IM_worleynoise3d_vector2_genmsl": {
      "file": "../genglsl/mx_worleynoise3d_vector2.glsl",
      "function": "mx_worleynoise3d_vector2",
      "nodedef": "ND_worleynoise3d_vector2",
      "target": "genmsl"
    },
    "implementation:IM_worleynoise3d_vector2_genosl": {
      "file": "mx_worleynoise3d_vector2.osl",
      "function": "mx_worleynoise3d_vector2",
      "nodedef": "ND_worleynoise3d_vector2",
      "target": "genosl"
    },
    "implementation:IM_worleynoise3d_vector3_genglsl": {
      "file": "mx_worleynoise3d_vector3.glsl",
      "function": "mx_worleynoise3d_vector3",
      "nodedef": "ND_worleynoise3d_vector3",
      "target": "genglsl"
    },
    "implementation:IM_worleynoise3d_vector3_genmdl": {
      "nodedef": "ND_worleynoise3d_vector3",
      "sourcecode": "mx::stdlib::mx_worleynoise3d_float3(mxp_position:{{position}}, mxp_jitter:{{jitter}})",
      "target": "genmdl"
    },
    "implementation:IM_worleynoise3d_vector3_genmsl": {
      "file": "../genglsl/mx_worleynoise3d_vector3.glsl",
      "function": "mx_worleynoise3d_vector3",
      "nodedef": "ND_worleynoise3d_vector3",
      "target": "genmsl"
    },
    "implementation:IM_worleynoise3d_vector3_genosl": {
      "file": "mx_worleynoise3d_vector3.osl",
      "function": "mx_worleynoise3d_vector3",
      "nodedef": "ND_worleynoise3d_vector3",
      "target": "genosl"
    },
    "implementation:MayaIM_arbitrarytangents_vector3_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_arbitrarytangents_vector3.glsl",
      "function": "mx_arbitrarytangents_vector3",
      "nodedef": "MayaND_arbitrarytangents_vector3",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoACES2065_color3_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_aces_2065_1_color3.glsl",
      "function": "mx_srgb_texture_to_aces_2065_1_color3",
      "nodedef": "MayaND_sRGBtoACES2065_color3",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoACES2065_color4_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_aces_2065_1_color4.glsl",
      "function": "mx_srgb_texture_to_aces_2065_1_color4",
      "nodedef": "MayaND_sRGBtoACES2065_color4",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoACEScg_color3_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_acescg_color3.glsl",
      "function": "mx_srgb_texture_to_acescg_color3",
      "nodedef": "MayaND_sRGBtoACEScg_color3",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoACEScg_color4_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_acescg_color4.glsl",
      "function": "mx_srgb_texture_to_acescg_color4",
      "nodedef": "MayaND_sRGBtoACEScg_color4",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoLinDCIP3D65_color3_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_lin_dci_p3_d65_color3.glsl",
      "function": "mx_srgb_texture_to_lin_dci_p3_d65_color3",
      "nodedef": "MayaND_sRGBtoLinDCIP3D65_color3",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoLinDCIP3D65_color4_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_lin_dci_p3_d65_color4.glsl",
      "function": "mx_srgb_texture_to_lin_dci_p3_d65_color4",
      "nodedef": "MayaND_sRGBtoLinDCIP3D65_color4",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoLinrec2020_color3_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_linrec2020_color3.glsl",
      "function": "mx_srgb_texture_to_linrec2020_color3",
      "nodedef": "MayaND_sRGBtoLinrec2020_color3",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoLinrec2020_color4_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_srgb_texture_to_linrec2020_color4.glsl",
      "function": "mx_srgb_texture_to_linrec2020_color4",
      "nodedef": "MayaND_sRGBtoLinrec2020_color4",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoLinrec709_color3_genglsl": {
      "file": "libraries/stdlib/genglsl/mx_srgb_texture_to_lin_rec709_color3.glsl",
      "function": "mx_srgb_texture_to_lin_rec709_color3",
      "nodedef": "MayaND_sRGBtoLinrec709_color3",
      "target": "genglsl"
    },
    "implementation:MayaIM_sRGBtoLinrec709_color4_genglsl": {
      "file": "libraries/stdlib/genglsl/mx_srgb_texture_to_lin_rec709_color4.glsl",
      "function": "mx_srgb_texture_to_lin_rec709_color4",
      "nodedef": "MayaND_sRGBtoLinrec709_color4",
      "target": "genglsl"
    },
    "implementation:MayaIM_texcoordtangents_vector3_genglsl": {
      "file": "libraries/adsk/maya/genglsl/mx_texcoordtangents_vector3.glsl",
      "function": "mx_texcoordtangents_vector3",
      "nodedef": "MayaND_texcoordtangents_vector3",
      "target": "genglsl"
    },
    "nodedef:LdkND_ColorCorrect_color4": {
      "doc": "Color correct from Maya LookdevKit",
      "input:alphaClamp": {
        "type": "boolean",
        "uifolder": "Clamp Output",
        "uiname": "Clamp Alpha",
        "value": "false"
      },
      "input:alphaClampMax": {
        "type": "float",
        "uifolder": "Clamp Output",
        "uiname": "Max Alpha",
        "value": "1.0"
      },
      "input:alphaClampMin": {
        "type": "float",
        "uifolder": "Clamp Output",
        "uiname": "Min Alpha",
        "value": "0.0"
      },
      "input:alphaGain": {
        "type": "float",
        "uifolder": "Alpha Correct",
        "uimin": "0.0",
        "uiname": "Alpha Gain",
        "uisoftmax": "1.0",
        "value": "1.0"
      },
      "input:alphaGamma": {
        "type": "float",
        "uifolder": "Alpha Correct",
        "uimin": "0.0",
        "uiname": "Gamma",
        "uisoftmax": "5.0",
        "value": "1.0"
      },
      "input:alphaOffset": {
        "type": "float",
        "uifolder": "Alpha Correct",
        "uimin": "0.0",
        "uiname": "Alpha Offset",
        "uisoftmax": "1.0",
        "value": "0.0"
      },
      "input:colClamp": {
        "type": "boolean",
        "uifolder": "Clamp Output",
        "uiname": "Clamp Color",
        "value": "false"
      },
      "input:colClampMax": {
        "type": "color3",
        "uifolder": "Clamp Output",
        "uiname": "Max Color",
        "value": "1.0, 1.0, 1.0"
      },
      "input:colClampMin": {
        "type": "color3",
        "uifolder": "Clamp Output",
        "uiname": "Min Color",
        "value": "0.0, 0.0, 0.0"
      },
      "input:colGain": {
        "type": "color3",
        "uifolder": "Color Correct",
        "uiname": "Color Gain",
        "value": "1.0, 1.0, 1.0"
      },
      "input:colGamma": {
        "type": "vector3",
        "uifolder": "Color Correct",
        "uiname": "Gamma",
        "value": "1.0, 1.0, 1.0"
      },
      "input:colOffset": {
        "type": "color3",
        "uifolder": "Color Correct",
        "uiname": "Color Offset",
        "value": "0.0, 0.0, 0.0"
      },
      "input:hueShift": {
        "type": "float",
        "uifolder": "Color Correct",
        "uimin": "0.0",
        "uiname": "Hue Shift",
        "uisoftmax": "360.0",
        "value": "0.0"
      },
      "input:inAlpha": {
        "type": "float",
        "uifolder": "Inputs",
        "uiname": "Alpha",
        "value": "1.0"
      },
      "input:inColor": {
        "type": "color3",
        "uifolder": "Inputs",
        "uiname": "Color",
        "value": "0.3, 0.3, 0.3"
      },
      "input:premultiplyResult": {
        "type": "boolean",
        "uifolder": "Premultiply",
        "uiname": "Premultiply Result",
        "value": "false"
      },
      "input:satGain": {
        "type": "float",
        "uifolder": "Color Correct",
        "uimin": "0.0",
        "uiname": "Saturation",
        "uisoftmax": "1.0",
        "value": "1.0"
      },
      "input:unpremultiplyInput": {
        "type": "boolean",
        "uifolder": "Premultiply",
        "uiname": "Unpremultiply Input",
        "value": "false"
      },
      "input:valGain": {
        "type": "float",
        "uifolder": "Color Correct",
        "uimin": "0.0",
        "uiname": "Value",
        "uisoftmax": "1.0",
        "value": "1.0"
      },
      "isdefaultversion": "true",
      "node": "LdkColorCorrect",
      "nodegroup": "adjustment",
      "output:outColor": {
        "type": "color4"
      },
      "version": "1.0"
    },
    "nodedef:LdkND_FloatCorrect_float": {
      "doc": "Float correct from Maya LookdevKit",
      "input:clampMax": {
        "type": "float",
        "uifolder": "Float Correct",
        "uimin": "0.0",
        "uiname": "Max",
        "uisoftmax": "1.0",
        "value": "1.0"
      },
      "input:clampMin": {
        "type": "float",
        "uifolder": "Float Correct",
        "uimin": "0.0",
        "uiname": "Min",
        "uisoftmax": "1.0",
        "value": "0.0"
      },
      "input:clampOutput": {
        "type": "boolean",
        "uifolder": "Float Correct",
        "uiname": "Clamp Output",
        "value": "false"
      },
      "input:gain": {
        "type": "float",
        "uifolder": "Float Correct",
        "uimin": "0.0",
        "uiname": "Gain",
        "uisoftmax": "1.0",
        "value": "1.0"
      },
      "input:gammaScale": {
        "type": "float",
        "uifolder": "Float Correct",
        "uimin": "0.0",
        "uiname": "Gamma",
        "uisoftmax": "5.0",
        "value": "1.0"
      },
      "input:inFloat": {
        "type": "float",
        "uifolder": "Inputs",
        "uiname": "Float",
        "value": "1.0"
      },
      "input:offset": {
        "type": "float",
        "uifolder": "Float Correct",
        "uimin": "0.0",
        "uiname": "Offset",
        "uisoftmax": "1.0",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LdkFloatCorrect",
      "nodegroup": "adjustment",
      "output:outFloat": {
        "type": "float"
      },
      "version": "1.0"
    },
    "nodedef:MayaND_arbitrarytangents_vector3": {
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pworld",
        "type": "vector3"
      },
      "node": "arbitrarytangents",
      "nodegroup": "math",
      "output:out": {
        "type": "vector3"
      }
    },
    "nodedef:MayaND_blinn_surfaceshader": {
      "doc": "Maya Blinn surface shader",
      "input:color": {
        "type": "color3",
        "value": "0.5, 0.5, 0.5"
      },
      "input:diffuse": {
        "type": "float",
        "value": "0.8"
      },
      "input:eccentricity": {
        "type": "float",
        "value": "0.3"
      },
      "input:incandescence": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:normalCamera": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:reflectedColor": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:reflectivity": {
        "type": "float",
        "value": "0.5"
      },
      "input:specularColor": {
        "type": "color3",
        "value": "0.5, 0.5, 0.5"
      },
      "input:specularRollOff": {
        "type": "float",
        "value": "0.7"
      },
      "input:transparency": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "isdefaultversion": "true",
      "node": "MayaBlinn",
      "nodegroup": "npbr",
      "output:outColor": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:MayaND_clamp_vector3": {
      "input:input": {
        "type": "vector3",
        "uisoftmax": "5.0, 5.0, 5.0",
        "uisoftmin": "0.0, 0.0, 0.0",
        "value": "0.0, 0.0, 0.0"
      },
      "input:max": {
        "type": "vector3",
        "uisoftmax": "1.0, 1.0, 1.0",
        "uisoftmin": "0.0, 0.0, 0.0",
        "value": "0.0, 0.0, 0.0"
      },
      "input:min": {
        "type": "vector3",
        "uisoftmax": "1.0, 1.0, 1.0",
        "uisoftmin": "0.0, 0.0, 0.0",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "MayaClamp",
      "nodegroup": "math",
      "output:output": {
        "type": "vector3"
      }
    },
    "nodedef:MayaND_fileTexture_color3": {
      "input:colorGain": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:colorOffset": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:colorSpace": {
        "type": "string"
      },
      "input:defaultColor": {
        "type": "color3",
        "value": "0.5, 0.5, 0.5"
      },
      "input:exposure": {
        "type": "float",
        "value": "0"
      },
      "input:inColor": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:invert": {
        "type": "boolean",
        "value": "false"
      },
      "input:uvCoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "fileTexture",
      "nodegroup": "procedural2d",
      "output:outColor": {
        "type": "color3"
      }
    },
    "nodedef:MayaND_fileTexture_color4": {
      "input:colorGain": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:colorOffset": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:colorSpace": {
        "type": "string"
      },
      "input:defaultColor": {
        "type": "color4",
        "value": "0.5, 0.5, 0.5, 1.0"
      },
      "input:exposure": {
        "type": "float",
        "value": "0"
      },
      "input:inColor": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:invert": {
        "type": "boolean",
        "value": "false"
      },
      "input:uvCoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "fileTexture",
      "nodegroup": "procedural2d",
      "output:outColor": {
        "type": "color4"
      }
    },
    "nodedef:MayaND_fileTexture_float": {
      "input:colorGain": {
        "type": "float",
        "value": "1.0"
      },
      "input:colorOffset": {
        "type": "float",
        "value": "0.0"
      },
      "input:colorSpace": {
        "type": "string"
      },
      "input:defaultColor": {
        "type": "float",
        "value": "0.5"
      },
      "input:exposure": {
        "type": "float",
        "value": "0"
      },
      "input:inColor": {
        "type": "float",
        "value": "0.0"
      },
      "input:invert": {
        "type": "boolean",
        "value": "false"
      },
      "input:uvCoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "fileTexture",
      "nodegroup": "procedural2d",
      "output:outColor": {
        "type": "float"
      }
    },
    "nodedef:MayaND_fileTexture_vector2": {
      "input:colorGain": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:colorOffset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:colorSpace": {
        "type": "string"
      },
      "input:defaultColor": {
        "type": "vector2",
        "value": "0.5, 0.5"
      },
      "input:exposure": {
        "type": "float",
        "value": "0"
      },
      "input:inColor": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:invert": {
        "type": "boolean",
        "value": "false"
      },
      "input:uvCoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "fileTexture",
      "nodegroup": "procedural2d",
      "output:outColor": {
        "type": "vector2"
      }
    },
    "nodedef:MayaND_fileTexture_vector3": {
      "input:colorGain": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:colorOffset": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:colorSpace": {
        "type": "string"
      },
      "input:defaultColor": {
        "type": "vector3",
        "value": "0.5, 0.5, 0.5"
      },
      "input:exposure": {
        "type": "float",
        "value": "0"
      },
      "input:inColor": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:invert": {
        "type": "boolean",
        "value": "false"
      },
      "input:uvCoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "fileTexture",
      "nodegroup": "procedural2d",
      "output:outColor": {
        "type": "vector3"
      }
    },
    "nodedef:MayaND_fileTexture_vector4": {
      "input:colorGain": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:colorOffset": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:colorSpace": {
        "type": "string"
      },
      "input:defaultColor": {
        "type": "vector4",
        "value": "0.5, 0.5, 0.5, 0.5"
      },
      "input:exposure": {
        "type": "float",
        "value": "0"
      },
      "input:inColor": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:invert": {
        "type": "boolean",
        "value": "false"
      },
      "input:uvCoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "fileTexture",
      "nodegroup": "procedural2d",
      "output:outColor": {
        "type": "vector4"
      }
    },
    "nodedef:MayaND_lambert_surfaceshader": {
      "doc": "Maya Lambert surface shader",
      "input:color": {
        "type": "color3",
        "value": "0.5, 0.5, 0.5"
      },
      "input:diffuse": {
        "type": "float",
        "value": "0.8"
      },
      "input:incandescence": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:normalCamera": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:transparency": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "isdefaultversion": "true",
      "node": "MayaLambert",
      "nodegroup": "npbr",
      "output:outColor": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:MayaND_linearUV_float": {
      "input:coverage": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:offset": {
        "type": "float",
        "value": "0.0"
      },
      "input:repeat": {
        "type": "float",
        "value": "1.0"
      },
      "input:translateFrame": {
        "type": "float",
        "value": "0.0"
      },
      "input:wrap": {
        "type": "boolean",
        "value": "true"
      },
      "node": "linearUV",
      "nodegroup": "math",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:MayaND_mirrorUV_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:mirror": {
        "type": "boolean",
        "value": "false"
      },
      "node": "mirrorUV",
      "nodegroup": "math",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:MayaND_noiseUV_vector2": {
      "input:inUV": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:noiseUV": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "noiseUV",
      "nodegroup": "math",
      "output:outUV": {
        "type": "vector2"
      }
    },
    "nodedef:MayaND_phong_surfaceshader": {
      "doc": "Maya Phong surface shader",
      "input:color": {
        "type": "color3",
        "value": "0.5, 0.5, 0.5"
      },
      "input:cosinePower": {
        "type": "float",
        "value": "20.0"
      },
      "input:diffuse": {
        "type": "float",
        "value": "0.8"
      },
      "input:incandescence": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:normalCamera": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:reflectedColor": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:reflectivity": {
        "type": "float",
        "value": "0.5"
      },
      "input:specularColor": {
        "type": "color3",
        "value": "0.5, 0.5, 0.5"
      },
      "input:transparency": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "isdefaultversion": "true",
      "node": "MayaPhong",
      "nodegroup": "npbr",
      "output:outColor": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:MayaND_place2dTexture_vector2": {
      "input:coverage": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:mirrorU": {
        "type": "boolean",
        "value": "false"
      },
      "input:mirrorV": {
        "type": "boolean",
        "value": "false"
      },
      "input:noiseUV": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:offset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:repeatUV": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:rotateFrame": {
        "type": "float",
        "unit": "radian",
        "unittype": "angle",
        "value": "0.0"
      },
      "input:rotateUV": {
        "type": "float",
        "unit": "radian",
        "unittype": "angle",
        "value": "0.0"
      },
      "input:stagger": {
        "type": "boolean",
        "value": "false"
      },
      "input:translateFrame": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:uvCoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:wrapU": {
        "type": "boolean",
        "value": "true"
      },
      "input:wrapV": {
        "type": "boolean",
        "value": "true"
      },
      "node": "place2dTexture",
      "nodegroup": "math",
      "output:outUV": {
        "type": "vector2"
      }
    },
    "nodedef:MayaND_rotateUV_vector2": {
      "input:inUV": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:rotation": {
        "type": "float",
        "unit": "radian",
        "unittype": "angle",
        "value": "0.0"
      },
      "node": "rotateUV",
      "nodegroup": "math",
      "output:outUV": {
        "type": "vector2"
      }
    },
    "nodedef:MayaND_sRGBtoACES2065_color3": {
      "input:in": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "node": "sRGBtoACES2065",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:MayaND_sRGBtoACES2065_color4": {
      "input:in": {
        "type": "color4",
        "value": "0, 0, 0, 1"
      },
      "node": "sRGBtoACES2065",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:MayaND_sRGBtoACEScg_color3": {
      "input:in": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "node": "sRGBtoACEScg",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:MayaND_sRGBtoACEScg_color4": {
      "input:in": {
        "type": "color4",
        "value": "0, 0, 0, 1"
      },
      "node": "sRGBtoACEScg",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:MayaND_sRGBtoLinDCIP3D65_color3": {
      "input:in": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "node": "sRGBtoLinDCIP3D65",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:MayaND_sRGBtoLinDCIP3D65_color4": {
      "input:in": {
        "type": "color4",
        "value": "0, 0, 0, 1"
      },
      "node": "sRGBtoLinDCIP3D65",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:MayaND_sRGBtoLinrec2020_color3": {
      "input:in": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "node": "sRGBtoLinrec2020",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:MayaND_sRGBtoLinrec2020_color4": {
      "input:in": {
        "type": "color4",
        "value": "0, 0, 0, 1"
      },
      "node": "sRGBtoLinrec2020",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:MayaND_sRGBtoLinrec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "node": "sRGBtoLinrec709",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:MayaND_sRGBtoLinrec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0, 0, 0, 1"
      },
      "node": "sRGBtoLinrec709",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:MayaND_texcoordtangents_vector3": {
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pworld",
        "type": "vector3"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "texcoordtangents",
      "nodegroup": "math",
      "output:out": {
        "type": "vector3"
      }
    },
    "nodedef:ND_UsdPreviewSurface_surfaceshader": {
      "doc": "USD preview surface shader",
      "input:clearcoat": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0"
      },
      "input:clearcoatRoughness": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.01"
      },
      "input:diffuseColor": {
        "type": "color3",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "value": "0.18, 0.18, 0.18"
      },
      "input:displacement": {
        "type": "float",
        "value": "0"
      },
      "input:emissiveColor": {
        "type": "color3",
        "uimin": "0,0,0",
        "uisoftmax": "1,1,1",
        "value": "0, 0, 0"
      },
      "input:ior": {
        "type": "float",
        "uimin": "0.0",
        "uisoftmax": "3.0",
        "uisoftmin": "1.0",
        "value": "1.5"
      },
      "input:metallic": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0"
      },
      "input:normal": {
        "type": "vector3",
        "value": "0, 0, 1"
      },
      "input:occlusion": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1"
      },
      "input:opacity": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1"
      },
      "input:opacityThreshold": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0"
      },
      "input:roughness": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.5"
      },
      "input:specularColor": {
        "type": "color3",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "value": "0, 0, 0"
      },
      "input:useSpecularWorkflow": {
        "type": "integer",
        "value": "0"
      },
      "isdefaultversion": "true",
      "node": "UsdPreviewSurface",
      "nodegroup": "pbr",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "2.3"
    },
    "nodedef:ND_UsdPrimvarReader_boolean": {
      "input:fallback": {
        "type": "boolean",
        "value": "false"
      },
      "input:varname": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "UsdPrimvarReader",
      "nodegroup": "geometric",
      "output:out": {
        "type": "boolean"
      }
    },
    "nodedef:ND_UsdPrimvarReader_float": {
      "input:fallback": {
        "type": "float",
        "value": "0"
      },
      "input:varname": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "UsdPrimvarReader",
      "nodegroup": "geometric",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_UsdPrimvarReader_integer": {
      "input:fallback": {
        "type": "integer",
        "value": "0"
      },
      "input:varname": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "UsdPrimvarReader",
      "nodegroup": "geometric",
      "output:out": {
        "type": "integer"
      }
    },
    "nodedef:ND_UsdPrimvarReader_string": {
      "input:fallback": {
        "type": "string",
        "value": ""
      },
      "input:varname": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "UsdPrimvarReader",
      "nodegroup": "geometric",
      "output:out": {
        "type": "string"
      }
    },
    "nodedef:ND_UsdPrimvarReader_vector2": {
      "input:fallback": {
        "type": "vector2",
        "value": "0, 0"
      },
      "input:varname": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "UsdPrimvarReader",
      "nodegroup": "geometric",
      "output:out": {
        "type": "vector2"
      }
    },
    "nodedef:ND_UsdPrimvarReader_vector3": {
      "input:fallback": {
        "type": "vector3",
        "value": "0, 0, 0"
      },
      "input:varname": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "UsdPrimvarReader",
      "nodegroup": "geometric",
      "output:out": {
        "type": "vector3"
      }
    },
    "nodedef:ND_UsdPrimvarReader_vector4": {
      "input:fallback": {
        "type": "vector4",
        "value": "0, 0, 0, 0"
      },
      "input:varname": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "UsdPrimvarReader",
      "nodegroup": "geometric",
      "output:out": {
        "type": "vector4"
      }
    },
    "nodedef:ND_UsdTransform2d": {
      "input:in": {
        "type": "vector2",
        "value": "0, 0"
      },
      "input:rotation": {
        "type": "float",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "value": "1, 1"
      },
      "input:translation": {
        "type": "vector2",
        "value": "0, 0"
      },
      "node": "UsdTransform2d",
      "nodegroup": "math",
      "output:out": {
        "type": "vector2"
      }
    },
    "nodedef:ND_UsdUVTexture": {
      "inherit": "ND_UsdUVTexture_23",
      "node": "UsdUVTexture",
      "nodegroup": "texture2d",
      "output:a": {
        "type": "float"
      },
      "output:b": {
        "type": "float"
      },
      "output:g": {
        "type": "float"
      },
      "output:r": {
        "type": "float"
      },
      "output:rgb": {
        "type": "color3"
      },
      "output:rgba": {
        "type": "color4"
      },
      "version": "2.2"
    },
    "nodedef:ND_UsdUVTexture_23": {
      "input:bias": {
        "type": "color4",
        "uniform": "true",
        "value": "0, 0, 0, 0"
      },
      "input:fallback": {
        "type": "color4",
        "value": "0, 0, 0, 1"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:scale": {
        "type": "color4",
        "uniform": "true",
        "value": "1, 1, 1, 1"
      },
      "input:st": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:wrapS": {
        "enum": "black,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "input:wrapT": {
        "enum": "black,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "UsdUVTexture",
      "nodegroup": "texture2d",
      "output:a": {
        "type": "float"
      },
      "output:b": {
        "type": "float"
      },
      "output:g": {
        "type": "float"
      },
      "output:r": {
        "type": "float"
      },
      "output:rgb": {
        "type": "color3"
      },
      "version": "2.3"
    },
    "nodedef:ND_absorption_vdf": {
      "doc": "Constructs a VDF for pure light absorption.",
      "input:absorption": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "absorption_vdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "VDF"
      }
    },
    "nodedef:ND_absval_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "absval",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_absval_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "absval",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_absval_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "absval",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_absval_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "absval",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_absval_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "absval",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_absval_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "absval",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_acescg_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "acescg_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_acescg_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "acescg_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_acos_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "acos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_acos_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "acos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_acos_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "acos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_acos_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "acos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_add_bsdf": {
      "defaultinput": "bg",
      "doc": "A node for additive blending of BSDF's.",
      "input:in1": {
        "doc": "First BSDF.",
        "type": "BSDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Second BSDF.",
        "type": "BSDF",
        "value": ""
      },
      "node": "add",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_add_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_add_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_add_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_add_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_add_edf": {
      "defaultinput": "bg",
      "doc": "A node for additive blending of EDF's.",
      "input:in1": {
        "doc": "First EDF.",
        "type": "EDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Second EDF.",
        "type": "EDF",
        "value": ""
      },
      "node": "add",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_add_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_add_matrix33": {
      "input:in1": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix33",
        "value": "0.0,0.0,0.0, 0.0,0.0,0.0, 0.0,0.0,0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix33"
      }
    },
    "nodedef:ND_add_matrix33FA": {
      "input:in1": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix33"
      }
    },
    "nodedef:ND_add_matrix44": {
      "input:in1": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix44",
        "value": "0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix44"
      }
    },
    "nodedef:ND_add_matrix44FA": {
      "input:in1": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix44"
      }
    },
    "nodedef:ND_add_vdf": {
      "defaultinput": "bg",
      "doc": "A node for additive blending of VDF's.",
      "input:in1": {
        "doc": "First VDF.",
        "type": "VDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Second VDF.",
        "type": "VDF",
        "value": ""
      },
      "node": "add",
      "nodegroup": "pbr",
      "output:out": {
        "type": "VDF"
      }
    },
    "nodedef:ND_add_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_add_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_add_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_add_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_add_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_add_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "add",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_adobergb_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "adobergb_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_adobergb_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "adobergb_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_ambientocclusion_float": {
      "input:coneangle": {
        "type": "float",
        "unit": "degree",
        "unittype": "angle",
        "value": "90.0"
      },
      "input:maxdistance": {
        "type": "float",
        "value": "1e38"
      },
      "node": "ambientocclusion",
      "nodegroup": "global",
      "output:out": {
        "default": "1.0",
        "type": "float"
      }
    },
    "nodedef:ND_anisotropic_vdf": {
      "doc": "Constructs a VDF scattering light for a participating medium, based on the Henyey-Greenstein phase function.",
      "input:absorption": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:anisotropy": {
        "type": "float",
        "value": "0.0"
      },
      "input:scattering": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "anisotropic_vdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "VDF"
      }
    },
    "nodedef:ND_arrayappend_color3_color3array": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "color3array"
      }
    },
    "nodedef:ND_arrayappend_color3array_color3array": {
      "input:in1": {
        "type": "color3array",
        "value": ""
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3array"
      }
    },
    "nodedef:ND_arrayappend_color4_color4array": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "color4array"
      }
    },
    "nodedef:ND_arrayappend_color4array_color4array": {
      "input:in1": {
        "type": "color4array",
        "value": ""
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4array"
      }
    },
    "nodedef:ND_arrayappend_float_floatarray": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "floatarray"
      }
    },
    "nodedef:ND_arrayappend_floatarray_floatarray": {
      "input:in1": {
        "type": "floatarray",
        "value": ""
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "floatarray"
      }
    },
    "nodedef:ND_arrayappend_integer_integerarray": {
      "input:in1": {
        "type": "integer",
        "value": "0"
      },
      "input:in2": {
        "type": "integer",
        "value": "0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "integerarray"
      }
    },
    "nodedef:ND_arrayappend_integerarray_integerarray": {
      "input:in1": {
        "type": "integerarray",
        "value": ""
      },
      "input:in2": {
        "type": "integer",
        "value": "0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "integerarray"
      }
    },
    "nodedef:ND_arrayappend_string_stringarray": {
      "input:in1": {
        "type": "string",
        "value": ""
      },
      "input:in2": {
        "type": "string",
        "value": ""
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "stringarray"
      }
    },
    "nodedef:ND_arrayappend_stringarray_stringarray": {
      "input:in1": {
        "type": "stringarray",
        "value": ""
      },
      "input:in2": {
        "type": "string",
        "value": ""
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "stringarray"
      }
    },
    "nodedef:ND_arrayappend_vector2_vector2array": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "vector2array"
      }
    },
    "nodedef:ND_arrayappend_vector2array_vector2array": {
      "input:in1": {
        "type": "vector2array",
        "value": ""
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2array"
      }
    },
    "nodedef:ND_arrayappend_vector3_vector3array": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "vector3array"
      }
    },
    "nodedef:ND_arrayappend_vector3array_vector3array": {
      "input:in1": {
        "type": "vector3array",
        "value": ""
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3array"
      }
    },
    "nodedef:ND_arrayappend_vector4_vector4array": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "default": "[]",
        "type": "vector4array"
      }
    },
    "nodedef:ND_arrayappend_vector4array_vector4array": {
      "input:in1": {
        "type": "vector4array",
        "value": ""
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "arrayappend",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4array"
      }
    },
    "nodedef:ND_artistic_ior": {
      "doc": "Converts the artistic parameterization reflectivity and edge_color to  complex IOR values.",
      "input:edge_color": {
        "colorspace": "lin_rec709",
        "type": "color3",
        "value": "0.998, 0.981, 0.751"
      },
      "input:reflectivity": {
        "colorspace": "lin_rec709",
        "type": "color3",
        "value": "0.944, 0.776, 0.373"
      },
      "node": "artistic_ior",
      "nodegroup": "pbr",
      "output:extinction": {
        "type": "color3"
      },
      "output:ior": {
        "type": "color3"
      }
    },
    "nodedef:ND_asin_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "asin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_asin_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "asin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_asin_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "asin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_asin_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "asin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_atan2_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "atan2",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_atan2_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "atan2",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_atan2_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "atan2",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_atan2_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "atan2",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_bitangent_vector3": {
      "input:index": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:space": {
        "enum": "model,object,world",
        "type": "string",
        "uniform": "true",
        "value": "object"
      },
      "node": "bitangent",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 1.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_blackbody": {
      "doc": "Returns the radiant emittance of a blackbody radiator with the given temperature.",
      "input:temperature": {
        "type": "float",
        "value": "5000.0"
      },
      "node": "blackbody",
      "nodegroup": "pbr",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_blur_color3": {
      "input:filtertype": {
        "enum": "box,gaussian",
        "type": "string",
        "uniform": "true",
        "value": "box"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:size": {
        "type": "float",
        "value": "0.0"
      },
      "node": "blur",
      "nodegroup": "convolution2d",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_blur_color4": {
      "input:filtertype": {
        "enum": "box,gaussian",
        "type": "string",
        "uniform": "true",
        "value": "box"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:size": {
        "type": "float",
        "value": "0.0"
      },
      "node": "blur",
      "nodegroup": "convolution2d",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_blur_float": {
      "input:filtertype": {
        "enum": "box,gaussian",
        "type": "string",
        "uniform": "true",
        "value": "box"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:size": {
        "type": "float",
        "value": "0.0"
      },
      "node": "blur",
      "nodegroup": "convolution2d",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_blur_vector2": {
      "input:filtertype": {
        "enum": "box,gaussian",
        "type": "string",
        "uniform": "true",
        "value": "box"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:size": {
        "type": "float",
        "value": "0.0"
      },
      "node": "blur",
      "nodegroup": "convolution2d",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_blur_vector3": {
      "input:filtertype": {
        "enum": "box,gaussian",
        "type": "string",
        "uniform": "true",
        "value": "box"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:size": {
        "type": "float",
        "value": "0.0"
      },
      "node": "blur",
      "nodegroup": "convolution2d",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_blur_vector4": {
      "input:filtertype": {
        "enum": "box,gaussian",
        "type": "string",
        "uniform": "true",
        "value": "box"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:size": {
        "type": "float",
        "value": "0.0"
      },
      "node": "blur",
      "nodegroup": "convolution2d",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_bump_vector3": {
      "input:height": {
        "doc": "Amount to offset the surface normal.",
        "type": "float",
        "uiname": "Height",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Surface normal; defaults to the current world-space normal.",
        "type": "vector3",
        "uiname": "Normal"
      },
      "input:scale": {
        "doc": "Scalar to adjust the height amount.",
        "type": "float",
        "uiname": "Scale",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:tangent": {
        "defaultgeomprop": "Tworld",
        "doc": "Surface tangent vector, defaults to the current world-space tangent vector.",
        "type": "vector3",
        "uiname": "Tangent"
      },
      "node": "bump",
      "nodegroup": "geometric",
      "output:out": {
        "doc": "Offset surface normal; connect this to a shader's 'normal' input.",
        "type": "vector3"
      }
    },
    "nodedef:ND_burley_diffuse_bsdf": {
      "bsdf": "R",
      "doc": "A BSDF node for Burley diffuse reflections.",
      "input:color": {
        "type": "color3",
        "value": "0.18, 0.18, 0.18"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:roughness": {
        "type": "float",
        "value": "0.0"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "burley_diffuse_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_burn_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "burn",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_burn_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "burn",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_burn_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "burn",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_ceil_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ceil",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_ceil_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ceil",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_ceil_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ceil",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_ceil_integer": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ceil",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "integer"
      }
    },
    "nodedef:ND_ceil_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "ceil",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_ceil_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ceil",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_ceil_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ceil",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_cellnoise2d_float": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "cellnoise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_cellnoise3d_float": {
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "cellnoise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_checkerboard_color3": {
      "input:color1": {
        "doc": "The first color used in the checkerboard pattern.",
        "type": "color3",
        "uiname": "Color 1",
        "value": "1.0, 1.0, 1.0"
      },
      "input:color2": {
        "doc": "The second color used in the checkerboard pattern.",
        "type": "color3",
        "uiname": "Color 2",
        "value": "0.0, 0.0, 0.0"
      },
      "input:freq": {
        "doc": "The frequency of checkers, with higher values producing smaller squares. Default is (8, 8).",
        "type": "vector2",
        "uiname": "Frequency",
        "value": "8, 8"
      },
      "input:offset": {
        "doc": "Shift the pattern in 2d space. Default is (0, 0).",
        "type": "vector2",
        "uiname": "Offset",
        "value": "0, 0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "doc": "The input 2d space. Default is the first texture coordinates.",
        "type": "vector2",
        "uiname": "Texture Coordinates"
      },
      "node": "checkerboard",
      "nodegroup": "procedural2d",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_clamp_color3": {
      "input:high": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_clamp_color3FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_clamp_color4": {
      "input:high": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_clamp_color4FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_clamp_float": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_clamp_vector2": {
      "input:high": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:low": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_clamp_vector2FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_clamp_vector3": {
      "input:high": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_clamp_vector3FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_clamp_vector4": {
      "input:high": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_clamp_vector4FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "clamp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_colorcorrect_color3": {
      "input:contrast": {
        "doc": "Linearly increase or decrease the color contrast.",
        "type": "float",
        "uiname": "Contrast",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:contrastpivot": {
        "doc": "Pivot value around which contrast applies. This value will not change as contrast is adjusted.",
        "type": "float",
        "uiname": "Contrast Pivot",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.5"
      },
      "input:exposure": {
        "doc": "Multplier which increases or decreases color brightness by 2^value.",
        "type": "float",
        "uiname": "Exposure",
        "uisoftmax": "1.0",
        "uisoftmin": "-1.0",
        "value": "0"
      },
      "input:gain": {
        "doc": "Multiplier increases lighter color values, leaving black values unchanged.",
        "type": "float",
        "uiname": "Gain",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:gamma": {
        "doc": "Applies a gamma correction to the color.",
        "type": "float",
        "uiname": "Gamma",
        "uisoftmax": "3.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:hue": {
        "doc": "Rotates the color hue, with values wrapping at 0-1 boundaries.",
        "type": "float",
        "uiname": "Hue",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:in": {
        "doc": "The input color to be adjusted.",
        "type": "color3",
        "uiname": "Input Color",
        "value": "1, 1, 1"
      },
      "input:lift": {
        "doc": "Raise the dark color values, leaving the white values unchanged.",
        "type": "float",
        "uiname": "Lift",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:saturation": {
        "doc": "Adjusts the input color saturation level.",
        "type": "float",
        "uiname": "Saturation",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "node": "colorcorrect",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_colorcorrect_color4": {
      "input:contrast": {
        "doc": "Linearly increase or decrease the color contrast.",
        "type": "float",
        "uiname": "Contrast",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:contrastpivot": {
        "doc": "Pivot value around which contrast applies. This value will not change as contrast is adjusted.",
        "type": "float",
        "uiname": "Contrast Pivot",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.5"
      },
      "input:exposure": {
        "doc": "Multplier which increases or decreases color brightness by 2^value.",
        "type": "float",
        "uiname": "Exposure",
        "uisoftmax": "1.0",
        "uisoftmin": "-1.0",
        "value": "0"
      },
      "input:gain": {
        "doc": "Multiplier increases lighter color values, leaving black values unchanged.",
        "type": "float",
        "uiname": "Gain",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:gamma": {
        "doc": "Applies a gamma correction to the color.",
        "type": "float",
        "uiname": "Gamma",
        "uisoftmax": "3.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:hue": {
        "doc": "Rotates the color hue, with values wrapping at 0-1 boundaries.",
        "type": "float",
        "uiname": "Hue",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:in": {
        "doc": "The input color to be adjusted.",
        "type": "color4",
        "uiname": "Input Color",
        "value": "1, 1, 1, 0"
      },
      "input:lift": {
        "doc": "Raise the dark color values, leaving the white values unchanged.",
        "type": "float",
        "uiname": "Lift",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:saturation": {
        "doc": "Adjusts the input color saturation level.",
        "type": "float",
        "uiname": "Saturation",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "node": "colorcorrect",
      "nodegroup": "adjustment",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_combine2_color4CF": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "combine2",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_combine2_vector2": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "combine2",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_combine2_vector4VF": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "combine2",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_combine2_vector4VV": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "combine2",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_combine3_color3": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:in3": {
        "type": "float",
        "value": "0.0"
      },
      "node": "combine3",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_combine3_vector3": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:in3": {
        "type": "float",
        "value": "0.0"
      },
      "node": "combine3",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_combine4_color4": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:in3": {
        "type": "float",
        "value": "0.0"
      },
      "input:in4": {
        "type": "float",
        "value": "0.0"
      },
      "node": "combine4",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_combine4_vector4": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:in3": {
        "type": "float",
        "value": "0.0"
      },
      "input:in4": {
        "type": "float",
        "value": "0.0"
      },
      "node": "combine4",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_conductor_bsdf": {
      "bsdf": "R",
      "doc": "A reflection BSDF node based on a microfacet model and a Fresnel curve for conductors/metals.",
      "input:distribution": {
        "enum": "ggx",
        "type": "string",
        "uniform": "true",
        "value": "ggx"
      },
      "input:extinction": {
        "colorspace": "none",
        "type": "color3",
        "value": "3.424, 2.346, 1.770"
      },
      "input:ior": {
        "colorspace": "none",
        "type": "color3",
        "value": "0.183, 0.421, 1.373"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:roughness": {
        "type": "vector2",
        "value": "0.05, 0.05"
      },
      "input:tangent": {
        "defaultgeomprop": "Tworld",
        "type": "vector3"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "conductor_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_conical_edf": {
      "doc": "Constructs an EDF emitting light inside a cone around the normal direction.",
      "input:color": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:inner_angle": {
        "type": "float",
        "value": "60.0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:outer_angle": {
        "type": "float",
        "value": "0.0"
      },
      "node": "conical_edf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_constant_boolean": {
      "input:value": {
        "type": "boolean",
        "value": "false"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "false",
        "type": "boolean"
      }
    },
    "nodedef:ND_constant_color3": {
      "input:value": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_constant_color4": {
      "input:value": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_constant_filename": {
      "input:value": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "",
        "type": "filename"
      }
    },
    "nodedef:ND_constant_float": {
      "input:value": {
        "type": "float",
        "value": "0.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_constant_integer": {
      "input:value": {
        "type": "integer",
        "value": "0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "0",
        "type": "integer"
      }
    },
    "nodedef:ND_constant_matrix33": {
      "input:value": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0",
        "type": "matrix33"
      }
    },
    "nodedef:ND_constant_matrix44": {
      "input:value": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0",
        "type": "matrix44"
      }
    },
    "nodedef:ND_constant_string": {
      "input:value": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "",
        "type": "string"
      }
    },
    "nodedef:ND_constant_vector2": {
      "input:value": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_constant_vector3": {
      "input:value": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_constant_vector4": {
      "input:value": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "constant",
      "nodegroup": "procedural",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_contrast_color3": {
      "input:amount": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "color3",
        "value": "0.5, 0.5, 0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_contrast_color3FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_contrast_color4": {
      "input:amount": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "color4",
        "value": "0.5, 0.5, 0.5, 0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_contrast_color4FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_contrast_float": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_contrast_vector2": {
      "input:amount": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:pivot": {
        "type": "vector2",
        "value": "0.5, 0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_contrast_vector2FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_contrast_vector3": {
      "input:amount": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "vector3",
        "value": "0.5, 0.5, 0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_contrast_vector3FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_contrast_vector4": {
      "input:amount": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "vector4",
        "value": "0.5, 0.5, 0.5, 0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_contrast_vector4FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.5"
      },
      "node": "contrast",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_convert_boolean_float": {
      "input:in": {
        "type": "boolean",
        "value": "false"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_convert_boolean_surfaceshader": {
      "doc": "Convert boolean to shader",
      "input:in": {
        "type": "boolean",
        "value": "false"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_color3_color4": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_convert_color3_surfaceshader": {
      "doc": "Convert color3 to shader",
      "input:in": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_color3_vector3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_convert_color4_color3": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_convert_color4_surfaceshader": {
      "doc": "Convert color4  to shader",
      "input:in": {
        "type": "color4",
        "value": "0, 0, 0, 0"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_color4_vector4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_convert_float_color3": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_convert_float_color4": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_convert_float_surfaceshader": {
      "doc": "Convert float to shader",
      "input:in": {
        "type": "float",
        "value": "0"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_float_vector2": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_convert_float_vector3": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_convert_float_vector4": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_convert_integer_float": {
      "input:in": {
        "type": "integer",
        "value": "0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_convert_integer_surfaceshader": {
      "doc": "Convert integer to shader",
      "input:in": {
        "type": "integer",
        "value": "0"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_vector2_surfaceshader": {
      "doc": "Convert vector2 to shader",
      "input:in": {
        "type": "vector2",
        "value": "0, 0"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_vector2_vector3": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_convert_vector3_color3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_convert_vector3_surfaceshader": {
      "doc": "Convert vector2 to shader",
      "input:in": {
        "type": "vector3",
        "value": "0, 0, 0"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_vector3_vector2": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_convert_vector3_vector4": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_convert_vector4_color4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_convert_vector4_surfaceshader": {
      "doc": "Convert vector4 to shader",
      "input:in": {
        "type": "vector4",
        "value": "0, 0, 0, 0"
      },
      "isdefaultversion": "true",
      "node": "convert",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0"
    },
    "nodedef:ND_convert_vector4_vector3": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "convert",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_cos_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "cos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_cos_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "cos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_cos_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "cos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_cos_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "cos",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_crossproduct_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "crossproduct",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_curveadjust_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:knots": {
        "type": "vector2array",
        "value": ""
      },
      "node": "curveadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_curveadjust_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:knots": {
        "type": "vector2array",
        "value": ""
      },
      "node": "curveadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_curveadjust_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:knots": {
        "type": "vector2array",
        "value": ""
      },
      "node": "curveadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_curveadjust_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:knots": {
        "type": "vector2array",
        "value": ""
      },
      "node": "curveadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_curveadjust_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:knots": {
        "type": "vector2array",
        "value": ""
      },
      "node": "curveadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_curveadjust_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:knots": {
        "type": "vector2array",
        "value": ""
      },
      "node": "curveadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_determinant_matrix33": {
      "input:in": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "determinant",
      "nodegroup": "math",
      "output:out": {
        "default": "1.0",
        "type": "float"
      }
    },
    "nodedef:ND_determinant_matrix44": {
      "input:in": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "determinant",
      "nodegroup": "math",
      "output:out": {
        "default": "1.0",
        "type": "float"
      }
    },
    "nodedef:ND_dielectric_bsdf": {
      "doc": "A reflection/transmission BSDF node based on a microfacet model and a Fresnel curve for dielectrics.",
      "input:distribution": {
        "enum": "ggx",
        "type": "string",
        "uniform": "true",
        "value": "ggx"
      },
      "input:ior": {
        "type": "float",
        "value": "1.5"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:roughness": {
        "type": "vector2",
        "value": "0.05, 0.05"
      },
      "input:scatter_mode": {
        "enum": "R,T,RT",
        "type": "string",
        "uniform": "true",
        "value": "R"
      },
      "input:tangent": {
        "defaultgeomprop": "Tworld",
        "type": "vector3"
      },
      "input:tint": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "dielectric_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_difference_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "difference",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_difference_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "difference",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_difference_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "difference",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_directional_light": {
      "doc": "A light shader node of 'directional' type.",
      "input:color": {
        "doc": "Light color.",
        "type": "color3"
      },
      "input:direction": {
        "doc": "Light source direction.",
        "type": "vector3"
      },
      "input:intensity": {
        "doc": "Light intensity.",
        "type": "float"
      },
      "node": "directional_light",
      "nodegroup": "light",
      "output:out": {
        "type": "lightshader"
      }
    },
    "nodedef:ND_disjointover_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "disjointover",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_disney_brdf_2012_surface": {
      "colorspace": "lin_rec709",
      "input:anisotropic": {
        "type": "float",
        "value": "0"
      },
      "input:baseColor": {
        "type": "color3",
        "value": "0.16, 0.16, 0.16"
      },
      "input:clearcoat": {
        "type": "float",
        "value": "0"
      },
      "input:clearcoatGloss": {
        "type": "float",
        "value": "1"
      },
      "input:metallic": {
        "type": "float",
        "value": "0"
      },
      "input:roughness": {
        "type": "float",
        "value": "0.5"
      },
      "input:sheen": {
        "type": "float",
        "value": "0"
      },
      "input:sheenTint": {
        "type": "float",
        "value": "0.5"
      },
      "input:specular": {
        "type": "float",
        "value": "0.5"
      },
      "input:specularTint": {
        "type": "float",
        "value": "0"
      },
      "input:subsurface": {
        "type": "float",
        "value": "0"
      },
      "node": "disney_brdf_2012",
      "nodegroup": "pbr",
      "output:out": {
        "type": "surfaceshader"
      }
    },
    "nodedef:ND_disney_bsdf_2015_surface": {
      "colorspace": "lin_rec709",
      "input:anisotropic": {
        "type": "float",
        "value": "0"
      },
      "input:baseColor": {
        "type": "color3",
        "value": "0.16, 0.16, 0.16"
      },
      "input:clearcoat": {
        "type": "float",
        "value": "0"
      },
      "input:clearcoatGloss": {
        "type": "float",
        "value": "1"
      },
      "input:diffTrans": {
        "type": "float",
        "value": "0"
      },
      "input:flatness": {
        "type": "float",
        "value": "0"
      },
      "input:ior": {
        "type": "float",
        "value": "1.5"
      },
      "input:metallic": {
        "type": "float",
        "value": "0"
      },
      "input:roughness": {
        "type": "float",
        "value": "0.5"
      },
      "input:scatterDistance": {
        "type": "vector3",
        "value": "0, 0, 0"
      },
      "input:sheen": {
        "type": "float",
        "value": "0"
      },
      "input:sheenTint": {
        "type": "float",
        "value": "0.5"
      },
      "input:specTrans": {
        "type": "float",
        "value": "0"
      },
      "input:specularTint": {
        "type": "float",
        "value": "0"
      },
      "input:thin": {
        "type": "boolean",
        "uniform": "true",
        "value": "false"
      },
      "node": "disney_bsdf_2015",
      "nodegroup": "pbr",
      "output:out": {
        "type": "surfaceshader"
      }
    },
    "nodedef:ND_displacement_float": {
      "doc": "A constructor node for the displacementshader type.",
      "input:displacement": {
        "doc": "Scalar displacement amount along the surface normal direction.",
        "type": "float",
        "value": "0.0"
      },
      "input:scale": {
        "doc": "Scale factor for the displacement vector",
        "type": "float",
        "value": "1.0"
      },
      "node": "displacement",
      "nodegroup": "pbr",
      "output:out": {
        "type": "displacementshader"
      }
    },
    "nodedef:ND_displacement_vector3": {
      "doc": "A constructor node for the displacementshader type.",
      "input:displacement": {
        "doc": "Vector displacement in (dPdu, dPdv, N) tangent/normal space.",
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:scale": {
        "doc": "Scale factor for the displacement vector",
        "type": "float",
        "value": "1.0"
      },
      "node": "displacement",
      "nodegroup": "pbr",
      "output:out": {
        "type": "displacementshader"
      }
    },
    "nodedef:ND_distance_vector2": {
      "input:in1": {
        "type": "vector2",
        "uiname": "in1",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "uiname": "in2",
        "value": "0.0, 0.0"
      },
      "node": "distance",
      "nodegroup": "math",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_distance_vector3": {
      "input:in1": {
        "type": "vector3",
        "uiname": "in1",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "uiname": "in2",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "distance",
      "nodegroup": "math",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_distance_vector4": {
      "input:in1": {
        "type": "vector4",
        "uiname": "in1",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "uiname": "in2",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "distance",
      "nodegroup": "math",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_divide_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_divide_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_divide_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_divide_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_divide_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_divide_matrix33": {
      "input:in1": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix33"
      }
    },
    "nodedef:ND_divide_matrix44": {
      "input:in1": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix44"
      }
    },
    "nodedef:ND_divide_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_divide_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_divide_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_divide_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_divide_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_divide_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "divide",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_dodge_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "dodge",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_dodge_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "dodge",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_dodge_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "dodge",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_dot_boolean": {
      "input:in": {
        "type": "boolean",
        "value": "false"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "boolean"
      }
    },
    "nodedef:ND_dot_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_dot_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_dot_displacementshader": {
      "input:in": {
        "type": "displacementshader",
        "value": ""
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "displacementshader"
      }
    },
    "nodedef:ND_dot_filename": {
      "input:in": {
        "type": "filename",
        "value": ""
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "filename"
      }
    },
    "nodedef:ND_dot_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_dot_integer": {
      "input:in": {
        "type": "integer",
        "value": "0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "integer"
      }
    },
    "nodedef:ND_dot_lightshader": {
      "input:in": {
        "type": "lightshader",
        "value": ""
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "lightshader"
      }
    },
    "nodedef:ND_dot_matrix33": {
      "input:in": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "matrix33"
      }
    },
    "nodedef:ND_dot_matrix44": {
      "input:in": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "matrix44"
      }
    },
    "nodedef:ND_dot_string": {
      "input:in": {
        "type": "string",
        "value": ""
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "string"
      }
    },
    "nodedef:ND_dot_surfaceshader": {
      "input:in": {
        "type": "surfaceshader",
        "value": ""
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "surfaceshader"
      }
    },
    "nodedef:ND_dot_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_dot_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_dot_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_dot_volumeshader": {
      "input:in": {
        "type": "volumeshader",
        "value": ""
      },
      "input:note": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "dot",
      "nodegroup": "organization",
      "output:out": {
        "defaultinput": "in",
        "type": "volumeshader"
      }
    },
    "nodedef:ND_dotproduct_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "dotproduct",
      "nodegroup": "math",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_dotproduct_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "dotproduct",
      "nodegroup": "math",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_dotproduct_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "dotproduct",
      "nodegroup": "math",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_exp_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "exp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_exp_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "exp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_exp_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "exp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_exp_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "exp",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_extract_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:index": {
        "type": "integer",
        "uimax": "2",
        "uimin": "0",
        "uniform": "true",
        "value": "0"
      },
      "node": "extract",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_extract_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:index": {
        "type": "integer",
        "uimax": "3",
        "uimin": "0",
        "uniform": "true",
        "value": "0"
      },
      "node": "extract",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_extract_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:index": {
        "type": "integer",
        "uimax": "1",
        "uimin": "0",
        "uniform": "true",
        "value": "0"
      },
      "node": "extract",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_extract_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:index": {
        "type": "integer",
        "uimax": "2",
        "uimin": "0",
        "uniform": "true",
        "value": "0"
      },
      "node": "extract",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_extract_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:index": {
        "type": "integer",
        "uimax": "3",
        "uimin": "0",
        "uniform": "true",
        "value": "0"
      },
      "node": "extract",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_floor_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "floor",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_floor_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "floor",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_floor_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "floor",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_floor_integer": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "floor",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "integer"
      }
    },
    "nodedef:ND_floor_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "floor",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_floor_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "floor",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_floor_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "floor",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_fractal3d_color3": {
      "input:amplitude": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_fractal3d_color3FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_fractal3d_color4": {
      "input:amplitude": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_fractal3d_color4FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_fractal3d_float": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_fractal3d_vector2": {
      "input:amplitude": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_fractal3d_vector2FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_fractal3d_vector3": {
      "input:amplitude": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_fractal3d_vector3FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_fractal3d_vector4": {
      "input:amplitude": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_fractal3d_vector4FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:diminish": {
        "type": "float",
        "value": "0.5"
      },
      "input:lacunarity": {
        "type": "float",
        "value": "2.0"
      },
      "input:octaves": {
        "type": "integer",
        "value": "3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "fractal3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_frame_float": {
      "node": "frame",
      "nodegroup": "application",
      "output:out": {
        "default": "1.0",
        "type": "float"
      }
    },
    "nodedef:ND_g18_rec709_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "g18_rec709_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_g18_rec709_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "g18_rec709_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_g22_ap1_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "g22_ap1_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_g22_ap1_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "g22_ap1_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_g22_rec709_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "g22_rec709_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_g22_rec709_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "g22_rec709_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_generalized_schlick_bsdf": {
      "doc": "A reflection/transmission BSDF node based on a microfacet model and a generalized Schlick Fresnel curve.",
      "input:color0": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:color90": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:distribution": {
        "enum": "ggx",
        "type": "string",
        "uniform": "true",
        "value": "ggx"
      },
      "input:exponent": {
        "type": "float",
        "value": "5.0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:roughness": {
        "type": "vector2",
        "value": "0.05, 0.05"
      },
      "input:scatter_mode": {
        "enum": "R,T,RT",
        "type": "string",
        "uniform": "true",
        "value": "R"
      },
      "input:tangent": {
        "defaultgeomprop": "Tworld",
        "type": "vector3"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "generalized_schlick_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_generalized_schlick_edf": {
      "doc": "Modifies an EDF with a directional factor.",
      "input:base": {
        "type": "EDF",
        "value": ""
      },
      "input:color0": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:color90": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:exponent": {
        "type": "float",
        "value": "5.0"
      },
      "node": "generalized_schlick_edf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_geomcolor_color3": {
      "input:index": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "node": "geomcolor",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_geomcolor_color4": {
      "input:index": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "node": "geomcolor",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_geomcolor_float": {
      "input:index": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "node": "geomcolor",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_geompropvalue_boolean": {
      "input:default": {
        "type": "boolean",
        "value": "false"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "false",
        "type": "boolean"
      }
    },
    "nodedef:ND_geompropvalue_color3": {
      "input:default": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_geompropvalue_color4": {
      "input:default": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_geompropvalue_float": {
      "input:default": {
        "type": "float",
        "value": "0.0"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_geompropvalue_integer": {
      "input:default": {
        "type": "integer",
        "value": "0"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0",
        "type": "integer"
      }
    },
    "nodedef:ND_geompropvalue_string": {
      "input:default": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "",
        "type": "string"
      }
    },
    "nodedef:ND_geompropvalue_vector2": {
      "input:default": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_geompropvalue_vector3": {
      "input:default": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_geompropvalue_vector4": {
      "input:default": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:geomprop": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "geompropvalue",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_glossiness_anisotropy": {
      "doc": "Calculates anisotropic surface roughness from a scalar glossiness/anisotropy parameterization.",
      "input:anisotropy": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.0"
      },
      "input:glossiness": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "glossiness_anisotropy",
      "nodegroup": "pbr",
      "output:out": {
        "type": "vector2"
      }
    },
    "nodedef:ND_gltf_colorimage": {
      "input:color": {
        "type": "color4",
        "uifolder": "Color",
        "value": "1, 1, 1, 1"
      },
      "input:default": {
        "type": "color4",
        "uifolder": "Image",
        "value": "0, 0, 0, 0"
      },
      "input:file": {
        "type": "filename",
        "uifolder": "Image",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uifolder": "Image",
        "uniform": "true",
        "value": "linear"
      },
      "input:geomcolor": {
        "type": "color4",
        "uifolder": "Color",
        "uiname": "Geometry Color",
        "value": "1, 1, 1, 1"
      },
      "input:offset": {
        "type": "vector2",
        "uifolder": "Image",
        "value": "0, 0"
      },
      "input:operationorder": {
        "type": "integer",
        "uifolder": "Image",
        "value": "1"
      },
      "input:pivot": {
        "type": "vector2",
        "uifolder": "Image",
        "value": "0, 1"
      },
      "input:rotate": {
        "type": "float",
        "uifolder": "Image",
        "uimax": "360",
        "uimin": "0",
        "unit": "degree",
        "unittype": "angle",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "uifolder": "Image",
        "value": "1, 1"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uifolder": "Image",
        "uniform": "true",
        "value": "periodic"
      },
      "input:uvindex": {
        "type": "integer",
        "uifolder": "Image",
        "uniform": "true",
        "value": "0"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uifolder": "Image",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "gltf_colorimage",
      "nodegroup": "texture2d",
      "output:outa": {
        "type": "float",
        "value": "0"
      },
      "output:outcolor": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "version": "1.0"
    },
    "nodedef:ND_gltf_image_color3_color3_1_0": {
      "input:default": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "input:factor": {
        "type": "color3",
        "value": "1,1,1"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:offset": {
        "type": "vector2",
        "value": "0, 0"
      },
      "input:operationorder": {
        "type": "integer",
        "value": "0"
      },
      "input:pivot": {
        "type": "vector2",
        "value": "0, 1"
      },
      "input:rotate": {
        "type": "float",
        "uimax": "360",
        "uimin": "0",
        "unit": "degree",
        "unittype": "angle",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "value": "1, 1"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "input:uvindex": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "gltf_image",
      "nodegroup": "texture2d",
      "output:out": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "version": "1.0"
    },
    "nodedef:ND_gltf_image_color4_color4_1_0": {
      "input:default": {
        "type": "color4",
        "value": "0, 0, 0, 0"
      },
      "input:factor": {
        "type": "color4",
        "value": "1,1,1,1"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:offset": {
        "type": "vector2",
        "value": "0, 0"
      },
      "input:operationorder": {
        "type": "integer",
        "value": "1"
      },
      "input:pivot": {
        "type": "vector2",
        "value": "0, 1"
      },
      "input:rotate": {
        "type": "float",
        "uimax": "360",
        "uimin": "0",
        "unit": "degree",
        "unittype": "angle",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "value": "1, 1"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "input:uvindex": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "gltf_image",
      "nodegroup": "texture2d",
      "output:out": {
        "type": "color4",
        "value": "0, 0, 0, 0"
      },
      "version": "1.0"
    },
    "nodedef:ND_gltf_image_float_float_1_0": {
      "input:default": {
        "type": "float",
        "value": "0"
      },
      "input:factor": {
        "type": "float",
        "value": "1"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:offset": {
        "type": "vector2",
        "value": "0, 0"
      },
      "input:operationorder": {
        "type": "integer",
        "value": "0"
      },
      "input:pivot": {
        "type": "vector2",
        "value": "0, 1"
      },
      "input:rotate": {
        "type": "float",
        "uimax": "360",
        "uimin": "0",
        "unit": "degree",
        "unittype": "angle",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "value": "1, 1"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "input:uvindex": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "gltf_image",
      "nodegroup": "texture2d",
      "output:out": {
        "type": "float",
        "value": "0"
      },
      "version": "1.0"
    },
    "nodedef:ND_gltf_image_vector3_vector3_1_0": {
      "input:default": {
        "type": "vector3",
        "value": "0, 0, 0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:offset": {
        "type": "vector2",
        "value": "0, 0"
      },
      "input:operationorder": {
        "type": "integer",
        "value": "0"
      },
      "input:pivot": {
        "type": "vector2",
        "value": "0, 1"
      },
      "input:rotate": {
        "type": "float",
        "uimax": "360",
        "uimin": "0",
        "unit": "degree",
        "unittype": "angle",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "value": "1, 1"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "input:uvindex": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "gltf_image",
      "nodegroup": "texture2d",
      "output:out": {
        "type": "vector3",
        "value": "0, 0, 0"
      },
      "version": "1.0"
    },
    "nodedef:ND_gltf_iridescence_thickness_float_1_0": {
      "input:default": {
        "type": "vector3",
        "uifolder": "Image",
        "value": "0, 0, 0"
      },
      "input:file": {
        "type": "filename",
        "uifolder": "Image",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uifolder": "Image",
        "uniform": "true",
        "value": "linear"
      },
      "input:offset": {
        "type": "vector2",
        "uifolder": "Image",
        "value": "0, 0"
      },
      "input:pivot": {
        "type": "vector2",
        "uifolder": "Image",
        "value": "0, 0"
      },
      "input:rotate": {
        "type": "float",
        "uifolder": "Image",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "uifolder": "Image",
        "value": "1, 1"
      },
      "input:thicknessMax": {
        "type": "float",
        "uifolder": "Thickness",
        "value": "400"
      },
      "input:thicknessMin": {
        "type": "float",
        "uifolder": "Thickness",
        "value": "100"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uifolder": "Image",
        "uniform": "true",
        "value": "periodic"
      },
      "input:uvindex": {
        "type": "integer",
        "uifolder": "Image",
        "uniform": "true",
        "value": "0"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uifolder": "Image",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "gltf_iridescence_thickness",
      "nodegroup": "texture2d",
      "output:out": {
        "type": "float",
        "value": "0"
      },
      "version": "1.0"
    },
    "nodedef:ND_gltf_normalmap_vector3_1_0": {
      "input:default": {
        "type": "vector3",
        "value": "0.5, 0.5, 1"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:offset": {
        "type": "vector2",
        "value": "0, 0"
      },
      "input:operationorder": {
        "type": "integer",
        "value": "0"
      },
      "input:pivot": {
        "type": "vector2",
        "value": "0, 1"
      },
      "input:rotate": {
        "type": "float",
        "uimax": "360",
        "uimin": "0",
        "unit": "degree",
        "unittype": "angle",
        "value": "0"
      },
      "input:scale": {
        "type": "vector2",
        "value": "1, 1"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "input:uvindex": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "periodic"
      },
      "isdefaultversion": "true",
      "node": "gltf_normalmap",
      "nodegroup": "texture2d",
      "output:out": {
        "type": "vector3",
        "value": "0, 0, 0"
      },
      "version": "1.0"
    },
    "nodedef:ND_gltf_pbr_surfaceshader": {
      "doc": "glTF PBR",
      "input:alpha": {
        "type": "float",
        "uifolder": "Alpha",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Alpha",
        "value": "1"
      },
      "input:alpha_cutoff": {
        "type": "float",
        "uifolder": "Alpha",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Alpha Cutoff",
        "uniform": "true",
        "value": "0.5"
      },
      "input:alpha_mode": {
        "enum": "OPAQUE, MASK, BLEND",
        "enumvalues": "0, 1, 2",
        "type": "integer",
        "uifolder": "Alpha",
        "uiname": "Alpha Mode",
        "uniform": "true",
        "value": "0"
      },
      "input:attenuation_color": {
        "type": "color3",
        "uifolder": "Volume",
        "uimax": "1, 1, 1",
        "uimin": "0, 0, 0",
        "uiname": "Attenuation Color",
        "uniform": "true",
        "value": "1, 1, 1"
      },
      "input:attenuation_distance": {
        "type": "float",
        "uifolder": "Volume",
        "uimin": "0",
        "uiname": "Attenuation Distance",
        "uniform": "true"
      },
      "input:base_color": {
        "type": "color3",
        "uifolder": "Base",
        "uimax": "1, 1, 1",
        "uimin": "0, 0, 0",
        "uiname": "Base Color",
        "value": "1, 1, 1"
      },
      "input:clearcoat": {
        "type": "float",
        "uifolder": "Clearcoat",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Clearcoat",
        "value": "0"
      },
      "input:clearcoat_normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3",
        "uifolder": "Clearcoat",
        "uiname": "Clearcoat Normal"
      },
      "input:clearcoat_roughness": {
        "type": "float",
        "uifolder": "Clearcoat",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Clearcoat Roughness",
        "value": "0"
      },
      "input:emissive": {
        "type": "color3",
        "uifolder": "Emission",
        "uimax": "1, 1, 1",
        "uimin": "0, 0, 0",
        "uiname": "Emissive",
        "value": "0, 0, 0"
      },
      "input:emissive_strength": {
        "type": "float",
        "uifolder": "Emission",
        "uimin": "0",
        "uiname": "Emissive Strength",
        "uniform": "true",
        "value": "1"
      },
      "input:ior": {
        "type": "float",
        "uifolder": "Base",
        "uimin": "1",
        "uiname": "Index of Refraction",
        "uisoftmax": "3",
        "uniform": "true",
        "value": "1.5"
      },
      "input:iridescence": {
        "type": "float",
        "uifolder": "Iridescence",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Iridescence",
        "value": "0"
      },
      "input:iridescence_ior": {
        "type": "float",
        "uifolder": "Iridescence",
        "uimin": "1",
        "uiname": "Iridescence Index of Refraction",
        "uisoftmax": "3",
        "uniform": "true",
        "value": "1.3"
      },
      "input:iridescence_thickness": {
        "type": "float",
        "uifolder": "Iridescence",
        "uimin": "0",
        "uiname": "Iridescence Thickness",
        "uisoftmax": "400",
        "uisoftmin": "100",
        "value": "100"
      },
      "input:metallic": {
        "type": "float",
        "uifolder": "Base",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Metallic",
        "value": "1"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3",
        "uifolder": "Base",
        "uiname": "Normal"
      },
      "input:occlusion": {
        "type": "float",
        "uifolder": "Base",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Occlusion",
        "value": "1"
      },
      "input:roughness": {
        "type": "float",
        "uifolder": "Base",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Roughness",
        "value": "1"
      },
      "input:sheen_color": {
        "type": "color3",
        "uifolder": "Sheen",
        "uimax": "1, 1, 1",
        "uimin": "0, 0, 0",
        "uiname": "Sheen Color",
        "value": "0, 0, 0"
      },
      "input:sheen_roughness": {
        "type": "float",
        "uifolder": "Sheen",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Sheen Roughness",
        "value": "0"
      },
      "input:specular": {
        "type": "float",
        "uifolder": "Base",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Specular",
        "value": "1"
      },
      "input:specular_color": {
        "type": "color3",
        "uifolder": "Base",
        "uimin": "0, 0, 0",
        "uiname": "Specular Color",
        "uisoftmax": "1, 1, 1",
        "value": "1, 1, 1"
      },
      "input:tangent": {
        "defaultgeomprop": "Tworld",
        "type": "vector3",
        "uifolder": "Base",
        "uiname": "Tangent"
      },
      "input:thickness": {
        "type": "float",
        "uifolder": "Volume",
        "uimin": "0",
        "uiname": "Thickness",
        "uniform": "false",
        "value": "0"
      },
      "input:transmission": {
        "type": "float",
        "uifolder": "Base",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Transmission",
        "value": "0"
      },
      "isdefaultversion": "true",
      "node": "gltf_pbr",
      "nodegroup": "pbr",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "2.0.1"
    },
    "nodedef:ND_heighttonormal_vector3": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:scale": {
        "type": "float",
        "value": "1.0"
      },
      "node": "heighttonormal",
      "nodegroup": "convolution2d",
      "output:out": {
        "default": "0.5, 0.5, 1.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_hsvadjust_color3": {
      "input:amount": {
        "type": "vector3",
        "value": "0.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "hsvadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_hsvadjust_color4": {
      "input:amount": {
        "type": "vector3",
        "value": "0.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "hsvadjust",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_hsvtorgb_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "hsvtorgb",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_hsvtorgb_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "hsvtorgb",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_ifequal_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "0.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_ifequal_color3B": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "boolean",
        "value": "false"
      },
      "input:value2": {
        "type": "boolean",
        "value": "false"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_ifequal_color3I": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "0"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_ifequal_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "0.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_ifequal_color4B": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "boolean",
        "value": "false"
      },
      "input:value2": {
        "type": "boolean",
        "value": "false"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_ifequal_color4I": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "0"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_ifequal_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "0.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_ifequal_floatB": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:value1": {
        "type": "boolean",
        "value": "false"
      },
      "input:value2": {
        "type": "boolean",
        "value": "false"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_ifequal_floatI": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "0"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_ifequal_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "0.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_ifequal_vector2B": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:value1": {
        "type": "boolean",
        "value": "false"
      },
      "input:value2": {
        "type": "boolean",
        "value": "false"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_ifequal_vector2I": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "0"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_ifequal_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "0.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_ifequal_vector3B": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "boolean",
        "value": "false"
      },
      "input:value2": {
        "type": "boolean",
        "value": "false"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_ifequal_vector3I": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "0"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_ifequal_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "0.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_ifequal_vector4B": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "boolean",
        "value": "false"
      },
      "input:value2": {
        "type": "boolean",
        "value": "false"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_ifequal_vector4I": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "0"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifequal",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_ifgreater_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_ifgreater_color3I": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_ifgreater_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_ifgreater_color4I": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_ifgreater_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_ifgreater_floatI": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_ifgreater_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_ifgreater_vector2I": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_ifgreater_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_ifgreater_vector3I": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_ifgreater_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_ifgreater_vector4I": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreater",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_ifgreatereq_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_ifgreatereq_color3I": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_ifgreatereq_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_ifgreatereq_color4I": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_ifgreatereq_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_ifgreatereq_floatI": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_ifgreatereq_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_ifgreatereq_vector2I": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_ifgreatereq_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_ifgreatereq_vector3I": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_ifgreatereq_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "float",
        "value": "1.0"
      },
      "input:value2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_ifgreatereq_vector4I": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:value1": {
        "type": "integer",
        "value": "1"
      },
      "input:value2": {
        "type": "integer",
        "value": "0"
      },
      "node": "ifgreatereq",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_image_color3": {
      "input:default": {
        "type": "color3",
        "uiname": "Default Color",
        "value": "0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uiname": "Filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uiname": "Filter Type",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Frame End Action",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uiname": "Frame Offset",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uiname": "Frame Range",
        "uniform": "true",
        "value": ""
      },
      "input:layer": {
        "type": "string",
        "uiname": "Layer",
        "uniform": "true",
        "value": ""
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2",
        "uiname": "Texture Coordinates"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode U",
        "uniform": "true",
        "value": "periodic"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode V",
        "uniform": "true",
        "value": "periodic"
      },
      "node": "image",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_image_color4": {
      "input:default": {
        "type": "color4",
        "uiname": "Default Color",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uiname": "Filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uiname": "Filter Type",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Frame End Action",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uiname": "Frame Offset",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uiname": "Frame Range",
        "uniform": "true",
        "value": ""
      },
      "input:layer": {
        "type": "string",
        "uiname": "Layer",
        "uniform": "true",
        "value": ""
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2",
        "uiname": "Texture Coordinates"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode U",
        "uniform": "true",
        "value": "periodic"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode V",
        "uniform": "true",
        "value": "periodic"
      },
      "node": "image",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_image_float": {
      "input:default": {
        "type": "float",
        "uiname": "Default Color",
        "value": "0.0"
      },
      "input:file": {
        "type": "filename",
        "uiname": "Filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uiname": "Filter Type",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Frame End Action",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uiname": "Frame Offset",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uiname": "Frame Range",
        "uniform": "true",
        "value": ""
      },
      "input:layer": {
        "type": "string",
        "uiname": "Layer",
        "uniform": "true",
        "value": ""
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2",
        "uiname": "Texture Coordinates"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode U",
        "uniform": "true",
        "value": "periodic"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode V",
        "uniform": "true",
        "value": "periodic"
      },
      "node": "image",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_image_vector2": {
      "input:default": {
        "type": "vector2",
        "uiname": "Default Color",
        "value": "0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uiname": "Filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uiname": "Filter Type",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Frame End Action",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uiname": "Frame Offset",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uiname": "Frame Range",
        "uniform": "true",
        "value": ""
      },
      "input:layer": {
        "type": "string",
        "uiname": "Layer",
        "uniform": "true",
        "value": ""
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2",
        "uiname": "Texture Coordinates"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode U",
        "uniform": "true",
        "value": "periodic"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode V",
        "uniform": "true",
        "value": "periodic"
      },
      "node": "image",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_image_vector3": {
      "input:default": {
        "type": "vector3",
        "uiname": "Default Color",
        "value": "0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uiname": "Filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uiname": "Filter Type",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Frame End Action",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uiname": "Frame Offset",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uiname": "Frame Range",
        "uniform": "true",
        "value": ""
      },
      "input:layer": {
        "type": "string",
        "uiname": "Layer",
        "uniform": "true",
        "value": ""
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2",
        "uiname": "Texture Coordinates"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode U",
        "uniform": "true",
        "value": "periodic"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode V",
        "uniform": "true",
        "value": "periodic"
      },
      "node": "image",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_image_vector4": {
      "input:default": {
        "type": "vector4",
        "uiname": "Default Color",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uiname": "Filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uiname": "Filter Type",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Frame End Action",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uiname": "Frame Offset",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uiname": "Frame Range",
        "uniform": "true",
        "value": ""
      },
      "input:layer": {
        "type": "string",
        "uiname": "Layer",
        "uniform": "true",
        "value": ""
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2",
        "uiname": "Texture Coordinates"
      },
      "input:uaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode U",
        "uniform": "true",
        "value": "periodic"
      },
      "input:vaddressmode": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uiname": "Address Mode V",
        "uniform": "true",
        "value": "periodic"
      },
      "node": "image",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_in_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "in",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_inside_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mask": {
        "type": "float",
        "value": "1.0"
      },
      "node": "inside",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_inside_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mask": {
        "type": "float",
        "value": "1.0"
      },
      "node": "inside",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_inside_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:mask": {
        "type": "float",
        "value": "1.0"
      },
      "node": "inside",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_invert_color3": {
      "input:amount": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_invert_color3FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_invert_color4": {
      "input:amount": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_invert_color4FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_invert_float": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_invert_vector2": {
      "input:amount": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_invert_vector2FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_invert_vector3": {
      "input:amount": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_invert_vector3FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_invert_vector4": {
      "input:amount": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_invert_vector4FA": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "invert",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_invertmatrix_matrix33": {
      "input:in": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "invertmatrix",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "matrix33"
      }
    },
    "nodedef:ND_invertmatrix_matrix44": {
      "input:in": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "invertmatrix",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "matrix44"
      }
    },
    "nodedef:ND_lama_add_bsdf": {
      "colorspace": "acescg",
      "input:material1": {
        "doc": "First material to add.",
        "type": "BSDF",
        "uiname": "Material 1"
      },
      "input:material2": {
        "doc": "Second material to add.",
        "type": "BSDF",
        "uiname": "Material 2"
      },
      "input:weight1": {
        "doc": "Weight of the first material.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Weight 1",
        "value": "1.0"
      },
      "input:weight2": {
        "doc": "Weight of the second material.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Weight 2",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LamaAdd",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_add_edf": {
      "colorspace": "acescg",
      "input:material1": {
        "doc": "First material to add.",
        "type": "EDF",
        "uiname": "Material 1"
      },
      "input:material2": {
        "doc": "Second material to add.",
        "type": "EDF",
        "uiname": "Material 2"
      },
      "input:weight1": {
        "doc": "Weight of the first material.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Weight 1",
        "value": "1.0"
      },
      "input:weight2": {
        "doc": "Weight of the second material.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Weight 2",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LamaAdd",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_conductor": {
      "colorspace": "acescg",
      "doc": "Lama conductor",
      "input:IOR": {
        "doc": "Index of refraction (often denoted by eta), defining the color reflected by the surface in the normal direction.",
        "type": "vector3",
        "uifolder": "Main",
        "uiname": "IOR",
        "value": "0.180000007153,0.419999986887,1.37000000477"
      },
      "input:anisotropy": {
        "doc": "Defines the amount of anisotropy, changing the co-tangent axis roughness from the original value to 1 (or to 0 with a negative value).",
        "type": "float",
        "uifolder": "Anisotropy",
        "uimax": "1.0",
        "uimin": "-1.0",
        "uiname": "Anisotropy",
        "value": "0.0"
      },
      "input:anisotropyDirection": {
        "defaultgeomprop": "Tworld",
        "doc": "Overrides the surface tangent as the anisotropy direction.",
        "type": "vector3",
        "uifolder": "Anisotropy",
        "uiname": "Direction"
      },
      "input:anisotropyRotation": {
        "doc": "Rotates the anisotropy direction (possibly overriden by the previous attribute) around the normal, from 0 to 360 degrees.",
        "type": "float",
        "uifolder": "Anisotropy",
        "uiname": "Rotation",
        "value": "0.0"
      },
      "input:edgeColor": {
        "doc": "Indicates how the reflected color curve evolves between its value in the normal direction (or 0 degree), and 1 when reaching 90 degrees. Note that this color is unlikely to be reached, and just bends the curve towards it when reaching grazing angles. A null value does not deviate the curve at all.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Edge Color",
        "value": "0.9979, 0.9813, 0.7523"
      },
      "input:exteriorIOR": {
        "doc": "Defines what the IOR of the exterior medium is (can be either the outside medium, eg. air or water, or in case of a layered material, the top layer medium, like plexiglass or varnish).",
        "type": "float",
        "uifolder": "Advanced",
        "uimax": "3.0",
        "uimin": "1.0",
        "uiname": "Exterior IOR",
        "value": "1.0"
      },
      "input:extinction": {
        "doc": "Extinction coefficient (often denoted by kappa), influencing how the reflected color curve evolves between its value in the normal direction (or 0 degree), and 1 when reaching 90 degrees. A null value does not deviate the curve at all.",
        "type": "vector3",
        "uifolder": "Main",
        "uiname": "Extinction",
        "value": "3.42000007629,2.34999990463,1.76999998093"
      },
      "input:fresnelMode": {
        "doc": "Fresnel mode",
        "enum": "Scientific,Artistic",
        "enumvalues": "0,1",
        "type": "integer",
        "uifolder": "Main",
        "uiname": "Fresnel Mode",
        "uniform": "true",
        "value": "0"
      },
      "input:iridescenceIOR": {
        "doc": "Thin film index of refraction, driving the iridescent effect.",
        "type": "float",
        "uifolder": "Iridescence",
        "uimax": "3.0",
        "uimin": "1.0",
        "uiname": "IOR",
        "value": "1.5"
      },
      "input:iridescenceThickness": {
        "doc": "Thin film thickness in nanometers, driving the iridescent effect.",
        "type": "float",
        "uifolder": "Iridescence",
        "uimin": "0.0",
        "uiname": "Thickness",
        "uisoftmax": "200.0",
        "value": "0.0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Shading normal, typically defined by bump or normal mapping. Defaults to the smooth surface normal if not set.",
        "type": "vector3",
        "uifolder": "Main",
        "uiname": "Normal"
      },
      "input:reflectivity": {
        "doc": "Color reflected by the surface in the normal direction.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Reflectivity",
        "value": "0.9450, 0.7772, 0.3737"
      },
      "input:roughness": {
        "doc": "Micro-facet distribution roughness.",
        "type": "float",
        "uifolder": "Main",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Roughness",
        "value": "0.1"
      },
      "input:tint": {
        "doc": "Overall color multiplier. It should be used with parcimony, as a non-white value breaks physicality. The prefered way to define the color of a conductor is through the Fresnel attributes right below.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Tint",
        "value": "1, 1, 1"
      },
      "isdefaultversion": "true",
      "node": "LamaConductor",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_dielectric": {
      "colorspace": "acescg",
      "doc": "Lama dielectric",
      "input:IOR": {
        "doc": "Index of refraction (often denoted by eta), defining the amount reflected by the surface in the normal direction, and how the rays are bent by refraction.",
        "type": "float",
        "uifolder": "Main",
        "uimax": "3.0",
        "uimin": "1.0",
        "uiname": "IOR",
        "value": "1.5"
      },
      "input:absorptionColor": {
        "doc": "Absorption color",
        "type": "color3",
        "uifolder": "Interior",
        "uiname": "Absorption Color",
        "value": "1.0, 1.0, 1.0"
      },
      "input:absorptionRadius": {
        "doc": "Absorption radius",
        "type": "float",
        "uifolder": "Interior",
        "uiname": "Absorption Radius",
        "value": "1.0"
      },
      "input:anisotropy": {
        "doc": "Defines the amount of anisotropy, changing the co-tangent axis roughness from the original value to 1 (or to 0 with a negative value).",
        "type": "float",
        "uifolder": "Anisotropy",
        "uimax": "1.0",
        "uimin": "-1.0",
        "uiname": "Anisotropy",
        "value": "0.0"
      },
      "input:direction": {
        "defaultgeomprop": "Tworld",
        "doc": "Overrides the surface tangent as the anisotropy direction.",
        "type": "vector3",
        "uifolder": "Anisotropy",
        "uiname": "Direction"
      },
      "input:exteriorIOR": {
        "doc": "Defines what the IOR of the exterior medium is (can be either the outside medium, eg. air or water, or in case of a layered material, the top layer medium, like plexiglass or varnish).",
        "type": "float",
        "uifolder": "Advanced",
        "uimax": "3.0",
        "uimin": "1.0",
        "uiname": "Exterior IOR",
        "value": "1.0"
      },
      "input:fresnelMode": {
        "doc": "Fresnel mode",
        "enum": "Scientific,Artistic",
        "enumvalues": "0,1",
        "type": "integer",
        "uifolder": "Main",
        "uiname": "Fresnel Mode",
        "uniform": "true",
        "value": "0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Shading normal, typically defined by bump or normal mapping. Defaults to the smooth surface normal if not set.",
        "type": "vector3",
        "uifolder": "Main",
        "uiname": "Normal"
      },
      "input:reflectionTint": {
        "doc": "Color multiplier for external reflection. It should be used with parcimony, as a non-white value breaks physicality.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Reflection Tint",
        "value": "1.0, 1.0, 1.0"
      },
      "input:reflectivity": {
        "doc": "Reflectivity",
        "type": "float",
        "uifolder": "Main",
        "uiname": "Reflectivity",
        "value": "0.04"
      },
      "input:rotation": {
        "doc": "Rotates the anisotropy direction (possibly overriden by the previous attribute) around the normal, from 0 to 360 degrees.",
        "type": "float",
        "uifolder": "Anisotropy",
        "uiname": "Rotation",
        "value": "0.0"
      },
      "input:roughness": {
        "doc": "Micro-facet distribution roughness.",
        "type": "float",
        "uifolder": "Main",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Roughness",
        "value": "0.1"
      },
      "input:scatterAnisotropy": {
        "doc": "Scatter anisotropy",
        "type": "float",
        "uifolder": "Interior",
        "uimax": "1.0",
        "uimin": "-1.0",
        "uiname": "Scatter Anisotropy",
        "value": "0.0"
      },
      "input:scatterColor": {
        "doc": "Scatter color",
        "type": "color3",
        "uifolder": "Interior",
        "uiname": "Scatter Color",
        "value": "0.0, 0.0, 0.0"
      },
      "input:transmissionTint": {
        "doc": "Color multiplier for rays going inside the medium (covers external transmission and internal reflection). It should be used with parcimony, as a non-white value breaks physicality. The prefered way to define the color of a dielectric is through the Interior attributes right below.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Transmission Tint",
        "value": "1.0, 1.0, 1.0"
      },
      "isdefaultversion": "true",
      "node": "LamaDielectric",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_diffuse": {
      "colorspace": "acescg",
      "input:color": {
        "doc": "Diffuse color (aka albedo), defining what ratio of light is reflected for each color channel.",
        "type": "color3",
        "uiname": "Color",
        "value": "0.18, 0.18, 0.18"
      },
      "input:energyCompensation": {
        "doc": "Indicates how much energy should be added to compensate for the loss inherent to the Oren-Nayar model, ranging from no compensation at all, to the expected energy from multiple scattering between the micro-facets. This prevents overly dark results when roughness is high.",
        "type": "float",
        "uifolder": "Advanced",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Energy Compensation",
        "uniform": "true",
        "value": "1.0"
      },
      "input:lobeName": {
        "doc": "Defines the name that can be used in LPE AOVs for this lobe.",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "Lobe Name",
        "uniform": "true",
        "value": "diffuse"
      },
      "input:matte": {
        "doc": "Defines the name that can be used by the matte system, to output the weight of this lobe in the final material as an AOV.",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "Matte",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Shading normal, typically defined by bump or normal mapping. Defaults to the smooth surface normal if not set.",
        "type": "vector3",
        "uiname": "Normal"
      },
      "input:roughness": {
        "doc": "Micro-facet distribution (Oren-Nayar) roughness.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Roughness",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LamaDiffuse",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_emission": {
      "colorspace": "acescg",
      "doc": "Lama emission",
      "input:color": {
        "doc": "Color being uniformly emitted in all directions above the surface.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Color",
        "value": "1.0, 1.0, 1.0"
      },
      "isdefaultversion": "true",
      "node": "LamaEmission",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_layer_bsdf": {
      "colorspace": "acescg",
      "input:materialBase": {
        "doc": "Base material, right under the top one.",
        "type": "BSDF",
        "uiname": "Material Base"
      },
      "input:materialTop": {
        "doc": "Material used for the top slab. If not set, the base material will be used by itself.",
        "type": "BSDF",
        "uiname": "Material Top"
      },
      "input:topMix": {
        "doc": "Defines how visible the top material is.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Top Mix",
        "value": "1.0"
      },
      "input:topThickness": {
        "doc": "Thickness of the top slab. It is only relevant for interior effects associated with the top material, such as absorption. If the top material is itself a layer node, this value is passed on to its base component. And if the top material is a mix or add, this value is passed on to both child materials.",
        "type": "float",
        "uimin": "0.0",
        "uiname": "Top Thickness",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LamaLayer",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_mix_bsdf": {
      "colorspace": "acescg",
      "input:material1": {
        "doc": "First material to mix.",
        "type": "BSDF",
        "uiname": "Material 1"
      },
      "input:material2": {
        "doc": "Second material to mix.",
        "type": "BSDF",
        "uiname": "Material 2"
      },
      "input:mix": {
        "doc": "Defines the balance between the two materials, ranging from 0 (Material 1 only) to 1 (Material 2 only). Can also be seen as a Material 2 over Material 1 mask.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LamaMix",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_mix_edf": {
      "colorspace": "acescg",
      "input:material1": {
        "doc": "First material to mix.",
        "type": "EDF",
        "uiname": "Material 1"
      },
      "input:material2": {
        "doc": "Second material to mix.",
        "type": "EDF",
        "uiname": "Material 2"
      },
      "input:mix": {
        "doc": "Defines the balance between the two materials, ranging from 0 (Material 1 only) to 1 (Material 2 only). Can also be seen as a Material 2 over Material 1 mask.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LamaMix",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_sheen": {
      "colorspace": "acescg",
      "doc": "Lama sheen",
      "input:color": {
        "doc": "Amount of sheen to add, per channel. When this node is used as top material in a stack, the more sheen is added, the less energy will be transmitted to the base material.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Color",
        "value": "1, 1, 1"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Shading normal, typically defined by bump or normal mapping. Defaults to the smooth surface normal if not set.",
        "type": "vector3",
        "uifolder": "Main",
        "uiname": "Normal"
      },
      "input:roughness": {
        "doc": "Roughness of the sheen effect. Very rough sheen can be used to create a rough diffuse look (when combined with a diffuse node by a stack or mix).",
        "type": "float",
        "uifolder": "Main",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Roughness",
        "value": "0.1"
      },
      "isdefaultversion": "true",
      "node": "LamaSheen",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_sss": {
      "colorspace": "acescg",
      "doc": "Lama SSS",
      "input:albedoInversionMethod": {
        "doc": "Decides which albedo inversion methods is used. Pixar: Does the Pixar Path Traced SSS default albedo inversion. Chiang: Does Chiang's albedo inversion (with no dmfp remapping). The look is closer to Arnold Standard Surface randomwalk.",
        "enum": "Pixar,Chiang",
        "enumvalues": "0,1",
        "type": "integer",
        "uifolder": "Advanced",
        "uiname": "Albedo Inversion Method",
        "value": "0"
      },
      "input:color": {
        "doc": "Diffuse color (aka albedo), defining what ratio of light is reflected -- or transmitted -- for each color channel.",
        "type": "color3",
        "uifolder": "Main",
        "uiname": "Color",
        "value": "0.18, 0.18, 0.18"
      },
      "input:diffuseLobeName": {
        "doc": "Defines the name that can be used in LPE AOVs for the diffuse lobe (when the SSS radius is null).",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "Diffuse Lobe Name",
        "uniform": "true",
        "value": "diffuse"
      },
      "input:matte": {
        "doc": "Defines the name that can be used by the matte system, to output the weight of this lobe in the final material as an AOV.",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "Matte",
        "uniform": "true",
        "value": ""
      },
      "input:mode": {
        "doc": "If the subsurface is enabled, Reflection: should be used when both the camera and the light are outside of the object. Reflection(with direct illumination): should be used when both the camera and the light are outside of the object. This mode also computes the direct illumination at the sss ray exit point. Transmission: should be used when the light is inside the object while the camera is outside. ",
        "enum": "Reflection,Transmission,Reflection(with direct illumination)",
        "enumvalues": "0,1,2",
        "type": "integer",
        "uifolder": "Advanced",
        "uiname": "Mode",
        "uniform": "true",
        "value": "0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Shading normal, typically defined by bump or normal mapping. Defaults to the smooth surface normal if not set.",
        "type": "vector3",
        "uifolder": "Main",
        "uiname": "Normal"
      },
      "input:sssAnisotropy": {
        "doc": "Higher values makes light scatter predominantly forward under the surface, making the object look less diffuse and more transparent.",
        "type": "float",
        "uifolder": "SSS",
        "uimax": "1.0",
        "uimin": "-1.0",
        "uiname": "Anisotropy",
        "value": "0.0"
      },
      "input:sssBleed": {
        "doc": "Controls the depth of light bleed in the subsurface medium. Has the effect of increasing the distance light travels in the medium while preserving fine detail, compared to increasing the Mean Free Path.",
        "type": "float",
        "uifolder": "SSS",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Bleed",
        "value": "0.0"
      },
      "input:sssContinuationRays": {
        "doc": "When enabled, ignores internal geometry and jumps to the last surface.",
        "type": "integer",
        "uifolder": "SSS",
        "uiname": "Continuation Rays",
        "value": "0"
      },
      "input:sssEntryLobeName": {
        "doc": "Defines the name that can be used in LPE AOVs for the SSS Entry lobe.",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "SSS Entry Lobe Name",
        "uniform": "true",
        "value": "irradiance"
      },
      "input:sssExitLobeName": {
        "doc": "Defines the name that can be used in LPE AOVs for the SSS Exit lobe.",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "SSS Exit Lobe Name",
        "uniform": "true",
        "value": ""
      },
      "input:sssFollowTopology": {
        "doc": "Controls how strongly normals are considered in the subsurface computation.",
        "type": "float",
        "uifolder": "SSS",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Follow Topology",
        "value": "0.0"
      },
      "input:sssIOR": {
        "doc": "Index of refraction use to trigger cases of total internal reflections, when the paths are reaching the surface after having travelled under it. Can be used to avoid excessive glow in highly curved regions (corners, creases, ...).",
        "type": "float",
        "uifolder": "SSS",
        "uimax": "2.0",
        "uimin": "1.0",
        "uiname": "IOR",
        "value": "1.0"
      },
      "input:sssId": {
        "doc": "SSS ID",
        "enum": "0, 1",
        "enumvalues": "0, 1",
        "type": "integer",
        "uifolder": "Advanced",
        "uiname": "SSS Id",
        "uniform": "true",
        "value": "0"
      },
      "input:sssMode": {
        "doc": "Selects what method should be used to compute sub-surface scattering. Proposes two path-traced variants, and a more traditional approximate diffusion model.",
        "enum": "Path-traced Davis,Path-traced exponential,Diffusion Burley,Diffusion Burley (mean free path)",
        "enumvalues": "0,1,2,3",
        "type": "integer",
        "uifolder": "Main",
        "uiname": "Mode",
        "uniform": "true",
        "value": "0"
      },
      "input:sssRadius": {
        "doc": "Diffuse Mean Free Path, expressed for each color channel in mm. Indicates on average how much the light travels under the surface before being scattered. The higher the value, the softer the result will be. If null, the computation simplifies to a Lambertian lobe.",
        "type": "color3",
        "uifolder": "SSS",
        "uiname": "Radius",
        "value": "0.0, 0.0, 0.0"
      },
      "input:sssScale": {
        "doc": "Multiplies the radius, to adjust its scale to the scene at hand. If null, the computation simplifies to a Lambertian lobe.",
        "type": "float",
        "uifolder": "SSS",
        "uiname": "Scale",
        "value": "1.0"
      },
      "input:sssSubset": {
        "doc": "Specifies trace subset for inclusion/exclusion when struck by a ray indirectly.",
        "type": "string",
        "uifolder": "SSS",
        "uiname": "Subset",
        "uniform": "true",
        "value": ""
      },
      "input:sssUnitLength": {
        "doc": "Specifies what unit length the scene is using. It is a multiplier on the mean free path or diffuse mean free path which is expressed in mm. The default value of 0.00328 converts between feet and mm.",
        "type": "float",
        "uifolder": "SSS",
        "uiname": "Unit Length",
        "value": "0.00328"
      },
      "isdefaultversion": "true",
      "node": "LamaSSS",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_lama_translucent": {
      "colorspace": "acescg",
      "input:color": {
        "doc": "Translucent color (aka albedo), defining what ratio of light is transmitted for each color channel.",
        "type": "color3",
        "uiname": "Color",
        "value": "0.18, 0.18, 0.18"
      },
      "input:energyCompensation": {
        "doc": "Indicates how much energy should be added to compensate for the loss inherent to the Oren-Nayar model, ranging from no compensation at all, to the expected energy from multiple scattering between the micro-facets. This prevents overly dark results when roughness is high.",
        "type": "float",
        "uifolder": "Advanced",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Energy Compensation",
        "uniform": "true",
        "value": "1.0"
      },
      "input:lobeName": {
        "doc": "Defines the name that can be used in LPE AOVs for this lobe.",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "Lobe Name",
        "uniform": "true",
        "value": "diffuse"
      },
      "input:matte": {
        "doc": "Defines the name that can be used by the matte system, to output the weight of this lobe in the final material as an AOV.",
        "type": "string",
        "uifolder": "Advanced",
        "uiname": "Matte",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Shading normal, typically defined by bump or normal mapping. Defaults to the smooth surface normal if not set.",
        "type": "vector3",
        "uiname": "Normal"
      },
      "input:roughness": {
        "doc": "Micro-facet distribution (Oren-Nayar) roughness.",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Roughness",
        "value": "0.0"
      },
      "isdefaultversion": "true",
      "node": "LamaTranslucent",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      },
      "version": "1.0"
    },
    "nodedef:ND_layer_bsdf": {
      "defaultinput": "top",
      "doc": "Layer two BSDF's with vertical layering.",
      "input:base": {
        "type": "BSDF",
        "value": ""
      },
      "input:top": {
        "type": "BSDF",
        "value": ""
      },
      "node": "layer",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_layer_vdf": {
      "defaultinput": "top",
      "doc": "Layer a BSDF over a VDF describing the interior media.",
      "input:base": {
        "type": "VDF",
        "value": ""
      },
      "input:top": {
        "type": "BSDF",
        "value": ""
      },
      "node": "layer",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_light": {
      "doc": "A constructor node for the lightshader type.",
      "input:edf": {
        "doc": "Distribution function for light emission.",
        "type": "EDF",
        "value": ""
      },
      "input:exposure": {
        "doc": "Exposure control for the light intensity",
        "type": "float",
        "value": "0.0"
      },
      "input:intensity": {
        "doc": "Multiplier for the light intensity",
        "type": "float",
        "value": "1.0"
      },
      "node": "light",
      "nodegroup": "pbr",
      "output:out": {
        "type": "lightshader"
      }
    },
    "nodedef:ND_lin_adobergb_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "lin_adobergb_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_lin_adobergb_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "lin_adobergb_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_lin_displayp3_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "lin_displayp3_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_lin_displayp3_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "lin_displayp3_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_ln_float": {
      "input:in": {
        "type": "float",
        "value": "1.0"
      },
      "node": "ln",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_ln_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "ln",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_ln_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "ln",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_ln_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "ln",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_luminance_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:lumacoeffs": {
        "enum": "acescg, rec709, rec2020, rec2100",
        "enumvalues": "0.2722287,0.6740818,0.0536895, 0.2126,0.7152,0.0722, 0.2627,0.6780,0.0593, 0.2627,0.6780,0.0593",
        "type": "color3",
        "value": "0.2722287, 0.6740818, 0.0536895"
      },
      "node": "luminance",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_luminance_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:lumacoeffs": {
        "enum": "acescg, rec709, rec2020, rec2100",
        "enumvalues": "0.2722287,0.6740818,0.0536895, 0.2126,0.7152,0.0722, 0.2627,0.6780,0.0593, 0.2627,0.6780,0.0593",
        "type": "color3",
        "value": "0.2722287, 0.6740818, 0.0536895"
      },
      "node": "luminance",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_magnitude_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "magnitude",
      "nodegroup": "math",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_magnitude_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "magnitude",
      "nodegroup": "math",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_magnitude_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "magnitude",
      "nodegroup": "math",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_mask_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "mask",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_matte_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "matte",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_max_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_max_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_max_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_max_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_max_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_max_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_max_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_max_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_max_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_max_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_max_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "max",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_measured_edf": {
      "doc": "Constructs an EDF emitting light according to a measured IES light profile.",
      "input:color": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "node": "measured_edf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_min_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_min_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_min_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_min_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_min_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_min_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_min_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_min_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_min_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_min_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_min_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "min",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_minus_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "minus",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_minus_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "minus",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_minus_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "minus",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_mix_bsdf": {
      "defaultinput": "bg",
      "doc": "Mix two BSDF's according to an input mix amount.",
      "input:bg": {
        "type": "BSDF",
        "value": ""
      },
      "input:fg": {
        "type": "BSDF",
        "value": ""
      },
      "input:mix": {
        "doc": "Mixing weight, range [0, 1].",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_mix_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_mix_color3_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "color3",
        "uisoftmax": "1,1,1",
        "uisoftmin": "0,0,0",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_mix_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_mix_color4_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "color4",
        "uisoftmax": "1,1,1,1",
        "uisoftmin": "0,0,0,0",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_mix_displacementshader": {
      "input:bg": {
        "type": "displacementshader",
        "value": ""
      },
      "input:fg": {
        "type": "displacementshader",
        "value": ""
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "displacementshader"
      }
    },
    "nodedef:ND_mix_edf": {
      "defaultinput": "bg",
      "doc": "Mix two EDF's according to an input mix amount.",
      "input:bg": {
        "type": "EDF",
        "value": ""
      },
      "input:fg": {
        "type": "EDF",
        "value": ""
      },
      "input:mix": {
        "doc": "Mixing weight, range [0, 1].",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_mix_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_mix_surfaceshader": {
      "input:bg": {
        "type": "surfaceshader",
        "value": ""
      },
      "input:fg": {
        "type": "surfaceshader",
        "value": ""
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "surfaceshader"
      }
    },
    "nodedef:ND_mix_vdf": {
      "defaultinput": "bg",
      "doc": "Mix two VDF's according to an input mix amount.",
      "input:bg": {
        "type": "VDF",
        "value": ""
      },
      "input:fg": {
        "type": "VDF",
        "value": ""
      },
      "input:mix": {
        "doc": "Mixing weight, range [0, 1].",
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "pbr",
      "output:out": {
        "type": "VDF"
      }
    },
    "nodedef:ND_mix_vector2": {
      "input:bg": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:fg": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "vector2"
      }
    },
    "nodedef:ND_mix_vector2_vector2": {
      "input:bg": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:fg": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:mix": {
        "type": "vector2",
        "uisoftmax": "1,1",
        "uisoftmin": "0,0",
        "value": "0.0, 0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "vector2"
      }
    },
    "nodedef:ND_mix_vector3": {
      "input:bg": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "vector3"
      }
    },
    "nodedef:ND_mix_vector3_vector3": {
      "input:bg": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "vector3",
        "uisoftmax": "1,1,1",
        "uisoftmin": "0,0,0",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "vector3"
      }
    },
    "nodedef:ND_mix_vector4": {
      "input:bg": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "vector4"
      }
    },
    "nodedef:ND_mix_vector4_vector4": {
      "input:bg": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "vector4",
        "uisoftmax": "1,1,1,1",
        "uisoftmin": "0,0,0,0",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "vector4"
      }
    },
    "nodedef:ND_mix_volumeshader": {
      "input:bg": {
        "type": "volumeshader",
        "value": ""
      },
      "input:fg": {
        "type": "volumeshader",
        "value": ""
      },
      "input:mix": {
        "type": "float",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "node": "mix",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "volumeshader"
      }
    },
    "nodedef:ND_modulo_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_modulo_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_modulo_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_modulo_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_modulo_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_modulo_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_modulo_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_modulo_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_modulo_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_modulo_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_modulo_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "modulo",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_multiply_bsdfC": {
      "defaultinput": "in1",
      "doc": "A node for adjusting the contribution of a BSDF with a weight.",
      "input:in1": {
        "doc": "The BSDF to scale.",
        "type": "BSDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Scaling weight.",
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_multiply_bsdfF": {
      "defaultinput": "in1",
      "doc": "A node for adjusting the contribution of a BSDF with a weight.",
      "input:in1": {
        "doc": "The BSDF to scale.",
        "type": "BSDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Scaling weight.",
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_multiply_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_multiply_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_multiply_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_multiply_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_multiply_edfC": {
      "defaultinput": "in1",
      "doc": "A node for adjusting the contribution of an EDF with a weight.",
      "input:in1": {
        "doc": "The EDF to scale.",
        "type": "EDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Scaling weight.",
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_multiply_edfF": {
      "defaultinput": "in1",
      "doc": "A node for adjusting the contribution of an EDF with a weight.",
      "input:in1": {
        "doc": "The EDF to scale.",
        "type": "EDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Scaling weight.",
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_multiply_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_multiply_matrix33": {
      "input:in1": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix33"
      }
    },
    "nodedef:ND_multiply_matrix44": {
      "input:in1": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix44"
      }
    },
    "nodedef:ND_multiply_vdfC": {
      "defaultinput": "in1",
      "doc": "A node for adjusting the contribution of an VDF with a weight.",
      "input:in1": {
        "doc": "The VDF to scale.",
        "type": "VDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Scaling weight.",
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "pbr",
      "output:out": {
        "type": "VDF"
      }
    },
    "nodedef:ND_multiply_vdfF": {
      "defaultinput": "in1",
      "doc": "A node for adjusting the contribution of an VDF with a weight.",
      "input:in1": {
        "doc": "The VDF to scale.",
        "type": "VDF",
        "value": ""
      },
      "input:in2": {
        "doc": "Scaling weight.",
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "pbr",
      "output:out": {
        "type": "VDF"
      }
    },
    "nodedef:ND_multiply_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_multiply_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_multiply_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_multiply_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_multiply_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_multiply_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "multiply",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_noise2d_color3": {
      "input:amplitude": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_noise2d_color3FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_noise2d_color4": {
      "input:amplitude": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_noise2d_color4FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_noise2d_float": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_noise2d_vector2": {
      "input:amplitude": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_noise2d_vector2FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_noise2d_vector3": {
      "input:amplitude": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_noise2d_vector3FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_noise2d_vector4": {
      "input:amplitude": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_noise2d_vector4FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "noise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_noise3d_color3": {
      "input:amplitude": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_noise3d_color3FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_noise3d_color4": {
      "input:amplitude": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_noise3d_color4FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_noise3d_float": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_noise3d_vector2": {
      "input:amplitude": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_noise3d_vector2FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_noise3d_vector3": {
      "input:amplitude": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_noise3d_vector3FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_noise3d_vector4": {
      "input:amplitude": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_noise3d_vector4FA": {
      "input:amplitude": {
        "type": "float",
        "value": "1.0"
      },
      "input:pivot": {
        "type": "float",
        "value": "0.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "noise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_normal_vector3": {
      "input:space": {
        "enum": "model,object,world",
        "type": "string",
        "uniform": "true",
        "value": "object"
      },
      "node": "normal",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 1.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_normalize_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "normalize",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_normalize_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "normalize",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_normalize_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "normalize",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_normalmap": {
      "input:in": {
        "type": "vector3",
        "value": "0.5, 0.5, 1.0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:scale": {
        "type": "float",
        "value": "1.0"
      },
      "input:space": {
        "enum": "tangent, object",
        "type": "string",
        "uniform": "true",
        "value": "tangent"
      },
      "input:tangent": {
        "defaultgeomprop": "Tworld",
        "type": "vector3"
      },
      "node": "normalmap",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "normal",
        "type": "vector3"
      }
    },
    "nodedef:ND_oren_nayar_diffuse_bsdf": {
      "bsdf": "R",
      "doc": "A BSDF node for diffuse reflections.",
      "input:color": {
        "type": "color3",
        "value": "0.18, 0.18, 0.18"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:roughness": {
        "type": "float",
        "value": "0.0"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "oren_nayar_diffuse_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_out_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "out",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_outside_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mask": {
        "type": "float",
        "value": "0.0"
      },
      "node": "outside",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_outside_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mask": {
        "type": "float",
        "value": "0.0"
      },
      "node": "outside",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_outside_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:mask": {
        "type": "float",
        "value": "0.0"
      },
      "node": "outside",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_over_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "over",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_overlay_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "overlay",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_overlay_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "overlay",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_overlay_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "overlay",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_place2d_vector2": {
      "input:offset": {
        "type": "vector2",
        "value": "0.0,0.0"
      },
      "input:operationorder": {
        "enum": "SRT, TRS",
        "enumvalues": "0, 1",
        "type": "integer",
        "value": "0"
      },
      "input:pivot": {
        "type": "vector2",
        "value": "0.0,0.0"
      },
      "input:rotate": {
        "type": "float",
        "unit": "degree",
        "unittype": "angle",
        "value": "0.0"
      },
      "input:scale": {
        "type": "vector2",
        "value": "1.0,1.0"
      },
      "input:texcoord": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "place2d",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "texcoord",
        "type": "vector2"
      }
    },
    "nodedef:ND_plus_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "plus",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_plus_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "plus",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_plus_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "plus",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_point_light": {
      "doc": "A light shader node of 'point' type.",
      "input:color": {
        "doc": "Light color.",
        "type": "color3"
      },
      "input:decay_rate": {
        "doc": "Light decay exponent. Defaults to 2 for quadratic decay.",
        "type": "float",
        "value": "2.0"
      },
      "input:intensity": {
        "doc": "Light intensity.",
        "type": "float"
      },
      "input:position": {
        "doc": "Light source position.",
        "type": "vector3"
      },
      "node": "point_light",
      "nodegroup": "light",
      "output:out": {
        "type": "lightshader"
      }
    },
    "nodedef:ND_position_vector3": {
      "input:space": {
        "enum": "model,object,world",
        "type": "string",
        "uniform": "true",
        "value": "object"
      },
      "node": "position",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_power_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_power_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_power_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_power_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_power_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_power_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_power_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_power_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_power_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_power_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_power_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "1.0"
      },
      "node": "power",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_premult_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "premult",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_ramp4_color3": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuebl": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuebr": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuetl": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuetr": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ramp4",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_ramp4_color4": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuebl": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuebr": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuetl": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuetr": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ramp4",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_ramp4_float": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuebl": {
        "type": "float",
        "value": "0.0"
      },
      "input:valuebr": {
        "type": "float",
        "value": "0.0"
      },
      "input:valuetl": {
        "type": "float",
        "value": "0.0"
      },
      "input:valuetr": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ramp4",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_ramp4_vector2": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuebl": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:valuebr": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:valuetl": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:valuetr": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "ramp4",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_ramp4_vector3": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuebl": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuebr": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuetl": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuetr": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ramp4",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_ramp4_vector4": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuebl": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuebr": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuetl": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuetr": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ramp4",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_ramplr_color3": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ramplr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_ramplr_color4": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ramplr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_ramplr_float": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "float",
        "value": "0.0"
      },
      "input:valuer": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ramplr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_ramplr_vector2": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:valuer": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "ramplr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_ramplr_vector3": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ramplr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_ramplr_vector4": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ramplr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_ramptb_color3": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ramptb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_ramptb_color4": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ramptb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_ramptb_float": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "float",
        "value": "0.0"
      },
      "input:valuet": {
        "type": "float",
        "value": "0.0"
      },
      "node": "ramptb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_ramptb_vector2": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:valuet": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "ramptb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_ramptb_vector3": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "ramptb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_ramptb_vector4": {
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "ramptb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_randomcolor_float": {
      "input:brightnesshigh": {
        "type": "float",
        "uiname": "Brightness High",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:brightnesslow": {
        "type": "float",
        "uiname": "Brightness Low",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:huehigh": {
        "type": "float",
        "uiname": "Hue High",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:huelow": {
        "type": "float",
        "uiname": "Hue Low",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:in": {
        "type": "float",
        "uiname": "Input",
        "uisoftmax": "10.0",
        "uisoftmin": "0.0",
        "value": "0.0"
      },
      "input:saturationhigh": {
        "type": "float",
        "uiname": "Saturation High",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:saturationlow": {
        "type": "float",
        "uiname": "Saturation Low",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.825"
      },
      "input:seed": {
        "type": "integer",
        "uiname": "Seed",
        "value": "0"
      },
      "node": "randomcolor",
      "nodegroup": "procedural3d",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_randomcolor_integer": {
      "input:brightnesshigh": {
        "type": "float",
        "uiname": "Brightness High",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:brightnesslow": {
        "type": "float",
        "uiname": "Brightness Low",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:huehigh": {
        "type": "float",
        "uiname": "Hue High",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:huelow": {
        "type": "float",
        "uiname": "Hue Low",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:in": {
        "type": "integer",
        "uiname": "Input",
        "uisoftmax": "10",
        "uisoftmin": "0",
        "value": "0"
      },
      "input:saturationhigh": {
        "type": "float",
        "uiname": "Saturation High",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:saturationlow": {
        "type": "float",
        "uiname": "Saturation Low",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.825"
      },
      "input:seed": {
        "type": "integer",
        "uiname": "Seed",
        "value": "0"
      },
      "node": "randomcolor",
      "nodegroup": "procedural3d",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_randomfloat_float": {
      "input:in": {
        "doc": "Initial randomization seed.",
        "type": "float",
        "uiname": "Input",
        "value": "0.0"
      },
      "input:max": {
        "doc": "The maximum output value.",
        "type": "float",
        "uiname": "Maximum",
        "value": "1.0"
      },
      "input:min": {
        "doc": "The minimum output value.",
        "type": "float",
        "uiname": "Minimum",
        "value": "0.0"
      },
      "input:seed": {
        "doc": "Additional seed.",
        "type": "integer",
        "uiname": "Seed",
        "value": "0"
      },
      "node": "randomfloat",
      "nodegroup": "procedural",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_randomfloat_integer": {
      "input:in": {
        "type": "integer",
        "uiname": "Input",
        "value": "0"
      },
      "input:max": {
        "type": "float",
        "uiname": "Maximum",
        "value": "1.0"
      },
      "input:min": {
        "type": "float",
        "uiname": "Minimum",
        "value": "0.0"
      },
      "input:seed": {
        "type": "integer",
        "uiname": "Seed",
        "value": "0"
      },
      "node": "randomfloat",
      "nodegroup": "procedural",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_range_color3": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_range_color3FA": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_range_color4": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_range_color4FA": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_range_float": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_range_vector2": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:inhigh": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:inlow": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:outhigh": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:outlow": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_range_vector2FA": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_range_vector3": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_range_vector3FA": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_range_vector4": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_range_vector4FA": {
      "input:doclamp": {
        "type": "boolean",
        "value": "false"
      },
      "input:gamma": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "range",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_rec709_display_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "rec709_display_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_rec709_display_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "rec709_display_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_remap_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_remap_color3FA": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_remap_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_remap_color4FA": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_remap_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_remap_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:inhigh": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:inlow": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:outhigh": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:outlow": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_remap_vector2FA": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_remap_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_remap_vector3FA": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_remap_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:inlow": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:outhigh": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:outlow": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_remap_vector4FA": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:inhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:inlow": {
        "type": "float",
        "value": "0.0"
      },
      "input:outhigh": {
        "type": "float",
        "value": "1.0"
      },
      "input:outlow": {
        "type": "float",
        "value": "0.0"
      },
      "node": "remap",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_rgbtohsv_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "rgbtohsv",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_rgbtohsv_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "rgbtohsv",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_rotate2d_vector2": {
      "input:amount": {
        "type": "float",
        "unit": "degree",
        "unittype": "angle",
        "value": "0.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "rotate2d",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_rotate3d_vector3": {
      "input:amount": {
        "type": "float",
        "unit": "degree",
        "unittype": "angle",
        "value": "0.0"
      },
      "input:axis": {
        "type": "vector3",
        "value": "0.0, 1.0, 0.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "rotate3d",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_roughness_anisotropy": {
      "doc": "Calculates anisotropic surface roughness from a scalar roughness/anisotropy parameterization.",
      "input:anisotropy": {
        "type": "float",
        "value": "0.0"
      },
      "input:roughness": {
        "type": "float",
        "value": "0.0"
      },
      "node": "roughness_anisotropy",
      "nodegroup": "pbr",
      "output:out": {
        "type": "vector2"
      }
    },
    "nodedef:ND_roughness_dual": {
      "doc": "Calculates anisotropic surface roughness from a dual surface roughness parameterization.",
      "input:roughness": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "roughness_dual",
      "nodegroup": "pbr",
      "output:out": {
        "type": "vector2"
      }
    },
    "nodedef:ND_saturate_color3": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:lumacoeffs": {
        "enum": "acescg, rec709, rec2020, rec2100",
        "enumvalues": "0.2722287,0.6740818,0.0536895, 0.2126,0.7152,0.0722, 0.2627,0.6780,0.0593, 0.2627,0.6780,0.0593",
        "type": "color3",
        "value": "0.2722287, 0.6740818, 0.0536895"
      },
      "node": "saturate",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_saturate_color4": {
      "input:amount": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:lumacoeffs": {
        "enum": "acescg, rec709, rec2020, rec2100",
        "enumvalues": "0.2722287,0.6740818,0.0536895, 0.2126,0.7152,0.0722, 0.2627,0.6780,0.0593, 0.2627,0.6780,0.0593",
        "type": "color3",
        "value": "0.2722287, 0.6740818, 0.0536895"
      },
      "node": "saturate",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_screen_color3": {
      "input:bg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "screen",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color3"
      }
    },
    "nodedef:ND_screen_color4": {
      "input:bg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:fg": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "screen",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "color4"
      }
    },
    "nodedef:ND_screen_float": {
      "input:bg": {
        "type": "float",
        "value": "0.0"
      },
      "input:fg": {
        "type": "float",
        "value": "0.0"
      },
      "input:mix": {
        "type": "float",
        "value": "1.0"
      },
      "node": "screen",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "bg",
        "type": "float"
      }
    },
    "nodedef:ND_separate2_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "separate2",
      "nodegroup": "channel",
      "output:outx": {
        "default": "0.0",
        "type": "float"
      },
      "output:outy": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_separate3_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "separate3",
      "nodegroup": "channel",
      "output:outb": {
        "default": "0.0",
        "type": "float"
      },
      "output:outg": {
        "default": "0.0",
        "type": "float"
      },
      "output:outr": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_separate3_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "separate3",
      "nodegroup": "channel",
      "output:outx": {
        "default": "0.0",
        "type": "float"
      },
      "output:outy": {
        "default": "0.0",
        "type": "float"
      },
      "output:outz": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_separate4_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "separate4",
      "nodegroup": "channel",
      "output:outa": {
        "default": "0.0",
        "type": "float"
      },
      "output:outb": {
        "default": "0.0",
        "type": "float"
      },
      "output:outg": {
        "default": "0.0",
        "type": "float"
      },
      "output:outr": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_separate4_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "separate4",
      "nodegroup": "channel",
      "output:outw": {
        "default": "0.0",
        "type": "float"
      },
      "output:outx": {
        "default": "0.0",
        "type": "float"
      },
      "output:outy": {
        "default": "0.0",
        "type": "float"
      },
      "output:outz": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_sheen_bsdf": {
      "bsdf": "R",
      "doc": "A microfacet BSDF for the back-scattering properties of cloth-like materials.",
      "input:color": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:roughness": {
        "type": "float",
        "value": "0.3"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "sheen_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_sign_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "sign",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_sign_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "sign",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_sign_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "sign",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_sign_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "sign",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_sign_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "sign",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_sign_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "sign",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_sin_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "sin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_sin_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "sin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_sin_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "sin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_sin_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "sin",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_smoothstep_color3": {
      "input:high": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_smoothstep_color3FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_smoothstep_color4": {
      "input:high": {
        "type": "color4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_smoothstep_color4FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_smoothstep_float": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_smoothstep_vector2": {
      "input:high": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:low": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_smoothstep_vector2FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_smoothstep_vector3": {
      "input:high": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_smoothstep_vector3FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_smoothstep_vector4": {
      "input:high": {
        "type": "vector4",
        "value": "1.0, 1.0, 1.0, 1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_smoothstep_vector4FA": {
      "input:high": {
        "type": "float",
        "value": "1.0"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:low": {
        "type": "float",
        "value": "0.0"
      },
      "node": "smoothstep",
      "nodegroup": "adjustment",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_splitlr_color3": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "color3",
        "uiname": "Left",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "color3",
        "uiname": "Right",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "splitlr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_splitlr_color4": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "color4",
        "uiname": "Left",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "color4",
        "uiname": "Right",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "splitlr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_splitlr_float": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "float",
        "uiname": "Left",
        "value": "0.0"
      },
      "input:valuer": {
        "type": "float",
        "uiname": "Right",
        "value": "0.0"
      },
      "node": "splitlr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_splitlr_vector2": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "vector2",
        "uiname": "Left",
        "value": "0.0, 0.0"
      },
      "input:valuer": {
        "type": "vector2",
        "uiname": "Right",
        "value": "0.0, 0.0"
      },
      "node": "splitlr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_splitlr_vector3": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "vector3",
        "uiname": "Left",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "vector3",
        "uiname": "Right",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "splitlr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_splitlr_vector4": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valuel": {
        "type": "vector4",
        "uiname": "Left",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuer": {
        "type": "vector4",
        "uiname": "Right",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "splitlr",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_splittb_color3": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "color3",
        "uiname": "Bottom",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "color3",
        "uiname": "Top",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "splittb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_splittb_color4": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "color4",
        "uiname": "Bottom",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "color4",
        "uiname": "Top",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "splittb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_splittb_float": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "float",
        "uiname": "Bottom",
        "value": "0.0"
      },
      "input:valuet": {
        "type": "float",
        "uiname": "Top",
        "value": "0.0"
      },
      "node": "splittb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_splittb_vector2": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "vector2",
        "uiname": "Bottom",
        "value": "0.0, 0.0"
      },
      "input:valuet": {
        "type": "vector2",
        "uiname": "Top",
        "value": "0.0, 0.0"
      },
      "node": "splittb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_splittb_vector3": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "vector3",
        "uiname": "Bottom",
        "value": "0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "vector3",
        "uiname": "Top",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "splittb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_splittb_vector4": {
      "input:center": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Center",
        "value": "0.5"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:valueb": {
        "type": "vector4",
        "uiname": "Bottom",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:valuet": {
        "type": "vector4",
        "uiname": "Top",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "splittb",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_spot_light": {
      "doc": "A light shader node of 'spot' type.",
      "input:color": {
        "doc": "Light color.",
        "type": "color3"
      },
      "input:decay_rate": {
        "doc": "Light decay exponent. Defaults to 2 for quadratic decay.",
        "type": "float",
        "value": "2.0"
      },
      "input:direction": {
        "doc": "Light source direction.",
        "type": "vector3"
      },
      "input:inner_angle": {
        "doc": "Inner cone angle.",
        "type": "float"
      },
      "input:intensity": {
        "doc": "Light intensity.",
        "type": "float"
      },
      "input:outer_angle": {
        "doc": "Outer cone angle.",
        "type": "float"
      },
      "input:position": {
        "doc": "Light source position.",
        "type": "vector3"
      },
      "node": "spot_light",
      "nodegroup": "light",
      "output:out": {
        "type": "lightshader"
      }
    },
    "nodedef:ND_sqrt_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "sqrt",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_sqrt_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "sqrt",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_sqrt_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "sqrt",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_sqrt_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "sqrt",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_srgb_displayp3_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "srgb_displayp3_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_srgb_displayp3_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "srgb_displayp3_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_srgb_texture_to_lin_rec709_color3": {
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "srgb_texture_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color3"
      }
    },
    "nodedef:ND_srgb_texture_to_lin_rec709_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "srgb_texture_to_lin_rec709",
      "nodegroup": "colortransform",
      "output:out": {
        "type": "color4"
      }
    },
    "nodedef:ND_standard_surface_surfaceshader": {
      "doc": "Autodesk standard surface shader",
      "inherit": "ND_standard_surface_surfaceshader_100",
      "input:base": {
        "doc": "Multiplier on the intensity of the diffuse reflection.",
        "type": "float",
        "uifolder": "Base",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Base",
        "value": "1.0"
      },
      "input:base_color": {
        "doc": "Color of the diffuse reflection.",
        "type": "color3",
        "uifolder": "Base",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Base Color",
        "value": "0.8, 0.8, 0.8"
      },
      "isdefaultversion": "true",
      "node": "standard_surface",
      "nodegroup": "pbr",
      "version": "1.0.1"
    },
    "nodedef:ND_standard_surface_surfaceshader_100": {
      "doc": "Autodesk standard surface shader",
      "input:base": {
        "doc": "Multiplier on the intensity of the diffuse reflection.",
        "type": "float",
        "uifolder": "Base",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Base",
        "value": "0.8"
      },
      "input:base_color": {
        "doc": "Color of the diffuse reflection.",
        "type": "color3",
        "uifolder": "Base",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Base Color",
        "value": "1.0, 1.0, 1.0"
      },
      "input:coat": {
        "doc": "The weight of a reflective clear-coat layer on top of the material. Use for materials such as car paint or an oily layer.",
        "type": "float",
        "uifolder": "Coat",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Coat",
        "value": "0"
      },
      "input:coat_IOR": {
        "doc": "The index of refraction of the clear-coat layer.",
        "type": "float",
        "uifolder": "Coat",
        "uimin": "0.0",
        "uiname": "Coat Index of Refraction",
        "uisoftmax": "3.0",
        "uisoftmin": "1.0",
        "value": "1.5"
      },
      "input:coat_affect_color": {
        "doc": "Controls the saturation of diffuse reflection and subsurface scattering below the clear-coat.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Coat",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Coat Affect Color",
        "value": "0"
      },
      "input:coat_affect_roughness": {
        "doc": "Controls the roughness of the specular reflection in the layers below the clear-coat.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Coat",
        "uimax": "1",
        "uimin": "0",
        "uiname": "Coat Affect Roughness",
        "value": "0"
      },
      "input:coat_anisotropy": {
        "doc": "The amount of directional bias, or anisotropy, of the clear-coat layer.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Coat",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Coat Anisotropy",
        "value": "0.0"
      },
      "input:coat_color": {
        "doc": "The color of the clear-coat layer's transparency.",
        "type": "color3",
        "uifolder": "Coat",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Coat Color",
        "value": "1, 1, 1"
      },
      "input:coat_normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Input normal for clear-coat layer",
        "type": "vector3",
        "uifolder": "Coat",
        "uiname": "Coat normal"
      },
      "input:coat_rotation": {
        "doc": "The rotation of the anisotropic effect of the clear-coat layer.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Coat",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Coat Rotation",
        "value": "0.0"
      },
      "input:coat_roughness": {
        "doc": "The roughness of the clear-coat reflections. The lower the value, the sharper the reflection.",
        "type": "float",
        "uifolder": "Coat",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Coat Roughness",
        "value": "0.1"
      },
      "input:diffuse_roughness": {
        "doc": "Roughness of the diffuse reflection. Higher values cause the surface to appear flatter and darker.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Base",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Diffuse Roughness",
        "value": "0"
      },
      "input:emission": {
        "doc": "The amount of emitted incandescent light.",
        "type": "float",
        "uifolder": "Emission",
        "uimin": "0.0",
        "uiname": "Emission",
        "uisoftmax": "1.0",
        "value": "0"
      },
      "input:emission_color": {
        "doc": "The color of the emitted light.",
        "type": "color3",
        "uifolder": "Emission",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Emission Color",
        "value": "1, 1, 1"
      },
      "input:metalness": {
        "doc": "Specifies how metallic the material appears. At its maximum, the surface behaves like a metal, using fully specular reflection and complex fresnel.",
        "type": "float",
        "uifolder": "Base",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Metalness",
        "value": "0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "doc": "Input geometric normal",
        "type": "vector3",
        "uifolder": "Geometry",
        "uiname": "Normal"
      },
      "input:opacity": {
        "doc": "The opacity of the entire material.",
        "type": "color3",
        "uifolder": "Geometry",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Opacity",
        "value": "1, 1, 1"
      },
      "input:sheen": {
        "doc": "The weight of a sheen layer that can be used to approximate microfibers or fabrics such as velvet and satin.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Sheen",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Sheen",
        "value": "0"
      },
      "input:sheen_color": {
        "doc": "The color of the sheen layer.",
        "type": "color3",
        "uiadvanced": "true",
        "uifolder": "Sheen",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Sheen Color",
        "value": "1, 1, 1"
      },
      "input:sheen_roughness": {
        "doc": "The roughness of the sheen layer.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Sheen",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Sheen Roughness",
        "value": "0.3"
      },
      "input:specular": {
        "doc": "Multiplier on the intensity of the specular reflection.",
        "type": "float",
        "uifolder": "Specular",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Specular",
        "value": "1"
      },
      "input:specular_IOR": {
        "doc": "Index of refraction for specular reflection.",
        "type": "float",
        "uifolder": "Specular",
        "uimin": "0.0",
        "uiname": "Index of Refraction",
        "uisoftmax": "3.0",
        "uisoftmin": "1.0",
        "value": "1.5"
      },
      "input:specular_anisotropy": {
        "doc": "The directional bias of reflected and transmitted light resulting in materials appearing rougher or glossier in certain directions.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Specular",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Specular Anisotropy",
        "value": "0"
      },
      "input:specular_color": {
        "doc": "Color tint on the specular reflection.",
        "type": "color3",
        "uifolder": "Specular",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Specular Color",
        "value": "1, 1, 1"
      },
      "input:specular_rotation": {
        "doc": "Rotation of the axis of specular anisotropy around the surface normal.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Specular",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Specular Rotation",
        "value": "0"
      },
      "input:specular_roughness": {
        "doc": "The roughness of the specular reflection. Lower numbers produce sharper reflections, higher numbers produce blurrier reflections.",
        "type": "float",
        "uifolder": "Specular",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Specular Roughness",
        "value": "0.2"
      },
      "input:subsurface": {
        "doc": "The blend between diffuse reflection and subsurface scattering. A value of 1.0 indicates full subsurface scattering and a value 0 for diffuse reflection only.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Subsurface",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Subsurface",
        "value": "0"
      },
      "input:subsurface_anisotropy": {
        "doc": "The direction of subsurface scattering. 0 scatters light evenly, positive values scatter forward and negative values scatter backward.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Subsurface",
        "uimax": "1.0",
        "uimin": "-1.0",
        "uiname": "Subsurface Anisotropy",
        "value": "0"
      },
      "input:subsurface_color": {
        "doc": "The color of the subsurface scattering effect.",
        "type": "color3",
        "uiadvanced": "true",
        "uifolder": "Subsurface",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Subsurface Color",
        "value": "1, 1, 1"
      },
      "input:subsurface_radius": {
        "doc": "The mean free path. The distance which light can travel before being scattered inside the surface.",
        "type": "color3",
        "uiadvanced": "true",
        "uifolder": "Subsurface",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Subsurface Radius",
        "value": "1, 1, 1"
      },
      "input:subsurface_scale": {
        "doc": "Scalar weight for the subsurface radius value.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Subsurface",
        "uimin": "0.0",
        "uiname": "Subsurface Scale",
        "uisoftmax": "10.0",
        "value": "1"
      },
      "input:tangent": {
        "defaultgeomprop": "Tworld",
        "doc": "Input geometric tangent",
        "type": "vector3",
        "uifolder": "Geometry",
        "uiname": "Tangent Input"
      },
      "input:thin_film_IOR": {
        "doc": "The index of refraction of the medium surrounding the material.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Thin Film",
        "uimin": "0.0",
        "uiname": "Thin Film Index of Refraction",
        "uisoftmax": "3.0",
        "uisoftmin": "1.0",
        "value": "1.5"
      },
      "input:thin_film_thickness": {
        "doc": "The thickness of the thin film layer on a surface. Use for materials such as multitone car paint or soap bubbles.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Thin Film",
        "uimin": "0.0",
        "uiname": "Thin Film Thickness",
        "uisoftmax": "2000.0",
        "value": "0"
      },
      "input:thin_walled": {
        "doc": "If true the surface is double-sided and represents an infinitely thin shell. Suitable for thin objects such as tree leaves or paper.",
        "type": "boolean",
        "uiadvanced": "true",
        "uifolder": "Geometry",
        "uiname": "Thin Walled",
        "value": "false"
      },
      "input:transmission": {
        "doc": "Transmission of light through the surface for materials such as glass or water. The greater the value the more transparent the material.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Transmission",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Transmission",
        "value": "0"
      },
      "input:transmission_color": {
        "doc": "Color tint on the transmitted light.",
        "type": "color3",
        "uiadvanced": "true",
        "uifolder": "Transmission",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Transmission Color",
        "value": "1, 1, 1"
      },
      "input:transmission_depth": {
        "doc": "Specifies the distance light travels inside the material before its becomes exactly the transmission color according to Beer's law.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Transmission",
        "uimin": "0.0",
        "uiname": "Transmission Depth",
        "uisoftmax": "100.0",
        "value": "0"
      },
      "input:transmission_dispersion": {
        "doc": "Dispersion amount, describing how much the index of refraction varies across wavelengths.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Transmission",
        "uimin": "0.0",
        "uiname": "Transmission Dispersion",
        "uisoftmax": "100.0",
        "value": "0"
      },
      "input:transmission_extra_roughness": {
        "doc": "Additional roughness on top of specular roughness. Positive values blur refractions more than reflections, and negative values blur refractions less.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Transmission",
        "uimax": "1.0",
        "uimin": "-1.0",
        "uiname": "Transmission Roughness",
        "uisoftmin": "0.0",
        "value": "0"
      },
      "input:transmission_scatter": {
        "doc": "Scattering coefficient of the interior medium. Suitable for a large body of liquid or one that is fairly thick, such as an ocean, honey, ice, or frosted glass.",
        "type": "color3",
        "uiadvanced": "true",
        "uifolder": "Transmission",
        "uimax": "1,1,1",
        "uimin": "0,0,0",
        "uiname": "Transmission Scatter",
        "value": "0, 0, 0"
      },
      "input:transmission_scatter_anisotropy": {
        "doc": "The amount of directional bias, or anisotropy, of the scattering.",
        "type": "float",
        "uiadvanced": "true",
        "uifolder": "Transmission",
        "uimax": "1.0",
        "uimin": "0.0",
        "uiname": "Transmission Anisotropy",
        "value": "0"
      },
      "node": "standard_surface",
      "nodegroup": "pbr",
      "output:out": {
        "type": "surfaceshader"
      },
      "version": "1.0.0"
    },
    "nodedef:ND_standard_surface_to_UsdPreviewSurface": {
      "input:base": {
        "type": "float",
        "value": "1"
      },
      "input:base_color": {
        "type": "color3",
        "value": "0.8, 0.8, 0.8"
      },
      "input:coat": {
        "type": "float",
        "value": "0"
      },
      "input:coat_color": {
        "type": "color3",
        "value": "1, 1, 1"
      },
      "input:coat_roughness": {
        "type": "float",
        "value": "0.1"
      },
      "input:emission": {
        "type": "float",
        "value": "0"
      },
      "input:emission_color": {
        "type": "color3",
        "value": "1, 1, 1"
      },
      "input:metalness": {
        "type": "float",
        "value": "0"
      },
      "input:normal": {
        "type": "vector3",
        "value": "0.5, 0.5, 1.0"
      },
      "input:opacity": {
        "type": "color3",
        "value": "1, 1, 1"
      },
      "input:specular": {
        "type": "float",
        "value": "1"
      },
      "input:specular_IOR": {
        "type": "float",
        "value": "1.5"
      },
      "input:specular_color": {
        "type": "color3",
        "value": "1, 1, 1"
      },
      "input:specular_roughness": {
        "type": "float",
        "value": "0.2"
      },
      "node": "standard_surface_to_UsdPreviewSurface",
      "nodegroup": "translation",
      "output:clearcoatRoughness_out": {
        "type": "float"
      },
      "output:clearcoat_out": {
        "type": "float"
      },
      "output:diffuseColor_out": {
        "type": "color3"
      },
      "output:emissiveColor_out": {
        "type": "color3"
      },
      "output:ior_out": {
        "type": "float"
      },
      "output:metallic_out": {
        "type": "float"
      },
      "output:normal_out": {
        "type": "vector3"
      },
      "output:opacity_out": {
        "type": "float"
      },
      "output:roughness_out": {
        "type": "float"
      }
    },
    "nodedef:ND_standard_surface_to_gltf_pbr": {
      "input:base": {
        "type": "float",
        "value": "1"
      },
      "input:base_color": {
        "type": "color3",
        "value": "0.8, 0.8, 0.8"
      },
      "input:coat": {
        "type": "float",
        "value": "0"
      },
      "input:coat_color": {
        "type": "color3",
        "value": "0, 0, 0"
      },
      "input:coat_roughness": {
        "type": "float",
        "value": "0.1"
      },
      "input:emission": {
        "type": "float",
        "value": "0"
      },
      "input:emission_color": {
        "type": "color3",
        "value": "1, 1, 1"
      },
      "input:metalness": {
        "type": "float",
        "value": "0"
      },
      "input:sheen": {
        "type": "float",
        "value": "0"
      },
      "input:sheen_color": {
        "type": "color3",
        "value": "1, 1, 1"
      },
      "input:sheen_roughness": {
        "type": "float",
        "value": "0.3"
      },
      "input:specular_roughness": {
        "type": "float",
        "value": "0.2"
      },
      "input:transmission": {
        "type": "float",
        "value": "0"
      },
      "input:transmission_color": {
        "type": "color3",
        "value": "1, 1, 1"
      },
      "input:transmission_depth": {
        "type": "float",
        "value": "0"
      },
      "node": "standard_surface_to_gltf_pbr",
      "nodegroup": "translation",
      "output:attenuation_color_out": {
        "type": "color3"
      },
      "output:base_color_out": {
        "type": "color3"
      },
      "output:clearcoat_out": {
        "type": "float"
      },
      "output:clearcoat_roughness_out": {
        "type": "float"
      },
      "output:emissive_out": {
        "type": "color3"
      },
      "output:metallic_out": {
        "type": "float"
      },
      "output:roughness_out": {
        "type": "float"
      },
      "output:sheen_color_out": {
        "type": "color3"
      },
      "output:sheen_roughness_out": {
        "type": "float"
      },
      "output:thickness_out": {
        "type": "float"
      },
      "output:transmission_out": {
        "type": "float"
      }
    },
    "nodedef:ND_subsurface_bsdf": {
      "bsdf": "R",
      "doc": "A subsurface scattering BSDF for true subsurface scattering.",
      "input:anisotropy": {
        "type": "float",
        "value": "0.0"
      },
      "input:color": {
        "type": "color3",
        "value": "0.18, 0.18, 0.18"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:radius": {
        "type": "vector3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "subsurface_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_subtract_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_subtract_color3FA": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_subtract_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_subtract_color4FA": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_subtract_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_subtract_matrix33": {
      "input:in1": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix33",
        "value": "0.0,0.0,0.0, 0.0,0.0,0.0, 0.0,0.0,0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix33"
      }
    },
    "nodedef:ND_subtract_matrix33FA": {
      "input:in1": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix33"
      }
    },
    "nodedef:ND_subtract_matrix44": {
      "input:in1": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "matrix44",
        "value": "0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix44"
      }
    },
    "nodedef:ND_subtract_matrix44FA": {
      "input:in1": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "matrix44"
      }
    },
    "nodedef:ND_subtract_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_subtract_vector2FA": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_subtract_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_subtract_vector3FA": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_subtract_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_subtract_vector4FA": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "node": "subtract",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_surface": {
      "doc": "A constructor node for the surfaceshader type.",
      "input:bsdf": {
        "doc": "Distribution function for surface scattering.",
        "type": "BSDF",
        "value": ""
      },
      "input:edf": {
        "doc": "Distribution function for surface emission.",
        "type": "EDF",
        "value": ""
      },
      "input:opacity": {
        "doc": "Surface cutout opacity",
        "type": "float",
        "value": "1.0"
      },
      "node": "surface",
      "nodegroup": "pbr",
      "output:out": {
        "type": "surfaceshader"
      }
    },
    "nodedef:ND_surface_unlit": {
      "doc": "Construct a surface shader from emission and transmission values.",
      "input:emission": {
        "doc": "Surface emission amount.",
        "type": "float",
        "value": "1.0"
      },
      "input:emission_color": {
        "doc": "Surface emission color.",
        "type": "color3",
        "value": "1,1,1"
      },
      "input:opacity": {
        "doc": "Surface cutout opacity.",
        "type": "float",
        "value": "1.0"
      },
      "input:transmission": {
        "doc": "Surface transmission amount.",
        "type": "float",
        "value": "0.0"
      },
      "input:transmission_color": {
        "doc": "Surface transmission color.",
        "type": "color3",
        "value": "1,1,1"
      },
      "node": "surface_unlit",
      "nodegroup": "shader",
      "output:out": {
        "type": "surfaceshader"
      }
    },
    "nodedef:ND_surfacematerial": {
      "input:displacementshader": {
        "type": "displacementshader",
        "value": ""
      },
      "input:surfaceshader": {
        "type": "surfaceshader",
        "value": ""
      },
      "node": "surfacematerial",
      "nodegroup": "material",
      "output:out": {
        "type": "material"
      }
    },
    "nodedef:ND_switch_color3": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "float",
        "value": "0.0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_switch_color3I": {
      "input:in1": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "integer",
        "value": "0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color3"
      }
    },
    "nodedef:ND_switch_color4": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "float",
        "value": "0.0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_switch_color4I": {
      "input:in1": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "integer",
        "value": "0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "color4"
      }
    },
    "nodedef:ND_switch_float": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:in3": {
        "type": "float",
        "value": "0.0"
      },
      "input:in4": {
        "type": "float",
        "value": "0.0"
      },
      "input:in5": {
        "type": "float",
        "value": "0.0"
      },
      "input:which": {
        "type": "float",
        "value": "0.0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_switch_floatI": {
      "input:in1": {
        "type": "float",
        "value": "0.0"
      },
      "input:in2": {
        "type": "float",
        "value": "0.0"
      },
      "input:in3": {
        "type": "float",
        "value": "0.0"
      },
      "input:in4": {
        "type": "float",
        "value": "0.0"
      },
      "input:in5": {
        "type": "float",
        "value": "0.0"
      },
      "input:which": {
        "type": "integer",
        "value": "0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "float"
      }
    },
    "nodedef:ND_switch_vector2": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in3": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in4": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in5": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:which": {
        "type": "float",
        "value": "0.0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_switch_vector2I": {
      "input:in1": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in2": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in3": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in4": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:in5": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:which": {
        "type": "integer",
        "value": "0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector2"
      }
    },
    "nodedef:ND_switch_vector3": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "float",
        "value": "0.0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_switch_vector3I": {
      "input:in1": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "integer",
        "value": "0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector3"
      }
    },
    "nodedef:ND_switch_vector4": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "float",
        "value": "0.0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_switch_vector4I": {
      "input:in1": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in2": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in3": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in4": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:in5": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:which": {
        "type": "integer",
        "value": "0"
      },
      "node": "switch",
      "nodegroup": "conditional",
      "output:out": {
        "defaultinput": "in1",
        "type": "vector4"
      }
    },
    "nodedef:ND_swizzle_color3_color3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrr"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "defaultinput": "in",
        "type": "color3"
      }
    },
    "nodedef:ND_swizzle_color3_color4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrrr"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_swizzle_color3_float": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "r"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_swizzle_color3_vector2": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rr"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_swizzle_color3_vector3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrr"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_swizzle_color3_vector4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrrr"
      },
      "input:in": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_swizzle_color4_color3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrr"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_swizzle_color4_color4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrrr"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_swizzle_color4_float": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "r"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_swizzle_color4_vector2": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rr"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_swizzle_color4_vector3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrr"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_swizzle_color4_vector4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrrr"
      },
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_swizzle_float_color3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrr"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_swizzle_float_color4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "rrrr"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_swizzle_float_vector2": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xx"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_swizzle_float_vector3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxx"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_swizzle_float_vector4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxxx"
      },
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_swizzle_vector2_color3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxx"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_swizzle_vector2_color4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxxx"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_swizzle_vector2_float": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "x"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_swizzle_vector2_vector2": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xx"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_swizzle_vector2_vector3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxx"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_swizzle_vector2_vector4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxxx"
      },
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_swizzle_vector3_color3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxx"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_swizzle_vector3_color4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxxx"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_swizzle_vector3_float": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "x"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_swizzle_vector3_vector2": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xx"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_swizzle_vector3_vector3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxx"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_swizzle_vector3_vector4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxxx"
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_swizzle_vector4_color3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxx"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_swizzle_vector4_color4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxxx"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_swizzle_vector4_float": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "x"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_swizzle_vector4_vector2": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xx"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_swizzle_vector4_vector3": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxx"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_swizzle_vector4_vector4": {
      "input:channels": {
        "type": "string",
        "uniform": "true",
        "value": "xxxx"
      },
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "swizzle",
      "nodegroup": "channel",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_tan_float": {
      "input:in": {
        "type": "float",
        "value": "0.0"
      },
      "node": "tan",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "float"
      }
    },
    "nodedef:ND_tan_vector2": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "node": "tan",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_tan_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "node": "tan",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_tan_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "node": "tan",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_tangent_vector3": {
      "input:index": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:space": {
        "enum": "model,object,world",
        "type": "string",
        "uniform": "true",
        "value": "object"
      },
      "node": "tangent",
      "nodegroup": "geometric",
      "output:out": {
        "default": "1.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_texcoord_vector2": {
      "input:index": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "node": "texcoord",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_texcoord_vector3": {
      "input:index": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "node": "texcoord",
      "nodegroup": "geometric",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_thin_film_bsdf": {
      "bsdf": "R",
      "doc": "Adds an iridescent thin film layer over a microfacet base BSDF.",
      "input:ior": {
        "type": "float",
        "value": "1.5"
      },
      "input:thickness": {
        "type": "float",
        "unit": "nanometer",
        "unittype": "distance",
        "value": "550"
      },
      "node": "thin_film_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_thin_surface": {
      "doc": "A constructor node for the surfaceshader type for non-closed 'thin' objects.",
      "input:back_bsdf": {
        "doc": "Distribution function for back-side surface scattering.",
        "type": "BSDF",
        "value": ""
      },
      "input:back_edf": {
        "doc": "Distribution function for back-side surface emission.",
        "type": "EDF",
        "value": ""
      },
      "input:front_bsdf": {
        "doc": "Distribution function for front-side surface scattering.",
        "type": "BSDF",
        "value": ""
      },
      "input:front_edf": {
        "doc": "Distribution function for front-side surface emission.",
        "type": "EDF",
        "value": ""
      },
      "input:opacity": {
        "doc": "Surface cutout opacity",
        "type": "float",
        "value": "1.0"
      },
      "node": "thin_surface",
      "nodegroup": "pbr",
      "output:out": {
        "type": "surfaceshader"
      }
    },
    "nodedef:ND_tiledimage_color3": {
      "input:default": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:realworldimagesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:realworldtilesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:uvoffset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:uvtiling": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "tiledimage",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_tiledimage_color4": {
      "input:default": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:realworldimagesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:realworldtilesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:uvoffset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:uvtiling": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "tiledimage",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_tiledimage_float": {
      "input:default": {
        "type": "float",
        "value": "0.0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:realworldimagesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:realworldtilesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:uvoffset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:uvtiling": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "tiledimage",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_tiledimage_vector2": {
      "input:default": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:realworldimagesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:realworldtilesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:uvoffset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:uvtiling": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "tiledimage",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_tiledimage_vector3": {
      "input:default": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:realworldimagesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:realworldtilesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:uvoffset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:uvtiling": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "tiledimage",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_tiledimage_vector4": {
      "input:default": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:file": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:realworldimagesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:realworldtilesize": {
        "type": "vector2",
        "unittype": "distance",
        "value": "1.0, 1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "input:uvoffset": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:uvtiling": {
        "type": "vector2",
        "value": "1.0, 1.0"
      },
      "node": "tiledimage",
      "nodegroup": "texture2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_time_float": {
      "input:fps": {
        "type": "float",
        "value": "24.0"
      },
      "node": "time",
      "nodegroup": "application",
      "output:out": {
        "default": "0.041666667",
        "type": "float"
      }
    },
    "nodedef:ND_transformmatrix_vector2M3": {
      "input:in": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:mat": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "transformmatrix",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector2"
      }
    },
    "nodedef:ND_transformmatrix_vector3": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mat": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "transformmatrix",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_transformmatrix_vector3M4": {
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:mat": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "transformmatrix",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_transformmatrix_vector4": {
      "input:in": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:mat": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "transformmatrix",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector4"
      }
    },
    "nodedef:ND_transformnormal_vector3": {
      "input:fromspace": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 1.0"
      },
      "input:tospace": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "transformnormal",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_transformpoint_vector3": {
      "input:fromspace": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:tospace": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "transformpoint",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_transformvector_vector3": {
      "input:fromspace": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:in": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:tospace": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "node": "transformvector",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "vector3"
      }
    },
    "nodedef:ND_translucent_bsdf": {
      "bsdf": "R",
      "doc": "A BSDF node for pure diffuse transmission.",
      "input:color": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "input:normal": {
        "defaultgeomprop": "Nworld",
        "type": "vector3"
      },
      "input:weight": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "node": "translucent_bsdf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "BSDF"
      }
    },
    "nodedef:ND_transpose_matrix33": {
      "input:in": {
        "type": "matrix33",
        "value": "1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0"
      },
      "node": "transpose",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "matrix33"
      }
    },
    "nodedef:ND_transpose_matrix44": {
      "input:in": {
        "type": "matrix44",
        "value": "1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0"
      },
      "node": "transpose",
      "nodegroup": "math",
      "output:out": {
        "defaultinput": "in",
        "type": "matrix44"
      }
    },
    "nodedef:ND_trianglewave_float": {
      "input:in": {
        "type": "float",
        "value": "0"
      },
      "node": "trianglewave",
      "nodegroup": "math",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_triplanarprojection_color3": {
      "input:blend": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "input:default": {
        "type": "color3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:filex": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filey": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filez": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerx": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layery": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerz": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nobject",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "triplanarprojection",
      "nodegroup": "texture3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "color3"
      }
    },
    "nodedef:ND_triplanarprojection_color4": {
      "input:blend": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "input:default": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:filex": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filey": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filez": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerx": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layery": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerz": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nobject",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "triplanarprojection",
      "nodegroup": "texture3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "color4"
      }
    },
    "nodedef:ND_triplanarprojection_float": {
      "input:blend": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "input:default": {
        "type": "float",
        "value": "0.0"
      },
      "input:filex": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filey": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filez": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerx": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layery": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerz": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nobject",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "triplanarprojection",
      "nodegroup": "texture3d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_triplanarprojection_vector2": {
      "input:blend": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "input:default": {
        "type": "vector2",
        "value": "0.0, 0.0"
      },
      "input:filex": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filey": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filez": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerx": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layery": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerz": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nobject",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "triplanarprojection",
      "nodegroup": "texture3d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_triplanarprojection_vector3": {
      "input:blend": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "input:default": {
        "type": "vector3",
        "value": "0.0, 0.0, 0.0"
      },
      "input:filex": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filey": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filez": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerx": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layery": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerz": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nobject",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "triplanarprojection",
      "nodegroup": "texture3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_triplanarprojection_vector4": {
      "input:blend": {
        "type": "float",
        "uimax": "1.0",
        "uimin": "0.0",
        "value": "1.0"
      },
      "input:default": {
        "type": "vector4",
        "value": "0.0, 0.0, 0.0, 0.0"
      },
      "input:filex": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filey": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filez": {
        "type": "filename",
        "uniform": "true",
        "value": ""
      },
      "input:filtertype": {
        "enum": "closest,linear,cubic",
        "type": "string",
        "uniform": "true",
        "value": "linear"
      },
      "input:frameendaction": {
        "enum": "constant,clamp,periodic,mirror",
        "type": "string",
        "uniform": "true",
        "value": "constant"
      },
      "input:frameoffset": {
        "type": "integer",
        "uniform": "true",
        "value": "0"
      },
      "input:framerange": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerx": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layery": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:layerz": {
        "type": "string",
        "uniform": "true",
        "value": ""
      },
      "input:normal": {
        "defaultgeomprop": "Nobject",
        "type": "vector3"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "triplanarprojection",
      "nodegroup": "texture3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0, 0.0",
        "type": "vector4"
      }
    },
    "nodedef:ND_unifiednoise2d_float": {
      "input:clampoutput": {
        "doc": "Clamp the output to the min and max output values.",
        "type": "boolean",
        "uifolder": "Post Process",
        "uiname": "Clamp Output",
        "value": "true"
      },
      "input:diminish": {
        "doc": "The rate at which noise amplitude is diminished for each octave of Fractal noise. Default is 0.5.",
        "type": "float",
        "uifolder": "Fractal",
        "uiname": "Diminish",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.5"
      },
      "input:freq": {
        "doc": "Adjusts the noise frequency, with higher values producing smaller noise shapes. Default is (1,1).",
        "type": "vector2",
        "uifolder": "Common",
        "uiname": "Frequency",
        "value": "1, 1"
      },
      "input:jitter": {
        "doc": "Adjust uniformity of Worley noise; for other noise types jitters the results.",
        "type": "float",
        "uifolder": "Common",
        "uiname": "Jitter",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:lacunarity": {
        "doc": "The exponential scale between successive octaves of Fractal noise. Default is 2.0.",
        "type": "float",
        "uifolder": "Fractal",
        "uiname": "Lacunarity",
        "value": "2"
      },
      "input:octaves": {
        "doc": "The number of octaves of Fractal noise to be generated. Default is 3.",
        "type": "integer",
        "uifolder": "Fractal",
        "uiname": "Octaves",
        "value": "3"
      },
      "input:offset": {
        "doc": "Shift the noise in 2d space. Default is (0,0).",
        "type": "vector2",
        "uifolder": "Common",
        "uiname": "Offset",
        "value": "0, 0"
      },
      "input:outmax": {
        "doc": "The highest values fit to the noise. Default is 1.0.",
        "type": "float",
        "uifolder": "Post Process",
        "uiname": "Output Max",
        "value": "1"
      },
      "input:outmin": {
        "doc": "The lowest values fit to the noise. Default is 0.0.",
        "type": "float",
        "uifolder": "Post Process",
        "uiname": "Output Min",
        "value": "0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "doc": "The input 2d space. Default is the first texture coordinates.",
        "type": "vector2",
        "uifolder": "Common"
      },
      "input:type": {
        "doc": "Menu to select the type of noise: Perlin, Cell, Worley, or Fractal. Default is Perlin.",
        "enum": "Perlin,Cell,Worley,Fractal",
        "enumvalues": "0,1,2,3",
        "type": "integer",
        "uifolder": "Common",
        "uiname": "Noise Type",
        "uisoftmax": "3",
        "uisoftmin": "0",
        "value": "0"
      },
      "node": "unifiednoise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_unifiednoise3d_float": {
      "input:clampoutput": {
        "doc": "Clamp the output to the min and max output values.",
        "type": "boolean",
        "uifolder": "Post Process",
        "uiname": "Clamp Output",
        "value": "true"
      },
      "input:diminish": {
        "doc": "The rate at which noise amplitude is diminished for each octave of Fractal noise. Default is 0.5.",
        "type": "float",
        "uifolder": "Fractal",
        "uiname": "Diminish",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "0.5"
      },
      "input:freq": {
        "doc": "Adjusts the noise frequency, with higher values producing smaller noise shapes. Default is (1,1,1).",
        "type": "vector3",
        "uifolder": "Common",
        "uiname": "Frequency",
        "value": "1, 1, 1"
      },
      "input:jitter": {
        "doc": "Adjust uniformity of Worley noise; for other noise types jitters the results.",
        "type": "float",
        "uifolder": "Common",
        "uiname": "Jitter",
        "uisoftmax": "1.0",
        "uisoftmin": "0.0",
        "value": "1"
      },
      "input:lacunarity": {
        "doc": "The exponential scale between successive octaves of Fractal noise. Default is 2.0.",
        "type": "float",
        "uifolder": "Fractal",
        "uiname": "Lacunarity",
        "value": "2"
      },
      "input:octaves": {
        "doc": "The number of octaves of Fractal noise to be generated. Default is 3.",
        "type": "integer",
        "uifolder": "Fractal",
        "uiname": "Octaves",
        "value": "3"
      },
      "input:offset": {
        "doc": "Shift the noise in 3d space. Default is (0,0,0).",
        "type": "vector3",
        "uifolder": "Common",
        "uiname": "Offset",
        "value": "0, 0, 0"
      },
      "input:outmax": {
        "doc": "The highest values fit to the noise. Default is 1.0.",
        "type": "float",
        "uifolder": "Post Process",
        "uiname": "Output Max",
        "value": "1"
      },
      "input:outmin": {
        "doc": "The lowest values fit to the noise. Default is 0.0.",
        "type": "float",
        "uifolder": "Post Process",
        "uiname": "Output Min",
        "value": "0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "doc": "The input 3d space. Default is position in object-space.",
        "type": "vector3",
        "uifolder": "Common"
      },
      "input:type": {
        "doc": "Menu to select the type of noise: Perlin, Cell, Worley, or Fractal. Default is Perlin.",
        "enum": "Perlin,Cell,Worley,Fractal",
        "enumvalues": "0,1,2,3",
        "type": "integer",
        "uifolder": "Common",
        "uiname": "Noise Type",
        "uisoftmax": "3",
        "uisoftmin": "0",
        "value": "0"
      },
      "node": "unifiednoise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "type": "float"
      }
    },
    "nodedef:ND_uniform_edf": {
      "doc": "An EDF node for uniform emission.",
      "input:color": {
        "type": "color3",
        "value": "1.0, 1.0, 1.0"
      },
      "node": "uniform_edf",
      "nodegroup": "pbr",
      "output:out": {
        "type": "EDF"
      }
    },
    "nodedef:ND_unpremult_color4": {
      "input:in": {
        "type": "color4",
        "value": "0.0, 0.0, 0.0, 1.0"
      },
      "node": "unpremult",
      "nodegroup": "compositing",
      "output:out": {
        "defaultinput": "in",
        "type": "color4"
      }
    },
    "nodedef:ND_volume": {
      "doc": "A constructor node for the volumeshader type.",
      "input:edf": {
        "doc": "Emission distribution function for the medium.",
        "type": "EDF",
        "value": ""
      },
      "input:vdf": {
        "doc": "Volume distribution function for the medium.",
        "type": "VDF",
        "value": ""
      },
      "node": "volume",
      "nodegroup": "pbr",
      "output:out": {
        "type": "volumeshader"
      }
    },
    "nodedef:ND_volumematerial": {
      "input:volumeshader": {
        "type": "volumeshader",
        "value": ""
      },
      "node": "volumematerial",
      "nodegroup": "material",
      "output:out": {
        "type": "material"
      }
    },
    "nodedef:ND_worleynoise2d_float": {
      "input:jitter": {
        "type": "float",
        "value": "1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "worleynoise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_worleynoise2d_vector2": {
      "input:jitter": {
        "type": "float",
        "value": "1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "worleynoise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_worleynoise2d_vector3": {
      "input:jitter": {
        "type": "float",
        "value": "1.0"
      },
      "input:texcoord": {
        "defaultgeomprop": "UV0",
        "type": "vector2"
      },
      "node": "worleynoise2d",
      "nodegroup": "procedural2d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodedef:ND_worleynoise3d_float": {
      "input:jitter": {
        "type": "float",
        "value": "1.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "worleynoise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0",
        "type": "float"
      }
    },
    "nodedef:ND_worleynoise3d_vector2": {
      "input:jitter": {
        "type": "float",
        "value": "1.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "worleynoise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0",
        "type": "vector2"
      }
    },
    "nodedef:ND_worleynoise3d_vector3": {
      "input:jitter": {
        "type": "float",
        "value": "1.0"
      },
      "input:position": {
        "defaultgeomprop": "Pobject",
        "type": "vector3"
      },
      "node": "worleynoise3d",
      "nodegroup": "procedural3d",
      "output:out": {
        "default": "0.0, 0.0, 0.0",
        "type": "vector3"
      }
    },
    "nodegraph:IMPL_gltf_pbr_surfaceshader": {
      "add:one_plus_ior": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "interfacename": "ior",
          "type": "float"
        },
        "type": "float"
      },
      "anisotropic_vdf:isotropic_volume": {
        "input:absorption": {
          "nodename": "attenuation_coeff",
          "type": "vector3"
        },
        "input:anisotropy": {
          "type": "float",
          "value": "0"
        },
        "input:scattering": {
          "type": "vector3",
          "value": "0, 0, 0"
        },
        "type": "VDF"
      },
      "convert:attenuation_color_vec": {
        "input:in": {
          "interfacename": "attenuation_color",
          "type": "color3"
        },
        "type": "vector3"
      },
      "dielectric_bsdf:clearcoat_bsdf": {
        "input:ior": {
          "type": "float",
          "value": "1.5"
        },
        "input:normal": {
          "interfacename": "clearcoat_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "clearcoat_roughness_uv",
          "type": "vector2"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "input:weight": {
          "interfacename": "clearcoat",
          "type": "float"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:tf_transmission_bsdf": {
        "input:ior": {
          "interfacename": "ior",
          "type": "float"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_uv",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "T"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "input:tint": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:transmission_bsdf": {
        "input:ior": {
          "interfacename": "ior",
          "type": "float"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_uv",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "T"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "input:tint": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "divide:ior_div": {
        "input:in1": {
          "nodename": "one_minus_ior",
          "type": "float"
        },
        "input:in2": {
          "nodename": "one_plus_ior",
          "type": "float"
        },
        "type": "float"
      },
      "divide:ln_attenuation_color_vec_over_distance": {
        "input:in1": {
          "nodename": "ln_attenuation_color_vec",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "attenuation_distance",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:sheen_color_normalized": {
        "input:in1": {
          "interfacename": "sheen_color",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "sheen_intensity",
          "type": "float"
        },
        "type": "color3"
      },
      "extract:sheen_color_b": {
        "input:in": {
          "interfacename": "sheen_color",
          "type": "color3"
        },
        "input:index": {
          "type": "integer",
          "value": "2"
        },
        "type": "float"
      },
      "extract:sheen_color_g": {
        "input:in": {
          "interfacename": "sheen_color",
          "type": "color3"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "extract:sheen_color_r": {
        "input:in": {
          "interfacename": "sheen_color",
          "type": "color3"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "generalized_schlick_bsdf:metal_bsdf": {
        "input:color0": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:color90": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_uv",
          "type": "vector2"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "type": "BSDF"
      },
      "generalized_schlick_bsdf:reflection_bsdf": {
        "input:color0": {
          "nodename": "dielectric_f0",
          "type": "color3"
        },
        "input:color90": {
          "nodename": "dielectric_f90",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_uv",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "R"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "type": "BSDF"
      },
      "generalized_schlick_bsdf:tf_metal_bsdf": {
        "input:color0": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:color90": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_uv",
          "type": "vector2"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "type": "BSDF"
      },
      "generalized_schlick_bsdf:tf_reflection_bsdf": {
        "input:color0": {
          "nodename": "dielectric_f0",
          "type": "color3"
        },
        "input:color90": {
          "nodename": "dielectric_f90",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_uv",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "R"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "type": "BSDF"
      },
      "ifequal:opacity": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "nodename": "opacity_mask",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "alpha_mode",
          "type": "integer"
        },
        "input:value2": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "ifequal:opacity_mask": {
        "input:in1": {
          "nodename": "opacity_mask_cutoff",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "alpha",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "alpha_mode",
          "type": "integer"
        },
        "input:value2": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "ifgreatereq:opacity_mask_cutoff": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "interfacename": "alpha",
          "type": "float"
        },
        "input:value2": {
          "interfacename": "alpha_cutoff",
          "type": "float"
        },
        "type": "float"
      },
      "layer:clearcoat_layer": {
        "input:base": {
          "nodename": "sheen_layer",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "clearcoat_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:dielectric_bsdf": {
        "input:base": {
          "nodename": "transmission_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "reflection_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:iridescent_dielectric_bsdf": {
        "input:base": {
          "nodename": "tf_dielectric_bsdf",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "dielectric_thinfilm_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:iridescent_metal_bsdf": {
        "input:base": {
          "nodename": "tf_metal_bsdf",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "metal_thinfilm_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:sheen_layer": {
        "input:base": {
          "nodename": "base_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "sheen_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:tf_dielectric_bsdf": {
        "input:base": {
          "nodename": "tf_transmission_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "tf_reflection_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "ln:ln_attenuation_color_vec": {
        "input:in": {
          "nodename": "attenuation_color_vec",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "max:sheen_color_max_rg": {
        "input:in1": {
          "nodename": "sheen_color_r",
          "type": "float"
        },
        "input:in2": {
          "nodename": "sheen_color_g",
          "type": "float"
        },
        "type": "float"
      },
      "max:sheen_intensity": {
        "input:in1": {
          "nodename": "sheen_color_max_rg",
          "type": "float"
        },
        "input:in2": {
          "nodename": "sheen_color_b",
          "type": "float"
        },
        "type": "float"
      },
      "min:clamped_dielectric_f0_from_ior_specular_color": {
        "input:in1": {
          "nodename": "dielectric_f0_from_ior_specular_color",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "1"
        },
        "type": "color3"
      },
      "mix:base_mix": {
        "input:bg": {
          "nodename": "mix_iridescent_dielectric_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "mix_iridescent_metal_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "metallic",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:mix_iridescent_dielectric_bsdf": {
        "input:bg": {
          "nodename": "dielectric_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "iridescent_dielectric_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "iridescence",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:mix_iridescent_metal_bsdf": {
        "input:bg": {
          "nodename": "metal_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "iridescent_metal_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "iridescence",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:tf_transmission_mix": {
        "input:bg": {
          "nodename": "diffuse_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "tf_transmission_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "transmission",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:transmission_mix": {
        "input:bg": {
          "nodename": "diffuse_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "transmission_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "transmission",
          "type": "float"
        },
        "type": "BSDF"
      },
      "multiply:attenuation_coeff": {
        "input:in1": {
          "nodename": "ln_attenuation_color_vec_over_distance",
          "type": "vector3"
        },
        "input:in2": {
          "type": "float",
          "value": "-1"
        },
        "type": "vector3"
      },
      "multiply:dielectric_f0": {
        "input:in1": {
          "nodename": "clamped_dielectric_f0_from_ior_specular_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "specular",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:dielectric_f0_from_ior": {
        "input:in1": {
          "nodename": "ior_div",
          "type": "float"
        },
        "input:in2": {
          "nodename": "ior_div",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:dielectric_f0_from_ior_specular_color": {
        "input:in1": {
          "interfacename": "specular_color",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "dielectric_f0_from_ior",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:dielectric_f90": {
        "input:in1": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:in2": {
          "interfacename": "specular",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:emission_color": {
        "input:in1": {
          "interfacename": "emissive",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "emissive_strength",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:sheen_roughness_sq": {
        "input:in1": {
          "interfacename": "sheen_roughness",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "sheen_roughness",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_gltf_pbr_surfaceshader",
      "oren_nayar_diffuse_bsdf:diffuse_bsdf": {
        "input:color": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "BSDF"
      },
      "output:out": {
        "nodename": "shader_constructor",
        "type": "surfaceshader"
      },
      "roughness_anisotropy:clearcoat_roughness_uv": {
        "input:roughness": {
          "interfacename": "clearcoat_roughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "roughness_anisotropy:roughness_uv": {
        "input:roughness": {
          "interfacename": "roughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "sheen_bsdf:sheen_bsdf": {
        "input:color": {
          "nodename": "sheen_color_normalized",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "sheen_roughness_sq",
          "type": "float"
        },
        "input:weight": {
          "nodename": "sheen_intensity",
          "type": "float"
        },
        "type": "BSDF"
      },
      "subtract:one_minus_ior": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "interfacename": "ior",
          "type": "float"
        },
        "type": "float"
      },
      "surface:shader_constructor": {
        "input:bsdf": {
          "nodename": "clearcoat_layer",
          "type": "BSDF"
        },
        "input:edf": {
          "nodename": "emission",
          "type": "EDF"
        },
        "input:opacity": {
          "nodename": "opacity",
          "type": "float"
        },
        "type": "surfaceshader"
      },
      "thin_film_bsdf:dielectric_thinfilm_bsdf": {
        "input:ior": {
          "interfacename": "iridescence_ior",
          "type": "float"
        },
        "input:thickness": {
          "interfacename": "iridescence_thickness",
          "type": "float"
        },
        "type": "BSDF"
      },
      "thin_film_bsdf:metal_thinfilm_bsdf": {
        "input:ior": {
          "interfacename": "iridescence_ior",
          "type": "float"
        },
        "input:thickness": {
          "interfacename": "iridescence_thickness",
          "type": "float"
        },
        "type": "BSDF"
      },
      "uniform_edf:emission": {
        "input:color": {
          "nodename": "emission_color",
          "type": "color3"
        },
        "type": "EDF"
      }
    },
    "nodegraph:IMPL_lama_conductor": {
      "add:roughness_bitangent": {
        "input:in1": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:in2": {
          "nodename": "roughness_additional",
          "type": "float"
        },
        "type": "float"
      },
      "artistic_ior:artistic_ior": {
        "input:edge_color": {
          "interfacename": "edgeColor",
          "type": "color3"
        },
        "input:reflectivity": {
          "interfacename": "reflectivity",
          "type": "color3"
        },
        "type": "multioutput"
      },
      "clamp:roughness_bitangent_clamped": {
        "input:in": {
          "nodename": "roughness_bitangent",
          "type": "float"
        },
        "type": "float"
      },
      "colorspace": "acescg",
      "combine2:roughness_linear": {
        "input:in1": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:in2": {
          "nodename": "roughness_bitangent_clamped",
          "type": "float"
        },
        "type": "vector2"
      },
      "conductor_bsdf:conductor_bsdf": {
        "input:distribution": {
          "type": "string",
          "value": "ggx"
        },
        "input:extinction": {
          "nodename": "relative_kappa",
          "type": "color3"
        },
        "input:ior": {
          "nodename": "relative_eta",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_anisotropic_squared_clamped",
          "type": "vector2"
        },
        "input:tangent": {
          "nodename": "tangent_rotate_normalize",
          "type": "vector3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "convert:convert_extinction": {
        "input:in": {
          "interfacename": "extinction",
          "type": "vector3"
        },
        "type": "color3"
      },
      "convert:convert_ior": {
        "input:in": {
          "interfacename": "IOR",
          "type": "vector3"
        },
        "type": "color3"
      },
      "divide:iridescence_relative_ior": {
        "input:in1": {
          "interfacename": "iridescenceIOR",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "exteriorIOR",
          "type": "float"
        },
        "type": "float"
      },
      "divide:relative_eta": {
        "input:in1": {
          "nodename": "eta_switch",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "exterior_ior_switch",
          "type": "float"
        },
        "type": "color3"
      },
      "divide:relative_kappa": {
        "input:in1": {
          "nodename": "kappa_switch",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "exterior_ior_switch",
          "type": "float"
        },
        "type": "color3"
      },
      "ifgreater:exterior_ior_switch": {
        "input:in1": {
          "interfacename": "iridescenceIOR",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "exteriorIOR",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "iridescenceThickness",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "ifgreatereq:delta": {
        "input:in1": {
          "nodename": "roughness_inverse",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "anisotropy",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "layer:thin_film_conductor_bsdf": {
        "input:base": {
          "nodename": "conductor_bsdf",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "thin_film_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "max:roughness_anisotropic_squared_clamped": {
        "input:in1": {
          "nodename": "roughness_anisotropic_squared",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "0.000001"
        },
        "type": "vector2"
      },
      "multiply:roughness_additional": {
        "input:in1": {
          "interfacename": "anisotropy",
          "type": "float"
        },
        "input:in2": {
          "nodename": "delta",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:tangent_rotate_degree": {
        "input:in1": {
          "interfacename": "anisotropyRotation",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-360"
        },
        "type": "float"
      },
      "multiply:tinted_bsdf": {
        "input:in1": {
          "nodename": "thin_film_conductor_bsdf",
          "type": "BSDF"
        },
        "input:in2": {
          "interfacename": "tint",
          "type": "color3"
        },
        "type": "BSDF"
      },
      "nodedef": "ND_lama_conductor",
      "normalize:tangent_rotate_normalize": {
        "input:in": {
          "nodename": "tangent_rotate",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "tinted_bsdf",
        "type": "BSDF"
      },
      "power:roughness_anisotropic_squared": {
        "input:in1": {
          "nodename": "roughness_linear",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "2"
        },
        "type": "vector2"
      },
      "rotate3d:tangent_rotate": {
        "input:amount": {
          "nodename": "tangent_rotate_degree",
          "type": "float"
        },
        "input:axis": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:in": {
          "interfacename": "anisotropyDirection",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "subtract:roughness_inverse": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "roughness",
          "type": "float"
        },
        "type": "float"
      },
      "switch:eta_switch": {
        "input:in1": {
          "nodename": "convert_ior",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "artistic_ior",
          "output": "ior",
          "type": "color3"
        },
        "input:which": {
          "interfacename": "fresnelMode",
          "type": "integer"
        },
        "type": "color3"
      },
      "switch:kappa_switch": {
        "input:in1": {
          "nodename": "convert_extinction",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "artistic_ior",
          "output": "extinction",
          "type": "color3"
        },
        "input:which": {
          "interfacename": "fresnelMode",
          "type": "integer"
        },
        "type": "color3"
      },
      "thin_film_bsdf:thin_film_bsdf": {
        "input:ior": {
          "nodename": "iridescence_relative_ior",
          "type": "float"
        },
        "input:thickness": {
          "interfacename": "iridescenceThickness",
          "type": "float"
        },
        "type": "BSDF"
      }
    },
    "nodegraph:IMPL_lama_dielectric": {
      "add:roughness_bitangent": {
        "input:in1": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:in2": {
          "nodename": "roughness_additional",
          "type": "float"
        },
        "type": "float"
      },
      "anisotropic_vdf:interior_vdf": {
        "input:absorption": {
          "nodename": "absorption_vector",
          "type": "vector3"
        },
        "input:anisotropy": {
          "interfacename": "scatterAnisotropy",
          "type": "float"
        },
        "input:scattering": {
          "nodename": "scatter_vector",
          "type": "vector3"
        },
        "type": "VDF"
      },
      "artistic_ior:artistic_ior": {
        "input:edge_color": {
          "type": "color3",
          "value": "0.0, 0.0, 0.0"
        },
        "input:reflectivity": {
          "nodename": "reflectivity_color",
          "type": "color3"
        },
        "type": "multioutput"
      },
      "clamp:roughness_bitangent_clamped": {
        "input:in": {
          "nodename": "roughness_bitangent",
          "type": "float"
        },
        "type": "float"
      },
      "colorspace": "acescg",
      "combine2:roughness_linear": {
        "input:in1": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:in2": {
          "nodename": "roughness_bitangent_clamped",
          "type": "float"
        },
        "type": "vector2"
      },
      "convert:absorption_vector": {
        "input:in": {
          "nodename": "absorption",
          "type": "color3"
        },
        "type": "vector3"
      },
      "convert:reflectivity_color": {
        "input:in": {
          "interfacename": "reflectivity",
          "type": "float",
          "uivisible": "false"
        },
        "type": "color3"
      },
      "convert:scatter_vector": {
        "input:in": {
          "interfacename": "scatterColor",
          "type": "color3"
        },
        "type": "vector3"
      },
      "dielectric_bsdf:reflection_bsdf": {
        "input:distribution": {
          "type": "string",
          "value": "ggx"
        },
        "input:ior": {
          "nodename": "relative_ior",
          "type": "float"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_anisotropic_squared_clamped",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "R"
        },
        "input:tangent": {
          "nodename": "tangent_rotate_normalize",
          "type": "vector3"
        },
        "input:tint": {
          "interfacename": "reflectionTint",
          "type": "color3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:transmission_bsdf": {
        "input:distribution": {
          "type": "string",
          "value": "ggx"
        },
        "input:ior": {
          "nodename": "relative_ior",
          "type": "float"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_anisotropic_squared_clamped",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "T"
        },
        "input:tangent": {
          "nodename": "tangent_rotate_normalize",
          "type": "vector3"
        },
        "input:tint": {
          "interfacename": "transmissionTint",
          "type": "color3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "divide:absorption": {
        "input:in1": {
          "interfacename": "absorptionColor",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "absorptionRadius",
          "type": "float"
        },
        "type": "color3"
      },
      "divide:relative_ior": {
        "input:in1": {
          "nodename": "fresnel_mode_switch",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "exteriorIOR",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreatereq:delta": {
        "input:in1": {
          "nodename": "roughness_inverse",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "anisotropy",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "layer:dielectric_bsdf": {
        "input:base": {
          "nodename": "transmission_layer",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "reflection_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:transmission_layer": {
        "input:base": {
          "nodename": "interior_vdf",
          "type": "VDF"
        },
        "input:top": {
          "nodename": "transmission_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "max:roughness_anisotropic_squared_clamped": {
        "input:in1": {
          "nodename": "roughness_anisotropic_squared",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "0.000001"
        },
        "type": "vector2"
      },
      "multiply:roughness_additional": {
        "input:in1": {
          "interfacename": "anisotropy",
          "type": "float"
        },
        "input:in2": {
          "nodename": "delta",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:tangent_rotate_degree": {
        "input:in1": {
          "interfacename": "rotation",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-360"
        },
        "type": "float"
      },
      "nodedef": "ND_lama_dielectric",
      "normalize:tangent_rotate_normalize": {
        "input:in": {
          "nodename": "tangent_rotate",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "dielectric_bsdf",
        "type": "BSDF"
      },
      "power:roughness_anisotropic_squared": {
        "input:in1": {
          "nodename": "roughness_linear",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "2"
        },
        "type": "vector2"
      },
      "rotate3d:tangent_rotate": {
        "input:amount": {
          "nodename": "tangent_rotate_degree_offset",
          "type": "float"
        },
        "input:axis": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:in": {
          "interfacename": "direction",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "subtract:roughness_inverse": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "roughness",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:tangent_rotate_degree_offset": {
        "input:in1": {
          "nodename": "tangent_rotate_degree",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "switch:fresnel_mode_switch": {
        "input:in1": {
          "interfacename": "IOR",
          "type": "float"
        },
        "input:in2": {
          "channels": "r",
          "nodename": "artistic_ior",
          "output": "ior",
          "type": "float"
        },
        "input:which": {
          "interfacename": "fresnelMode",
          "type": "integer"
        },
        "type": "float"
      }
    },
    "nodegraph:IMPL_lama_emission": {
      "colorspace": "acescg",
      "nodedef": "ND_lama_emission",
      "output:out": {
        "nodename": "emission",
        "type": "EDF"
      },
      "uniform_edf:emission": {
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "type": "EDF"
      }
    },
    "nodegraph:IMPL_lama_sheen": {
      "add:roughness_remapped": {
        "input:in1": {
          "nodename": "roughness_compressed",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.1"
        },
        "type": "float"
      },
      "colorspace": "acescg",
      "multiply:roughness_compressed": {
        "input:in1": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.9"
        },
        "type": "float"
      },
      "nodedef": "ND_lama_sheen",
      "output:out": {
        "nodename": "sheen_bsdf",
        "type": "BSDF"
      },
      "power:roughness_squared": {
        "input:in1": {
          "nodename": "roughness_remapped",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "2"
        },
        "type": "float"
      },
      "sheen_bsdf:sheen_bsdf": {
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "roughness_squared",
          "type": "float"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      }
    },
    "nodegraph:IMPL_lama_sss": {
      "colorspace": "acescg",
      "convert:subsurface_radius_vector": {
        "input:in": {
          "interfacename": "sssRadius",
          "type": "color3"
        },
        "type": "vector3"
      },
      "multiply:subsurface_multiply_unitlength": {
        "input:in1": {
          "nodename": "subsurface_radius_scaled",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "sssUnitLength",
          "type": "float"
        },
        "type": "vector3"
      },
      "multiply:subsurface_radius_scaled": {
        "input:in1": {
          "nodename": "subsurface_radius_vector",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "sssScale",
          "type": "float"
        },
        "type": "vector3"
      },
      "nodedef": "ND_lama_sss",
      "output:out": {
        "nodename": "subsurface_bsdf",
        "type": "BSDF"
      },
      "subsurface_bsdf:subsurface_bsdf": {
        "input:anisotropy": {
          "interfacename": "sssAnisotropy",
          "type": "float"
        },
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:radius": {
          "nodename": "subsurface_multiply_unitlength",
          "type": "vector3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      }
    },
    "nodegraph:IMP_UsdPreviewSurface_surfaceshader": {
      "add:bias_normal": {
        "input:in1": {
          "nodename": "scale_normal",
          "type": "vector3"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "vector3"
      },
      "add:one_plus_ior": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "interfacename": "ior",
          "type": "float"
        },
        "type": "float"
      },
      "artistic_ior:artistic_ior": {
        "input:edge_color": {
          "interfacename": "diffuseColor",
          "type": "color3"
        },
        "input:reflectivity": {
          "interfacename": "diffuseColor",
          "type": "color3"
        },
        "type": "multioutput"
      },
      "conductor_bsdf:metalness_metal_bsdf": {
        "input:extinction": {
          "nodename": "artistic_ior",
          "output": "extinction",
          "type": "color3"
        },
        "input:ior": {
          "nodename": "artistic_ior",
          "output": "ior",
          "type": "color3"
        },
        "input:normal": {
          "nodename": "surface_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "specular_roughness",
          "type": "vector2"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "convert:coat_F0": {
        "input:in": {
          "nodename": "R_sq",
          "type": "float"
        },
        "type": "color3"
      },
      "convert:use_specular_workflow_float": {
        "input:in": {
          "interfacename": "useSpecularWorkflow",
          "type": "integer"
        },
        "type": "float"
      },
      "dielectric_bsdf:transmission_bsdf": {
        "input:ior": {
          "interfacename": "ior",
          "type": "float"
        },
        "input:normal": {
          "nodename": "surface_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "vector2",
          "value": "0.0, 0.0"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "T"
        },
        "input:tint": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "divide:R": {
        "input:in1": {
          "nodename": "one_minus_ior",
          "type": "float"
        },
        "input:in2": {
          "nodename": "one_plus_ior",
          "type": "float"
        },
        "type": "float"
      },
      "generalized_schlick_bsdf:coat_dielectric_bsdf": {
        "input:color0": {
          "nodename": "coat_F0",
          "type": "color3"
        },
        "input:color90": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:normal": {
          "nodename": "surface_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "coat_roughness",
          "type": "vector2"
        },
        "input:weight": {
          "interfacename": "clearcoat",
          "type": "float"
        },
        "type": "BSDF"
      },
      "generalized_schlick_bsdf:specular_bsdf1": {
        "input:color0": {
          "interfacename": "specularColor",
          "type": "color3"
        },
        "input:color90": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:normal": {
          "nodename": "surface_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "specular_roughness",
          "type": "vector2"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "generalized_schlick_bsdf:specular_bsdf2": {
        "input:color0": {
          "nodename": "F0",
          "type": "color3"
        },
        "input:color90": {
          "nodename": "specular_color_metallic",
          "type": "color3"
        },
        "input:normal": {
          "nodename": "surface_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "specular_roughness",
          "type": "vector2"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "ifgreatereq:cutout_opacity": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "interfacename": "opacity",
          "type": "float"
        },
        "input:value2": {
          "interfacename": "opacityThreshold",
          "type": "float"
        },
        "type": "float"
      },
      "layer:coat_bsdf": {
        "input:base": {
          "nodename": "workflow_selector_bsdf",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "coat_dielectric_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:metalness_specular_bsdf": {
        "input:base": {
          "nodename": "transmission_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "specular_bsdf2",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:specular_workflow_bsdf": {
        "input:base": {
          "nodename": "transmission_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "specular_bsdf1",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "mix:F0": {
        "input:bg": {
          "nodename": "specular_color_metallic_R_sq",
          "type": "color3"
        },
        "input:fg": {
          "nodename": "specular_color_metallic",
          "type": "color3"
        },
        "input:mix": {
          "interfacename": "metallic",
          "type": "float"
        },
        "type": "color3"
      },
      "mix:diffuse_bsdf_weight": {
        "input:bg": {
          "nodename": "inverse_metalness",
          "type": "float"
        },
        "input:fg": {
          "type": "float",
          "value": "1.0"
        },
        "input:mix": {
          "nodename": "use_specular_workflow_float",
          "type": "float"
        },
        "type": "float"
      },
      "mix:metalness_workflow_bsdf": {
        "input:bg": {
          "nodename": "metalness_specular_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "metalness_metal_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "metallic",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:specular_color_metallic": {
        "input:bg": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:fg": {
          "interfacename": "diffuseColor",
          "type": "color3"
        },
        "input:mix": {
          "interfacename": "metallic",
          "type": "float"
        },
        "type": "color3"
      },
      "mix:transmission_mix": {
        "input:bg": {
          "nodename": "transmission_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "diffuse_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "opacity",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:workflow_selector_bsdf": {
        "input:bg": {
          "nodename": "metalness_workflow_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "specular_workflow_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "nodename": "use_specular_workflow_float",
          "type": "float"
        },
        "type": "BSDF"
      },
      "multiply:R_sq": {
        "input:in1": {
          "nodename": "R",
          "type": "float"
        },
        "input:in2": {
          "nodename": "R",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:scale_normal": {
        "input:in1": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "vector3"
      },
      "multiply:specular_color_metallic_R_sq": {
        "input:in1": {
          "nodename": "specular_color_metallic",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "R_sq",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_UsdPreviewSurface_surfaceshader",
      "normalmap:surface_normal": {
        "input:in": {
          "nodename": "bias_normal",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "oren_nayar_diffuse_bsdf:diffuse_bsdf": {
        "input:color": {
          "interfacename": "diffuseColor",
          "type": "color3"
        },
        "input:normal": {
          "nodename": "surface_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "float",
          "value": "0"
        },
        "input:weight": {
          "nodename": "diffuse_bsdf_weight",
          "type": "float"
        },
        "type": "BSDF"
      },
      "output:out": {
        "nodename": "surface_constructor",
        "type": "surfaceshader"
      },
      "roughness_anisotropy:coat_roughness": {
        "input:anisotropy": {
          "type": "float",
          "value": "0"
        },
        "input:roughness": {
          "interfacename": "clearcoatRoughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "roughness_anisotropy:specular_roughness": {
        "input:anisotropy": {
          "type": "float",
          "value": "0"
        },
        "input:roughness": {
          "interfacename": "roughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "subtract:inverse_metalness": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "interfacename": "metallic",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:one_minus_ior": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "interfacename": "ior",
          "type": "float"
        },
        "type": "float"
      },
      "surface:surface_constructor": {
        "input:bsdf": {
          "nodename": "coat_bsdf",
          "type": "BSDF"
        },
        "input:edf": {
          "nodename": "emission_edf",
          "type": "EDF"
        },
        "input:opacity": {
          "nodename": "cutout_opacity",
          "type": "float"
        },
        "type": "surfaceshader"
      },
      "uniform_edf:emission_edf": {
        "input:color": {
          "interfacename": "emissiveColor",
          "type": "color3"
        },
        "type": "EDF"
      }
    },
    "nodegraph:IMP_UsdPrimvarReader_boolean": {
      "geompropvalue:primvar": {
        "input:default": {
          "interfacename": "fallback",
          "type": "boolean"
        },
        "input:geomprop": {
          "interfacename": "varname",
          "type": "string"
        },
        "type": "boolean"
      },
      "nodedef": "ND_UsdPrimvarReader_boolean",
      "output:out": {
        "nodename": "primvar",
        "type": "boolean"
      }
    },
    "nodegraph:IMP_UsdPrimvarReader_float": {
      "geompropvalue:primvar": {
        "input:default": {
          "interfacename": "fallback",
          "type": "float"
        },
        "input:geomprop": {
          "interfacename": "varname",
          "type": "string"
        },
        "type": "float"
      },
      "nodedef": "ND_UsdPrimvarReader_float",
      "output:out": {
        "nodename": "primvar",
        "type": "float"
      }
    },
    "nodegraph:IMP_UsdPrimvarReader_integer": {
      "geompropvalue:primvar": {
        "input:default": {
          "interfacename": "fallback",
          "type": "integer"
        },
        "input:geomprop": {
          "interfacename": "varname",
          "type": "string"
        },
        "type": "integer"
      },
      "nodedef": "ND_UsdPrimvarReader_integer",
      "output:out": {
        "nodename": "primvar",
        "type": "integer"
      }
    },
    "nodegraph:IMP_UsdPrimvarReader_string": {
      "geompropvalue:primvar": {
        "input:default": {
          "interfacename": "fallback",
          "type": "string"
        },
        "input:geomprop": {
          "interfacename": "varname",
          "type": "string"
        },
        "type": "string"
      },
      "nodedef": "ND_UsdPrimvarReader_string",
      "output:out": {
        "nodename": "primvar",
        "type": "string"
      }
    },
    "nodegraph:IMP_UsdPrimvarReader_vector2": {
      "geompropvalue:primvar": {
        "input:default": {
          "interfacename": "fallback",
          "type": "vector2"
        },
        "input:geomprop": {
          "interfacename": "varname",
          "type": "string"
        },
        "type": "vector2"
      },
      "nodedef": "ND_UsdPrimvarReader_vector2",
      "output:out": {
        "nodename": "primvar",
        "type": "vector2"
      }
    },
    "nodegraph:IMP_UsdPrimvarReader_vector3": {
      "geompropvalue:primvar": {
        "input:default": {
          "interfacename": "fallback",
          "type": "vector3"
        },
        "input:geomprop": {
          "interfacename": "varname",
          "type": "string"
        },
        "type": "vector3"
      },
      "nodedef": "ND_UsdPrimvarReader_vector3",
      "output:out": {
        "nodename": "primvar",
        "type": "vector3"
      }
    },
    "nodegraph:IMP_UsdPrimvarReader_vector4": {
      "geompropvalue:primvar": {
        "input:default": {
          "interfacename": "fallback",
          "type": "vector4"
        },
        "input:geomprop": {
          "interfacename": "varname",
          "type": "string"
        },
        "type": "vector4"
      },
      "nodedef": "ND_UsdPrimvarReader_vector4",
      "output:out": {
        "nodename": "primvar",
        "type": "vector4"
      }
    },
    "nodegraph:IMP_UsdTransform2d": {
      "nodedef": "ND_UsdTransform2d",
      "output:out": {
        "nodename": "placement",
        "type": "vector2"
      },
      "place2d:placement": {
        "input:offset": {
          "interfacename": "translation",
          "type": "vector2"
        },
        "input:rotate": {
          "interfacename": "rotation",
          "type": "float"
        },
        "input:scale": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "input:texcoord": {
          "interfacename": "in",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:IMP_UsdUVTexture_22": {
      "add:image_bias": {
        "input:in1": {
          "nodename": "image_scale",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "bias",
          "type": "color4"
        },
        "type": "color4"
      },
      "image:image_reader": {
        "input:default": {
          "interfacename": "fallback",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:texcoord": {
          "interfacename": "st",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "wrapS",
          "type": "string"
        },
        "input:vaddressmode": {
          "interfacename": "wrapT",
          "type": "string"
        },
        "type": "color4"
      },
      "multiply:image_scale": {
        "input:in1": {
          "nodename": "image_reader",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_UsdUVTexture",
      "output:a": {
        "channels": "a",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:b": {
        "channels": "b",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:g": {
        "channels": "g",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:r": {
        "channels": "r",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:rgb": {
        "channels": "rgb",
        "nodename": "image_bias",
        "type": "color3"
      },
      "output:rgba": {
        "nodename": "image_bias",
        "type": "color4"
      }
    },
    "nodegraph:IMP_UsdUVTexture_23": {
      "add:image_bias": {
        "input:in1": {
          "nodename": "image_scale",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "bias",
          "type": "color4"
        },
        "type": "color4"
      },
      "image:image_reader": {
        "input:default": {
          "interfacename": "fallback",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:texcoord": {
          "interfacename": "st",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "wrapS",
          "type": "string"
        },
        "input:vaddressmode": {
          "interfacename": "wrapT",
          "type": "string"
        },
        "type": "color4"
      },
      "multiply:image_scale": {
        "input:in1": {
          "nodename": "image_reader",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_UsdUVTexture_23",
      "output:a": {
        "channels": "a",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:b": {
        "channels": "b",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:g": {
        "channels": "g",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:r": {
        "channels": "r",
        "nodename": "image_bias",
        "type": "float"
      },
      "output:rgb": {
        "channels": "rgb",
        "nodename": "image_bias",
        "type": "color3"
      }
    },
    "nodegraph:IMP_glossiness_anisotropy": {
      "invert:invert1": {
        "input:in": {
          "interfacename": "glossiness",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_glossiness_anisotropy",
      "output:out": {
        "nodename": "roughness1",
        "type": "vector2"
      },
      "roughness_anisotropy:roughness1": {
        "input:anisotropy": {
          "interfacename": "anisotropy",
          "type": "float"
        },
        "input:roughness": {
          "nodename": "invert1",
          "type": "float"
        },
        "type": "vector2"
      }
    },
    "nodegraph:LdkNG_ColorCorrect_color4": {
      "LdkFloatCorrect:alphaCorrect": {
        "input:clampMax": {
          "interfacename": "alphaClampMax",
          "type": "float"
        },
        "input:clampMin": {
          "interfacename": "alphaClampMin",
          "type": "float"
        },
        "input:clampOutput": {
          "interfacename": "alphaClamp",
          "type": "boolean"
        },
        "input:gain": {
          "interfacename": "alphaGain",
          "type": "float"
        },
        "input:gammaScale": {
          "interfacename": "alphaGamma",
          "type": "float"
        },
        "input:inFloat": {
          "interfacename": "inAlpha",
          "type": "float"
        },
        "input:offset": {
          "interfacename": "alphaOffset",
          "type": "float"
        },
        "type": "float"
      },
      "add:addOffset": {
        "input:in1": {
          "nodename": "ifColGain",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "colOffset",
          "type": "color3"
        },
        "type": "color3"
      },
      "add:hasGain": {
        "input:in1": {
          "nodename": "hasSatGain",
          "type": "float"
        },
        "input:in2": {
          "nodename": "hasValGain",
          "type": "float"
        },
        "type": "float"
      },
      "add:hasShift": {
        "input:in1": {
          "nodename": "hasGain",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "hueShift",
          "type": "float"
        },
        "type": "float"
      },
      "clamp:clampCol": {
        "input:high": {
          "interfacename": "colClampMax",
          "type": "color3"
        },
        "input:in": {
          "nodename": "gammaAdjustCol",
          "type": "color3"
        },
        "input:low": {
          "interfacename": "colClampMin",
          "type": "color3"
        },
        "type": "color3"
      },
      "combine2:combineUnpremult": {
        "input:in1": {
          "interfacename": "inColor",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "inAlpha",
          "type": "float"
        },
        "type": "color4"
      },
      "combine2:premultCombiner": {
        "input:in1": {
          "nodename": "ifColClamp",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "alphaCorrect",
          "type": "float"
        },
        "type": "color4"
      },
      "combine3:combine3": {
        "input:in1": {
          "nodename": "normHueShift",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "satGain",
          "type": "float"
        },
        "input:in3": {
          "interfacename": "valGain",
          "type": "float"
        },
        "type": "vector3"
      },
      "convert:colOffsetToVec": {
        "input:in": {
          "interfacename": "colOffset",
          "type": "color3"
        },
        "type": "vector3"
      },
      "convert:invColGainToVec": {
        "input:in": {
          "nodename": "invertColGain",
          "type": "color3"
        },
        "type": "vector3"
      },
      "convert:invGammaToColor": {
        "input:in": {
          "nodename": "invGamma",
          "type": "vector3"
        },
        "type": "color3"
      },
      "divide:invGamma": {
        "input:in1": {
          "type": "vector3",
          "value": "1, 1, 1"
        },
        "input:in2": {
          "nodename": "minGamma",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "divide:normHueShift": {
        "input:in1": {
          "interfacename": "hueShift",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "360"
        },
        "type": "float"
      },
      "dotproduct:hasColGain": {
        "input:in1": {
          "nodename": "invColGainToVec",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1, 1, 1"
        },
        "type": "float"
      },
      "dotproduct:hasColOffset": {
        "input:in1": {
          "nodename": "colOffsetToVec",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1, 1, 1"
        },
        "type": "float"
      },
      "hsvadjust:hsvadjust": {
        "input:amount": {
          "nodename": "combine3",
          "type": "vector3"
        },
        "input:in": {
          "nodename": "ifUnpremult",
          "type": "color3"
        },
        "type": "color3"
      },
      "ifequal:hasSatGain": {
        "input:in1": {
          "type": "float",
          "value": "0"
        },
        "input:in2": {
          "type": "float",
          "value": "1e7"
        },
        "input:value1": {
          "interfacename": "satGain",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "ifequal:hasValGain": {
        "input:in1": {
          "type": "float",
          "value": "0"
        },
        "input:in2": {
          "type": "float",
          "value": "1e7"
        },
        "input:value1": {
          "interfacename": "valGain",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "ifequal:ifColClamp": {
        "input:in1": {
          "nodename": "clampCol",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "gammaAdjustCol",
          "type": "color3"
        },
        "input:value1": {
          "interfacename": "colClamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color3"
      },
      "ifequal:ifHSVAdjust": {
        "input:in1": {
          "nodename": "ifUnpremult",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "hsvadjust",
          "type": "color3"
        },
        "input:value1": {
          "nodename": "hasShift",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "ifequal:ifPremult": {
        "input:in1": {
          "nodename": "premult",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "premultCombiner",
          "type": "color4"
        },
        "input:value1": {
          "interfacename": "premultiplyResult",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color4"
      },
      "ifequal:ifUnpremult": {
        "input:in1": {
          "nodename": "extractUnpremult",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "inColor",
          "type": "color3"
        },
        "input:value1": {
          "interfacename": "unpremultiplyInput",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color3"
      },
      "ifgreater:ifColGain": {
        "input:in1": {
          "nodename": "mulColGain",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "ifHSVAdjust",
          "type": "color3"
        },
        "input:value1": {
          "nodename": "hasColGain",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1e-06"
        },
        "type": "color3"
      },
      "ifgreater:ifgreater": {
        "input:in1": {
          "nodename": "addOffset",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "ifColGain",
          "type": "color3"
        },
        "input:value1": {
          "nodename": "hasColOffset",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1e-06"
        },
        "type": "color3"
      },
      "invert:invertColGain": {
        "input:amount": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:in": {
          "interfacename": "colGain",
          "type": "color3"
        },
        "type": "color3"
      },
      "max:minGamma": {
        "input:in1": {
          "interfacename": "colGamma",
          "type": "vector3"
        },
        "input:in2": {
          "type": "float",
          "value": "1e-06"
        },
        "type": "vector3"
      },
      "multiply:mulColGain": {
        "input:in1": {
          "nodename": "ifHSVAdjust",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "colGain",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "LdkND_ColorCorrect_color4",
      "output:outColor": {
        "nodename": "ifPremult",
        "type": "color4"
      },
      "power:gammaAdjustCol": {
        "input:in1": {
          "nodename": "ifgreater",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "invGammaToColor",
          "type": "color3"
        },
        "type": "color3"
      },
      "premult:premult": {
        "input:in": {
          "nodename": "premultCombiner",
          "type": "color4"
        },
        "type": "color4"
      },
      "swizzle:extractUnpremult": {
        "input:channels": {
          "type": "string",
          "value": "rgb"
        },
        "input:in": {
          "nodename": "unpremult",
          "type": "color4"
        },
        "type": "color3"
      },
      "unpremult:unpremult": {
        "input:in": {
          "nodename": "combineUnpremult",
          "type": "color4"
        },
        "type": "color4"
      }
    },
    "nodegraph:LdkNG_FloatCorrect_float": {
      "add:addOffset": {
        "input:in1": {
          "nodename": "ifGain",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "offset",
          "type": "float"
        },
        "type": "float"
      },
      "clamp:clamp": {
        "input:high": {
          "interfacename": "clampMax",
          "type": "float"
        },
        "input:in": {
          "nodename": "ifGamma",
          "type": "float"
        },
        "input:low": {
          "interfacename": "clampMin",
          "type": "float"
        },
        "type": "float"
      },
      "divide:oneOverGamma": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "interfacename": "gammaScale",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:ifClamp": {
        "input:in1": {
          "nodename": "clamp",
          "type": "float"
        },
        "input:in2": {
          "nodename": "ifGamma",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "clampOutput",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "float"
      },
      "ifequal:ifGain": {
        "input:in1": {
          "interfacename": "inFloat",
          "type": "float"
        },
        "input:in2": {
          "nodename": "mulGain",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "gain",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "ifequal:ifGamma": {
        "input:in1": {
          "nodename": "ifOffset",
          "type": "float"
        },
        "input:in2": {
          "nodename": "power",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "gammaScale",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "ifequal:ifOffset": {
        "input:in1": {
          "nodename": "ifGain",
          "type": "float"
        },
        "input:in2": {
          "nodename": "addOffset",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "offset",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "multiply:mulGain": {
        "input:in1": {
          "interfacename": "inFloat",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "gain",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "LdkND_FloatCorrect_float",
      "output:outFloat": {
        "nodename": "ifClamp",
        "type": "float"
      },
      "power:power": {
        "input:in1": {
          "nodename": "ifOffset",
          "type": "float"
        },
        "input:in2": {
          "nodename": "oneOverGamma",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaIMP_blinn_surfaceshader": {
      "burley_diffuse_bsdf:diffuse_bsdf": {
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "float",
          "value": "0.0"
        },
        "input:weight": {
          "interfacename": "diffuse",
          "type": "float"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:coat_dielectric_bsdf": {
        "input:ior": {
          "type": "float",
          "value": "1.5"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "vector2",
          "value": "0.0, 0.0"
        },
        "input:tint": {
          "interfacename": "reflectedColor",
          "type": "color3"
        },
        "input:weight": {
          "interfacename": "reflectivity",
          "type": "float"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:transmission_bsdf": {
        "input:ior": {
          "type": "float",
          "value": "1.5"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "vector2",
          "value": "0.0, 0.0"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "T"
        },
        "input:tint": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "generalized_schlick_bsdf:specular_bsdf1": {
        "input:color0": {
          "interfacename": "specularColor",
          "type": "color3"
        },
        "input:color90": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "specular_roughness",
          "type": "vector2"
        },
        "input:weight": {
          "interfacename": "specularRollOff",
          "type": "float"
        },
        "type": "BSDF"
      },
      "layer:coat_bsdf": {
        "input:base": {
          "nodename": "specular_workflow_bsdf",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "coat_dielectric_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:specular_workflow_bsdf": {
        "input:base": {
          "nodename": "transmission_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "specular_bsdf1",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "luminance:transparency_luminance": {
        "input:in": {
          "interfacename": "transparency",
          "type": "color3"
        },
        "type": "color3"
      },
      "mix:transmission_mix": {
        "input:bg": {
          "nodename": "transmission_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "diffuse_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "nodename": "cutout_opacity",
          "type": "float"
        },
        "type": "BSDF"
      },
      "nodedef": "MayaND_blinn_surfaceshader",
      "output:outColor": {
        "nodename": "surface_constructor",
        "type": "surfaceshader"
      },
      "roughness_anisotropy:specular_roughness": {
        "input:anisotropy": {
          "type": "float",
          "value": "0"
        },
        "input:roughness": {
          "interfacename": "eccentricity",
          "type": "float"
        },
        "type": "vector2"
      },
      "subtract:cutout_opacity": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "transparency_luminance_r",
          "type": "float"
        },
        "type": "float"
      },
      "surface:surface_constructor": {
        "input:bsdf": {
          "nodename": "coat_bsdf",
          "type": "BSDF"
        },
        "input:edf": {
          "nodename": "emission_edf",
          "type": "EDF"
        },
        "input:opacity": {
          "nodename": "cutout_opacity",
          "type": "float"
        },
        "type": "surfaceshader"
      },
      "swizzle:transparency_luminance_r": {
        "input:in": {
          "nodename": "transparency_luminance",
          "type": "color3"
        },
        "param:channels": {
          "type": "string",
          "value": "r"
        },
        "type": "float"
      },
      "uniform_edf:emission_edf": {
        "input:color": {
          "interfacename": "incandescence",
          "type": "color3"
        },
        "type": "EDF"
      }
    },
    "nodegraph:MayaIMP_lambert_surfaceshader": {
      "burley_diffuse_bsdf:diffuse_bsdf": {
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "float",
          "value": "0.0"
        },
        "input:weight": {
          "interfacename": "diffuse",
          "type": "float"
        },
        "type": "BSDF"
      },
      "luminance:transparency_luminance": {
        "input:in": {
          "interfacename": "transparency",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "MayaND_lambert_surfaceshader",
      "output:outColor": {
        "nodename": "surface_constructor",
        "type": "surfaceshader"
      },
      "subtract:cutout_opacity": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "transparency_luminance_r",
          "type": "float"
        },
        "type": "float"
      },
      "surface:surface_constructor": {
        "input:bsdf": {
          "nodename": "diffuse_bsdf",
          "type": "BSDF"
        },
        "input:edf": {
          "nodename": "emission_edf",
          "type": "EDF"
        },
        "input:opacity": {
          "nodename": "cutout_opacity",
          "type": "float"
        },
        "type": "surfaceshader"
      },
      "swizzle:transparency_luminance_r": {
        "input:in": {
          "nodename": "transparency_luminance",
          "type": "color3"
        },
        "param:channels": {
          "type": "string",
          "value": "r"
        },
        "type": "float"
      },
      "uniform_edf:emission_edf": {
        "input:color": {
          "interfacename": "incandescence",
          "type": "color3"
        },
        "type": "EDF"
      }
    },
    "nodegraph:MayaIMP_phong_surfaceshader": {
      "add:add0": {
        "input:in1": {
          "type": "float",
          "value": "3.357"
        },
        "input:in2": {
          "nodename": "mul0",
          "type": "float"
        },
        "type": "float"
      },
      "burley_diffuse_bsdf:diffuse_bsdf": {
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "float",
          "value": "0.0"
        },
        "input:weight": {
          "interfacename": "diffuse",
          "type": "float"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:coat_dielectric_bsdf": {
        "input:ior": {
          "type": "float",
          "value": "1.5"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "vector2",
          "value": "0.0, 0.0"
        },
        "input:tint": {
          "interfacename": "reflectedColor",
          "type": "color3"
        },
        "input:weight": {
          "interfacename": "reflectivity",
          "type": "float"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:transmission_bsdf": {
        "input:ior": {
          "type": "float",
          "value": "1.5"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "type": "vector2",
          "value": "0.0, 0.0"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "T"
        },
        "input:tint": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "divide:div0": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "add0",
          "type": "float"
        },
        "type": "float"
      },
      "generalized_schlick_bsdf:specular_bsdf1": {
        "input:color0": {
          "interfacename": "specularColor",
          "type": "color3"
        },
        "input:color90": {
          "type": "color3",
          "value": "1, 1, 1"
        },
        "input:normal": {
          "interfacename": "normalCamera",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "specular_roughness",
          "type": "vector2"
        },
        "input:weight": {
          "type": "float",
          "value": "1"
        },
        "type": "BSDF"
      },
      "layer:coat_bsdf": {
        "input:base": {
          "nodename": "specular_workflow_bsdf",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "coat_dielectric_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:specular_workflow_bsdf": {
        "input:base": {
          "nodename": "transmission_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "specular_bsdf1",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "luminance:transparency_luminance": {
        "input:in": {
          "interfacename": "transparency",
          "type": "color3"
        },
        "type": "color3"
      },
      "mix:transmission_mix": {
        "input:bg": {
          "nodename": "transmission_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "diffuse_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "nodename": "cutout_opacity",
          "type": "float"
        },
        "type": "BSDF"
      },
      "multiply:mul0": {
        "input:in1": {
          "interfacename": "cosinePower",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.454"
        },
        "type": "float"
      },
      "nodedef": "MayaND_phong_surfaceshader",
      "output:outColor": {
        "nodename": "surface_constructor",
        "type": "surfaceshader"
      },
      "roughness_anisotropy:specular_roughness": {
        "input:anisotropy": {
          "type": "float",
          "value": "0"
        },
        "input:roughness": {
          "nodename": "roughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "sqrt:roughness": {
        "input:in": {
          "nodename": "div0",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:cutout_opacity": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "transparency_luminance_r",
          "type": "float"
        },
        "type": "float"
      },
      "surface:surface_constructor": {
        "input:bsdf": {
          "nodename": "coat_bsdf",
          "type": "BSDF"
        },
        "input:edf": {
          "nodename": "emission_edf",
          "type": "EDF"
        },
        "input:opacity": {
          "nodename": "cutout_opacity",
          "type": "float"
        },
        "type": "surfaceshader"
      },
      "swizzle:transparency_luminance_r": {
        "input:in": {
          "nodename": "transparency_luminance",
          "type": "color3"
        },
        "param:channels": {
          "type": "string",
          "value": "r"
        },
        "type": "float"
      },
      "uniform_edf:emission_edf": {
        "input:color": {
          "interfacename": "incandescence",
          "type": "color3"
        },
        "type": "EDF"
      }
    },
    "nodegraph:MayaNG_clamp_vector3": {
      "clamp:clamp1": {
        "input:high": {
          "interfacename": "max",
          "type": "vector3"
        },
        "input:in": {
          "interfacename": "input",
          "type": "vector3"
        },
        "input:low": {
          "interfacename": "min",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "nodedef": "MayaND_clamp_vector3",
      "output:output": {
        "nodename": "clamp1",
        "type": "vector3"
      }
    },
    "nodegraph:MayaNG_fileTexture_color3": {
      "add:offsetColor": {
        "input:in1": {
          "nodename": "scaledColor",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "colorOffset",
          "type": "color3"
        },
        "type": "color3"
      },
      "ifequal:invertIfRequired": {
        "input:in1": {
          "nodename": "invertedColor",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "inColor",
          "type": "color3"
        },
        "input:value1": {
          "interfacename": "invert",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color3"
      },
      "ifgreater:ifUInBounds": {
        "input:in1": {
          "nodename": "offsetColor",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "color3"
        },
        "input:value1": {
          "nodename": "inU",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "color3"
      },
      "ifgreater:ifVInBounds": {
        "input:in1": {
          "nodename": "ifUInBounds",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "color3"
        },
        "input:value1": {
          "nodename": "inV",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "color3"
      },
      "invert:invertedColor": {
        "input:in": {
          "interfacename": "inColor",
          "type": "color3"
        },
        "type": "color3"
      },
      "multiply:adjustedGain": {
        "input:in1": {
          "interfacename": "colorGain",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "exposureGain",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:scaledColor": {
        "input:in1": {
          "nodename": "invertIfRequired",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "adjustedGain",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "MayaND_fileTexture_color3",
      "output:outColor": {
        "nodename": "ifVInBounds",
        "type": "color3"
      },
      "power:exposureGain": {
        "input:in1": {
          "type": "float",
          "value": "2.0"
        },
        "input:in2": {
          "interfacename": "exposure",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:inU": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "x"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:inV": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "y"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_fileTexture_color4": {
      "add:offsetColor": {
        "input:in1": {
          "nodename": "scaledColor",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "colorOffset",
          "type": "color4"
        },
        "type": "color4"
      },
      "combine2:gainRecomposed": {
        "input:in1": {
          "nodename": "adjustedGain",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "gainA",
          "type": "float"
        },
        "type": "color4"
      },
      "combine2:inRecomposed": {
        "input:in1": {
          "nodename": "invertIfRequired",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "inA",
          "type": "float"
        },
        "type": "color4"
      },
      "ifequal:invertIfRequired": {
        "input:in1": {
          "nodename": "invertedColor",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "inRGB",
          "type": "color3"
        },
        "input:value1": {
          "interfacename": "invert",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color3"
      },
      "ifgreater:ifUInBounds": {
        "input:in1": {
          "nodename": "offsetColor",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "color4"
        },
        "input:value1": {
          "nodename": "inU",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "color4"
      },
      "ifgreater:ifVInBounds": {
        "input:in1": {
          "nodename": "ifUInBounds",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "color4"
        },
        "input:value1": {
          "nodename": "inV",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "color4"
      },
      "invert:invertedColor": {
        "input:in": {
          "nodename": "inRGB",
          "type": "color3"
        },
        "type": "color3"
      },
      "multiply:adjustedGain": {
        "input:in1": {
          "nodename": "gainRGB",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "exposureGain",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:scaledColor": {
        "input:in1": {
          "nodename": "inRecomposed",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "gainRecomposed",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "MayaND_fileTexture_color4",
      "output:outColor": {
        "nodename": "ifVInBounds",
        "type": "color4"
      },
      "power:exposureGain": {
        "input:in1": {
          "type": "float",
          "value": "2.0"
        },
        "input:in2": {
          "interfacename": "exposure",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:gainA": {
        "input:channels": {
          "type": "string",
          "value": "a"
        },
        "input:in": {
          "interfacename": "colorGain",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:gainRGB": {
        "input:channels": {
          "type": "string",
          "value": "rgb"
        },
        "input:in": {
          "interfacename": "colorGain",
          "type": "color4"
        },
        "type": "color3"
      },
      "swizzle:inA": {
        "input:channels": {
          "type": "string",
          "value": "a"
        },
        "input:in": {
          "interfacename": "inColor",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:inRGB": {
        "input:channels": {
          "type": "string",
          "value": "rgb"
        },
        "input:in": {
          "interfacename": "inColor",
          "type": "color4"
        },
        "type": "color3"
      },
      "swizzle:inU": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "x"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:inV": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "y"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_fileTexture_float": {
      "add:offsetColor": {
        "input:in1": {
          "nodename": "scaledColor",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "colorOffset",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:invertIfRequired": {
        "input:in1": {
          "nodename": "invertedColor",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "inColor",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "invert",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "float"
      },
      "ifgreater:ifUInBounds": {
        "input:in1": {
          "nodename": "offsetColor",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "float"
        },
        "input:value1": {
          "nodename": "inU",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "float"
      },
      "ifgreater:ifVInBounds": {
        "input:in1": {
          "nodename": "ifUInBounds",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "float"
        },
        "input:value1": {
          "nodename": "inV",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "float"
      },
      "invert:invertedColor": {
        "input:in": {
          "interfacename": "inColor",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:adjustedGain": {
        "input:in1": {
          "nodename": "exposureGain",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "colorGain",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:scaledColor": {
        "input:in1": {
          "nodename": "invertIfRequired",
          "type": "float"
        },
        "input:in2": {
          "nodename": "adjustedGain",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "MayaND_fileTexture_float",
      "output:outColor": {
        "nodename": "ifVInBounds",
        "type": "float"
      },
      "power:exposureGain": {
        "input:in1": {
          "type": "float",
          "value": "2.0"
        },
        "input:in2": {
          "interfacename": "exposure",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:inU": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "x"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:inV": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "y"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_fileTexture_vector2": {
      "add:offsetColor": {
        "input:in1": {
          "nodename": "scaledColor",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "colorOffset",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "ifequal:invertIfRequired": {
        "input:in1": {
          "nodename": "invertedColor",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "inColor",
          "type": "vector2"
        },
        "input:value1": {
          "interfacename": "invert",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector2"
      },
      "ifgreater:ifUInBounds": {
        "input:in1": {
          "nodename": "offsetColor",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "vector2"
        },
        "input:value1": {
          "nodename": "inU",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "vector2"
      },
      "ifgreater:ifVInBounds": {
        "input:in1": {
          "nodename": "ifUInBounds",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "vector2"
        },
        "input:value1": {
          "nodename": "inV",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "vector2"
      },
      "invert:invertedColor": {
        "input:in": {
          "interfacename": "inColor",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:adjustedGain": {
        "input:in1": {
          "interfacename": "colorGain",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "exposureGain",
          "type": "float"
        },
        "type": "vector2"
      },
      "multiply:scaledColor": {
        "input:in1": {
          "nodename": "invertIfRequired",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "adjustedGain",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "MayaND_fileTexture_vector2",
      "output:outColor": {
        "nodename": "ifVInBounds",
        "type": "vector2"
      },
      "power:exposureGain": {
        "input:in1": {
          "type": "float",
          "value": "2.0"
        },
        "input:in2": {
          "interfacename": "exposure",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:inU": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "x"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:inV": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "y"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_fileTexture_vector3": {
      "add:offsetColor": {
        "input:in1": {
          "nodename": "scaledColor",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "colorOffset",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "ifequal:invertIfRequired": {
        "input:in1": {
          "nodename": "invertedColor",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "inColor",
          "type": "vector3"
        },
        "input:value1": {
          "interfacename": "invert",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector3"
      },
      "ifgreater:ifUInBounds": {
        "input:in1": {
          "nodename": "offsetColor",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "vector3"
        },
        "input:value1": {
          "nodename": "inU",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "vector3"
      },
      "ifgreater:ifVInBounds": {
        "input:in1": {
          "nodename": "ifUInBounds",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "vector3"
        },
        "input:value1": {
          "nodename": "inV",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "vector3"
      },
      "invert:invertedColor": {
        "input:in": {
          "interfacename": "inColor",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "multiply:adjustedGain": {
        "input:in1": {
          "interfacename": "colorGain",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "exposureGain",
          "type": "float"
        },
        "type": "vector3"
      },
      "multiply:scaledColor": {
        "input:in1": {
          "nodename": "invertIfRequired",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "adjustedGain",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "nodedef": "MayaND_fileTexture_vector3",
      "output:outColor": {
        "nodename": "ifVInBounds",
        "type": "vector3"
      },
      "power:exposureGain": {
        "input:in1": {
          "type": "float",
          "value": "2.0"
        },
        "input:in2": {
          "interfacename": "exposure",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:inU": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "x"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:inV": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "y"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_fileTexture_vector4": {
      "add:offsetColor": {
        "input:in1": {
          "nodename": "scaledColor",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "colorOffset",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "ifequal:invertIfRequired": {
        "input:in1": {
          "nodename": "invertedColor",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "inColor",
          "type": "vector4"
        },
        "input:value1": {
          "interfacename": "invert",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector4"
      },
      "ifgreater:ifUInBounds": {
        "input:in1": {
          "nodename": "offsetColor",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "vector4"
        },
        "input:value1": {
          "nodename": "inU",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "vector4"
      },
      "ifgreater:ifVInBounds": {
        "input:in1": {
          "nodename": "ifUInBounds",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "defaultColor",
          "type": "vector4"
        },
        "input:value1": {
          "nodename": "inV",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "-1e+07"
        },
        "type": "vector4"
      },
      "invert:invertedColor": {
        "input:in": {
          "interfacename": "inColor",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "multiply:adjustedGain": {
        "input:in1": {
          "interfacename": "colorGain",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "exposureGain",
          "type": "float"
        },
        "type": "vector4"
      },
      "multiply:scaledColor": {
        "input:in1": {
          "nodename": "invertIfRequired",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "adjustedGain",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "nodedef": "MayaND_fileTexture_vector4",
      "output:outColor": {
        "nodename": "ifVInBounds",
        "type": "vector4"
      },
      "power:exposureGain": {
        "input:in1": {
          "type": "float",
          "value": "2.0"
        },
        "input:in2": {
          "interfacename": "exposure",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:inU": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "x"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:inV": {
        "input:channels": {
          "type": "string",
          "uniform": "true",
          "value": "y"
        },
        "input:in": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_linearUV_float": {
      "add:addOffset": {
        "input:in1": {
          "nodename": "multiplyRepeat",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "offset",
          "type": "float"
        },
        "type": "float"
      },
      "add:addOne": {
        "input:in1": {
          "nodename": "subtractFractTranslateFrame",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "add:addOne2": {
        "input:in1": {
          "nodename": "minusFloorUV",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "add:divideByCoverage2OutOfBounds": {
        "input:in1": {
          "nodename": "zeroGreaterDivideByCoverage2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "divideByCoverage2GreaterOne",
          "type": "float"
        },
        "type": "float"
      },
      "add:divideByCoverageOutOfBounds": {
        "input:in1": {
          "nodename": "zeroGreaterDivideByCoverage",
          "type": "float"
        },
        "input:in2": {
          "nodename": "divideByCoverageGreaterOne",
          "type": "float"
        },
        "type": "float"
      },
      "add:foundBoundsError": {
        "input:in1": {
          "nodename": "divideByCoverage2BoundsCheck",
          "type": "float"
        },
        "input:in2": {
          "nodename": "divideByCoverageBoundsCheck",
          "type": "float"
        },
        "type": "float"
      },
      "divide:divByCoverage2": {
        "input:in1": {
          "nodename": "ifgreaterThanCoverage",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "coverage",
          "type": "float"
        },
        "type": "float"
      },
      "divide:divideByCoverage": {
        "input:in1": {
          "nodename": "subtractTranslateFrame",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "coverage",
          "type": "float"
        },
        "type": "float"
      },
      "floor:floorTranslateFrame": {
        "input:in": {
          "interfacename": "translateFrame",
          "type": "float"
        },
        "type": "float"
      },
      "floor:floorUV": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:boundsCheck": {
        "input:in1": {
          "nodename": "addOffset",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-1e+07"
        },
        "input:value1": {
          "nodename": "foundBoundsError",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "ifequal:ifWrap": {
        "input:in1": {
          "nodename": "divByCoverage2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "divideByCoverage",
          "type": "float"
        },
        "input:value1": {
          "type": "boolean",
          "value": "true"
        },
        "input:value2": {
          "interfacename": "wrap",
          "type": "boolean"
        },
        "type": "float"
      },
      "ifequal:wrapIsFalse": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "interfacename": "wrap",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "false"
        },
        "type": "float"
      },
      "ifgreater:coverageLessThanOne": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "type": "float",
          "value": "1"
        },
        "input:value2": {
          "interfacename": "coverage",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:divideByCoverage2GreaterOne": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "nodename": "divByCoverage2",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "ifgreater:divideByCoverageGreaterOne": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "nodename": "divideByCoverage",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "ifgreater:ifCoverage": {
        "input:in1": {
          "nodename": "ifWrap",
          "type": "float"
        },
        "input:in2": {
          "nodename": "divideByCoverage",
          "type": "float"
        },
        "input:value1": {
          "type": "float",
          "value": "1"
        },
        "input:value2": {
          "interfacename": "coverage",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:ifgreaterThanCoverage": {
        "input:in1": {
          "nodename": "subtractOne",
          "type": "float"
        },
        "input:in2": {
          "nodename": "iflessZero",
          "type": "float"
        },
        "input:value1": {
          "nodename": "subtractFractTranslateFrame",
          "type": "float"
        },
        "input:value2": {
          "interfacename": "coverage",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:ifgreaterThanOne": {
        "input:in1": {
          "nodename": "minusFloorUV",
          "type": "float"
        },
        "input:in2": {
          "nodename": "iflessZero2",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "in",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "ifgreater:iflessZero": {
        "input:in1": {
          "nodename": "addOne",
          "type": "float"
        },
        "input:in2": {
          "nodename": "subtractFractTranslateFrame",
          "type": "float"
        },
        "input:value1": {
          "type": "float",
          "value": "0"
        },
        "input:value2": {
          "nodename": "subtractFractTranslateFrame",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:iflessZero2": {
        "input:in1": {
          "nodename": "addOne2",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "in",
          "type": "float"
        },
        "input:value1": {
          "type": "float",
          "value": "0"
        },
        "input:value2": {
          "interfacename": "in",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:zeroGreaterDivideByCoverage": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "type": "float",
          "value": "0"
        },
        "input:value2": {
          "nodename": "divideByCoverage",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:zeroGreaterDivideByCoverage2": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "type": "float",
          "value": "0"
        },
        "input:value2": {
          "nodename": "divByCoverage2",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:checkDivideByCoverage2": {
        "input:in1": {
          "nodename": "coverageLessThanOne",
          "type": "float"
        },
        "input:in2": {
          "nodename": "wrapIsTrue",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:divideByCoverage2BoundsCheck": {
        "input:in1": {
          "nodename": "checkDivideByCoverage2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "divideByCoverage2OutOfBounds",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:divideByCoverageBoundsCheck": {
        "input:in1": {
          "nodename": "wrapIsFalse",
          "type": "float"
        },
        "input:in2": {
          "nodename": "divideByCoverageOutOfBounds",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:multiplyRepeat": {
        "input:in1": {
          "nodename": "ifCoverage",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "repeat",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "MayaND_linearUV_float",
      "output:out": {
        "nodename": "boundsCheck",
        "type": "float"
      },
      "subtract:minusFloorUV": {
        "input:in1": {
          "interfacename": "in",
          "type": "float"
        },
        "input:in2": {
          "nodename": "floorUV",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:subtractFloorTranslateFrame": {
        "input:in1": {
          "interfacename": "translateFrame",
          "type": "float"
        },
        "input:in2": {
          "nodename": "floorTranslateFrame",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:subtractFractTranslateFrame": {
        "input:in1": {
          "nodename": "ifgreaterThanOne",
          "type": "float"
        },
        "input:in2": {
          "nodename": "subtractFloorTranslateFrame",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:subtractOne": {
        "input:in1": {
          "nodename": "subtractFractTranslateFrame",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "subtract:subtractTranslateFrame": {
        "input:in1": {
          "interfacename": "in",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "translateFrame",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:wrapIsTrue": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "nodename": "wrapIsFalse",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_mirrorUV_float": {
      "add:addOne": {
        "input:in1": {
          "nodename": "doubleFloorIn",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1.0"
        },
        "type": "float"
      },
      "floor:floorHalfIn": {
        "input:in": {
          "nodename": "halfIn",
          "type": "float"
        },
        "type": "float"
      },
      "floor:floorIn": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:ifMirror": {
        "input:in1": {
          "nodename": "canMirror",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "in",
          "type": "float"
        },
        "input:value1": {
          "type": "boolean",
          "value": "true"
        },
        "input:value2": {
          "interfacename": "mirror",
          "type": "boolean"
        },
        "type": "float"
      },
      "ifgreatereq:canMirror": {
        "input:in1": {
          "nodename": "mirroredIn",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "in",
          "type": "float"
        },
        "input:value1": {
          "nodename": "fractHalfIn",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "float"
      },
      "multiply:doubleFloorIn": {
        "input:in1": {
          "nodename": "floorIn",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "2.0"
        },
        "type": "float"
      },
      "multiply:halfIn": {
        "input:in1": {
          "interfacename": "in",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "float"
      },
      "nodedef": "MayaND_mirrorUV_float",
      "output:out": {
        "nodename": "ifMirror",
        "type": "float"
      },
      "subtract:fractHalfIn": {
        "input:in1": {
          "nodename": "halfIn",
          "type": "float"
        },
        "input:in2": {
          "nodename": "floorHalfIn",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:mirroredIn": {
        "input:in1": {
          "nodename": "addOne",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "in",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_noiseUV_vector2": {
      "absval:absNoiseU": {
        "input:in": {
          "nodename": "noiseU",
          "type": "float"
        },
        "type": "float"
      },
      "absval:absNoiseV": {
        "input:in": {
          "nodename": "noiseV",
          "type": "float"
        },
        "type": "float"
      },
      "add:absNoiseSum": {
        "input:in1": {
          "nodename": "absNoiseU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "absNoiseV",
          "type": "float"
        },
        "type": "float"
      },
      "add:noisyUV": {
        "input:in1": {
          "interfacename": "inUV",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "noiseSample",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "add:plusOffset": {
        "input:in1": {
          "nodename": "mulUV",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "vector2"
      },
      "combine2:noiseSample": {
        "input:in1": {
          "nodename": "mulU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "mulV",
          "type": "float"
        },
        "type": "vector2"
      },
      "ifgreater:noiseResult": {
        "input:in1": {
          "nodename": "noisyUV",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "inUV",
          "type": "vector2"
        },
        "input:value1": {
          "nodename": "absNoiseSum",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1.0E-05"
        },
        "type": "vector2"
      },
      "multiply:mulU": {
        "input:in1": {
          "nodename": "noiseSampleU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "noiseU",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:mulUV": {
        "input:in1": {
          "interfacename": "inUV",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "8.0"
        },
        "type": "vector2"
      },
      "multiply:mulV": {
        "input:in1": {
          "nodename": "noiseSampleV",
          "type": "float"
        },
        "input:in2": {
          "nodename": "noiseV",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "MayaND_noiseUV_vector2",
      "noise2d:noiseSampleU": {
        "input:amplitude": {
          "type": "float",
          "value": "2.0"
        },
        "input:pivot": {
          "type": "float",
          "value": "0.0"
        },
        "input:texcoord": {
          "nodename": "mulUV",
          "type": "vector2"
        },
        "type": "float"
      },
      "noise2d:noiseSampleV": {
        "input:amplitude": {
          "type": "float",
          "value": "2.0"
        },
        "input:pivot": {
          "type": "float",
          "value": "0.0"
        },
        "input:texcoord": {
          "nodename": "plusOffset",
          "type": "vector2"
        },
        "type": "float"
      },
      "output:outUV": {
        "nodename": "noiseResult",
        "type": "vector2"
      },
      "swizzle:noiseU": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "noiseUV",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:noiseV": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "noiseUV",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_place2dTexture_vector2": {
      "add:uPlusHalf": {
        "input:in1": {
          "nodename": "processU",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "float"
      },
      "combine2:mirroredUV": {
        "input:in1": {
          "nodename": "mirroredU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "mirroredV",
          "type": "float"
        },
        "type": "vector2"
      },
      "floor:floorHalfV": {
        "input:in": {
          "nodename": "halfV",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:ifOutOfBounds": {
        "input:in1": {
          "type": "vector2",
          "value": "-1e7, -1e7"
        },
        "input:in2": {
          "nodename": "rotatedUV",
          "type": "vector2"
        },
        "input:value1": {
          "type": "float",
          "value": "-1e7"
        },
        "input:value2": {
          "nodename": "minEmulatingOr",
          "type": "float"
        },
        "type": "vector2"
      },
      "ifequal:ifStagger": {
        "input:in1": {
          "nodename": "staggeredU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "processU",
          "type": "float"
        },
        "input:value1": {
          "type": "boolean",
          "value": "true"
        },
        "input:value2": {
          "interfacename": "stagger",
          "type": "boolean"
        },
        "type": "float"
      },
      "ifgreatereq:staggeredU": {
        "input:in1": {
          "nodename": "uPlusHalf",
          "type": "float"
        },
        "input:in2": {
          "nodename": "processU",
          "type": "float"
        },
        "input:value1": {
          "nodename": "fractHalfV",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "float"
      },
      "linearUV:processU": {
        "input:coverage": {
          "nodename": "coverageU",
          "type": "float"
        },
        "input:in": {
          "nodename": "channelU",
          "type": "float"
        },
        "input:offset": {
          "nodename": "offsetU",
          "type": "float"
        },
        "input:repeat": {
          "nodename": "repeatU",
          "type": "float"
        },
        "input:translateFrame": {
          "nodename": "translateFrameU",
          "type": "float"
        },
        "input:wrap": {
          "interfacename": "wrapU",
          "type": "boolean"
        },
        "type": "float"
      },
      "linearUV:processV": {
        "input:coverage": {
          "nodename": "coverageV",
          "type": "float"
        },
        "input:in": {
          "nodename": "channelV",
          "type": "float"
        },
        "input:offset": {
          "nodename": "offsetV",
          "type": "float"
        },
        "input:repeat": {
          "nodename": "repeatV",
          "type": "float"
        },
        "input:translateFrame": {
          "nodename": "translateFrameV",
          "type": "float"
        },
        "input:wrap": {
          "interfacename": "wrapV",
          "type": "boolean"
        },
        "type": "float"
      },
      "min:minEmulatingOr": {
        "input:in1": {
          "nodename": "processU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "processV",
          "type": "float"
        },
        "nodedef": "ND_min_float",
        "type": "float"
      },
      "mirrorUV:mirroredU": {
        "input:in": {
          "nodename": "ifStagger",
          "type": "float"
        },
        "input:mirror": {
          "interfacename": "mirrorU",
          "type": "boolean"
        },
        "type": "float"
      },
      "mirrorUV:mirroredV": {
        "input:in": {
          "nodename": "processV",
          "type": "float"
        },
        "input:mirror": {
          "interfacename": "mirrorV",
          "type": "boolean"
        },
        "type": "float"
      },
      "multiply:halfV": {
        "input:in1": {
          "nodename": "processV",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "float"
      },
      "nodedef": "MayaND_place2dTexture_vector2",
      "noiseUV:addNoise": {
        "input:inUV": {
          "nodename": "rotatedFrame",
          "type": "vector2"
        },
        "input:noiseUV": {
          "interfacename": "noiseUV",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "output:outUV": {
        "nodename": "ifOutOfBounds",
        "type": "vector2"
      },
      "rotateUV:rotatedFrame": {
        "input:inUV": {
          "interfacename": "uvCoord",
          "type": "vector2"
        },
        "input:rotation": {
          "interfacename": "rotateFrame",
          "type": "float"
        },
        "type": "vector2"
      },
      "rotateUV:rotatedUV": {
        "input:inUV": {
          "nodename": "mirroredUV",
          "type": "vector2"
        },
        "input:rotation": {
          "interfacename": "rotateUV",
          "type": "float"
        },
        "type": "vector2"
      },
      "subtract:fractHalfV": {
        "input:in1": {
          "nodename": "halfV",
          "type": "float"
        },
        "input:in2": {
          "nodename": "floorHalfV",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:channelU": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "nodename": "addNoise",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:channelV": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "nodename": "addNoise",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:coverageU": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "coverage",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:coverageV": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "coverage",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:offsetU": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:offsetV": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:repeatU": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "repeatUV",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:repeatV": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "repeatUV",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:translateFrameU": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "translateFrame",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:translateFrameV": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "translateFrame",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:MayaNG_rotateUV_vector2": {
      "absval:absRotateFrame": {
        "input:in": {
          "interfacename": "rotation",
          "type": "float"
        },
        "type": "float"
      },
      "add:plusOffset": {
        "input:in1": {
          "nodename": "uvOut",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "vector2"
      },
      "add:uvOutV": {
        "input:in1": {
          "nodename": "mul2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "mul3",
          "type": "float"
        },
        "type": "float"
      },
      "combine2:uvOut": {
        "input:in1": {
          "nodename": "uvOutU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "uvOutV",
          "type": "float"
        },
        "type": "vector2"
      },
      "cos:rcos": {
        "input:in": {
          "interfacename": "rotation",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:rotateFrameResult": {
        "input:in1": {
          "nodename": "plusOffset",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "inUV",
          "type": "vector2"
        },
        "input:value1": {
          "nodename": "absRotateFrame",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1.0E-05"
        },
        "type": "vector2"
      },
      "multiply:mul0": {
        "input:in1": {
          "nodename": "uvInU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "rcos",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:mul1": {
        "input:in1": {
          "nodename": "uvInV",
          "type": "float"
        },
        "input:in2": {
          "nodename": "rsin",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:mul2": {
        "input:in1": {
          "nodename": "uvInU",
          "type": "float"
        },
        "input:in2": {
          "nodename": "rsin",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:mul3": {
        "input:in1": {
          "nodename": "uvInV",
          "type": "float"
        },
        "input:in2": {
          "nodename": "rcos",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "MayaND_rotateUV_vector2",
      "output:outUV": {
        "nodename": "rotateFrameResult",
        "type": "vector2"
      },
      "sin:rsin": {
        "input:in": {
          "interfacename": "rotation",
          "type": "float"
        },
        "type": "float"
      },
      "subtract:minusOffset": {
        "input:in1": {
          "interfacename": "inUV",
          "type": "vector2"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "vector2"
      },
      "subtract:uvOutU": {
        "input:in1": {
          "nodename": "mul0",
          "type": "float"
        },
        "input:in2": {
          "nodename": "mul1",
          "type": "float"
        },
        "type": "float"
      },
      "swizzle:uvInU": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "nodename": "minusOffset",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:uvInV": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "nodename": "minusOffset",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_NG_gltf_image_color3_color3_1_0": {
      "divide:invert_scale": {
        "input:in1": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:image": {
        "input:default": {
          "interfacename": "default",
          "type": "color3"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename",
          "uniform": "true"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string",
          "uniform": "true"
        },
        "input:texcoord": {
          "nodename": "place2d",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "uaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "input:vaddressmode": {
          "interfacename": "vaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "type": "color3"
      },
      "multiply:negate_offset": {
        "input:in1": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:in2": {
          "type": "vector2",
          "value": "-1.0, 1.0"
        },
        "type": "vector2"
      },
      "multiply:negate_rotate": {
        "input:in1": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-1.0"
        },
        "type": "float"
      },
      "multiply:scale_image": {
        "input:in1": {
          "interfacename": "factor",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "image",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_gltf_image_color3_color3_1_0",
      "output:out": {
        "nodename": "scale_image",
        "type": "color3"
      },
      "place2d:place2d": {
        "input:offset": {
          "nodename": "negate_offset",
          "type": "vector2"
        },
        "input:operationorder": {
          "interfacename": "operationorder",
          "type": "integer"
        },
        "input:pivot": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "input:rotate": {
          "nodename": "negate_rotate",
          "type": "float"
        },
        "input:scale": {
          "nodename": "invert_scale",
          "type": "vector2"
        },
        "input:texcoord": {
          "nodename": "texcoord1",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "texcoord:texcoord1": {
        "input:index": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_acescg_to_lin_rec709_color3": {
      "constant:mat": {
        "input:value": {
          "type": "matrix33",
          "value": "1.705050992658, -0.130256417507, -0.024003356805, -0.621792120657,  1.140804736575, -0.128968976065, -0.083258872001, -0.010548319068, 1.15297233287"
        },
        "type": "matrix33"
      },
      "convert:asColor": {
        "input:in": {
          "nodename": "transform",
          "type": "vector3"
        },
        "type": "color3"
      },
      "convert:asVec": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "vector3"
      },
      "nodedef": "ND_acescg_to_lin_rec709_color3",
      "output:out": {
        "nodename": "asColor",
        "type": "color3"
      },
      "transformmatrix:transform": {
        "input:in": {
          "nodename": "asVec",
          "type": "vector3"
        },
        "input:mat": {
          "nodename": "mat",
          "type": "matrix33"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_acescg_to_lin_rec709_color4": {
      "acescg_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      },
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "nodedef": "ND_acescg_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      }
    },
    "nodegraph:NG_adobergb_to_lin_rec709_color3": {
      "divide:constant": {
        "input:in1": {
          "type": "float",
          "value": "563.0"
        },
        "input:in2": {
          "type": "float",
          "value": "256.0"
        },
        "type": "float"
      },
      "lin_adobergb_to_lin_rec709:rec709": {
        "input:in": {
          "nodename": "gamma",
          "type": "color3"
        },
        "type": "color3"
      },
      "max:max": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "nodedef": "ND_adobergb_to_lin_rec709_color3",
      "output:out": {
        "nodename": "rec709",
        "type": "color3"
      },
      "power:gamma": {
        "input:in1": {
          "nodename": "max",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "constant",
          "type": "float"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_adobergb_to_lin_rec709_color4": {
      "adobergb_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      },
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "nodedef": "ND_adobergb_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      }
    },
    "nodegraph:NG_bump_vector3": {
      "heighttonormal:N_heighttonormal": {
        "input:in": {
          "interfacename": "height",
          "type": "float"
        },
        "type": "vector3"
      },
      "nodedef": "ND_bump_vector3",
      "normalmap:N_normalmap": {
        "input:in": {
          "nodename": "N_heighttonormal",
          "type": "vector3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:scale": {
          "interfacename": "scale",
          "type": "float"
        },
        "input:tangent": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "N_normalmap",
        "type": "vector3"
      }
    },
    "nodegraph:NG_checkerboard_color3": {
      "add:N_mtlxadd2": {
        "input:in1": {
          "nodename": "N_mtlxfloor2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_mtlxfloor3",
          "type": "float"
        },
        "type": "float"
      },
      "floor:N_mtlxfloor2": {
        "input:in": {
          "nodename": "N_mtlxmodulo1",
          "type": "float"
        },
        "type": "float"
      },
      "floor:N_mtlxfloor3": {
        "input:in": {
          "nodename": "N_mtlxmodulo2",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:N_mtlxifequal2": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "nodename": "N_mtlxadd2",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "mix:N_mix_color3": {
        "input:bg": {
          "interfacename": "color2",
          "type": "color3"
        },
        "input:fg": {
          "interfacename": "color1",
          "type": "color3"
        },
        "input:mix": {
          "nodename": "N_mtlxifequal2",
          "type": "float"
        },
        "type": "color3"
      },
      "modulo:N_mtlxmodulo1": {
        "input:in1": {
          "nodename": "N_mtlxseparate2",
          "output": "outx",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "2"
        },
        "type": "float"
      },
      "modulo:N_mtlxmodulo2": {
        "input:in1": {
          "nodename": "N_mtlxseparate2",
          "output": "outy",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "2"
        },
        "type": "float"
      },
      "multiply:N_mult": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "freq",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_checkerboard_color3",
      "output:out": {
        "nodename": "N_mix_color3",
        "type": "color3"
      },
      "place2d:N_mtlxplace2d1": {
        "input:offset": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:texcoord": {
          "nodename": "N_mult",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "separate2:N_mtlxseparate2": {
        "input:in": {
          "nodename": "N_mtlxplace2d1",
          "type": "vector2"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_colorcorrect_color3": {
      "add:N_liftadd": {
        "input:in1": {
          "nodename": "N_liftmult",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "lift",
          "type": "float"
        },
        "type": "color3"
      },
      "combine3:N_parm2hue": {
        "input:in1": {
          "interfacename": "hue",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1"
        },
        "input:in3": {
          "type": "float",
          "value": "1"
        },
        "type": "vector3"
      },
      "contrast:N_contrast": {
        "input:amount": {
          "interfacename": "contrast",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_gain",
          "type": "color3"
        },
        "input:pivot": {
          "interfacename": "contrastpivot",
          "type": "float"
        },
        "type": "color3"
      },
      "hsvadjust:N_hsvadjust": {
        "input:amount": {
          "nodename": "N_parm2hue",
          "type": "vector3"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "color3"
      },
      "multiply:N_exposure": {
        "input:in1": {
          "nodename": "N_contrast",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_exposurepwr",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:N_gain": {
        "input:in1": {
          "nodename": "N_liftadd",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "gain",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:N_liftmult": {
        "input:in1": {
          "nodename": "N_gamma",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_liftsubtract",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_colorcorrect_color3",
      "output:out": {
        "nodename": "N_exposure",
        "type": "color3"
      },
      "power:N_exposurepwr": {
        "input:in1": {
          "type": "float",
          "value": "2"
        },
        "input:in2": {
          "interfacename": "exposure",
          "type": "float"
        },
        "type": "float"
      },
      "range:N_gamma": {
        "input:doclamp": {
          "type": "boolean",
          "value": "false"
        },
        "input:gamma": {
          "interfacename": "gamma",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_saturation",
          "type": "color3"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1"
        },
        "input:inlow": {
          "type": "float",
          "value": "0"
        },
        "input:outhigh": {
          "type": "float",
          "value": "1"
        },
        "input:outlow": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "saturate:N_saturation": {
        "input:amount": {
          "interfacename": "saturation",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_hsvadjust",
          "type": "color3"
        },
        "type": "color3"
      },
      "subtract:N_liftsubtract": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "interfacename": "lift",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_colorcorrect_color4": {
      "colorcorrect:N_colorcorrect": {
        "input:contrast": {
          "interfacename": "contrast",
          "type": "float"
        },
        "input:contrastpivot": {
          "interfacename": "contrastpivot",
          "type": "float"
        },
        "input:exposure": {
          "interfacename": "exposure",
          "type": "float"
        },
        "input:gain": {
          "interfacename": "gain",
          "type": "float"
        },
        "input:gamma": {
          "interfacename": "gamma",
          "type": "float"
        },
        "input:hue": {
          "interfacename": "hue",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_combine_color",
          "type": "color3"
        },
        "input:lift": {
          "interfacename": "lift",
          "type": "float"
        },
        "input:saturation": {
          "interfacename": "saturation",
          "type": "float"
        },
        "type": "color3"
      },
      "combine3:N_combine_color": {
        "input:in1": {
          "nodename": "N_split_color4",
          "output": "outr",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_split_color4",
          "output": "outg",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_split_color4",
          "output": "outb",
          "type": "float"
        },
        "type": "color3"
      },
      "combine4:N_combine_with_alpha": {
        "input:in1": {
          "nodename": "N_split_color",
          "output": "outr",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_split_color",
          "output": "outg",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_split_color",
          "output": "outb",
          "type": "float"
        },
        "input:in4": {
          "nodename": "N_split_color4",
          "output": "outa",
          "type": "float"
        },
        "type": "color4"
      },
      "nodedef": "ND_colorcorrect_color4",
      "output:out": {
        "nodename": "N_combine_with_alpha",
        "type": "color4"
      },
      "separate3:N_split_color": {
        "input:in": {
          "nodename": "N_colorcorrect",
          "type": "color3"
        },
        "type": "multioutput"
      },
      "separate4:N_split_color4": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_contrast_color3": {
      "add:N_add_color3": {
        "input:in1": {
          "nodename": "N_mul_color3",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "color3"
        },
        "type": "color3"
      },
      "multiply:N_mul_color3": {
        "input:in1": {
          "nodename": "N_sub_color3",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_contrast_color3",
      "output:out": {
        "nodename": "N_add_color3",
        "type": "color3"
      },
      "subtract:N_sub_color3": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "color3"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_contrast_color3FA": {
      "add:N_add_color3FA": {
        "input:in1": {
          "nodename": "N_mul_color3FA",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:N_mul_color3FA": {
        "input:in1": {
          "nodename": "N_sub_color3FA",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_contrast_color3FA",
      "output:out": {
        "nodename": "N_add_color3FA",
        "type": "color3"
      },
      "subtract:N_sub_color3FA": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_contrast_color4": {
      "add:N_add_color4": {
        "input:in1": {
          "nodename": "N_mul_color4",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "color4"
        },
        "type": "color4"
      },
      "multiply:N_mul_color4": {
        "input:in1": {
          "nodename": "N_sub_color4",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_contrast_color4",
      "output:out": {
        "nodename": "N_add_color4",
        "type": "color4"
      },
      "subtract:N_sub_color4": {
        "input:in1": {
          "interfacename": "in",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "color4"
        },
        "type": "color4"
      }
    },
    "nodegraph:NG_contrast_color4FA": {
      "add:N_add_color4FA": {
        "input:in1": {
          "nodename": "N_mul_color4FA",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "color4"
      },
      "multiply:N_mul_color4FA": {
        "input:in1": {
          "nodename": "N_sub_color4FA",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "color4"
      },
      "nodedef": "ND_contrast_color4FA",
      "output:out": {
        "nodename": "N_add_color4FA",
        "type": "color4"
      },
      "subtract:N_sub_color4FA": {
        "input:in1": {
          "interfacename": "in",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "color4"
      }
    },
    "nodegraph:NG_contrast_float": {
      "add:N_add_float": {
        "input:in1": {
          "nodename": "N_mul_float",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:N_mul_float": {
        "input:in1": {
          "nodename": "N_sub_float",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_contrast_float",
      "output:out": {
        "nodename": "N_add_float",
        "type": "float"
      },
      "subtract:N_sub_float": {
        "input:in1": {
          "interfacename": "in",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_contrast_vector2": {
      "add:N_add_vector2": {
        "input:in1": {
          "nodename": "N_mul_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_mul_vector2": {
        "input:in1": {
          "nodename": "N_sub_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_contrast_vector2",
      "output:out": {
        "nodename": "N_add_vector2",
        "type": "vector2"
      },
      "subtract:N_sub_vector2": {
        "input:in1": {
          "interfacename": "in",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_contrast_vector2FA": {
      "add:N_add_vector2FA": {
        "input:in1": {
          "nodename": "N_mul_vector2FA",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "vector2"
      },
      "multiply:N_mul_vector2FA": {
        "input:in1": {
          "nodename": "N_sub_vector2FA",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "vector2"
      },
      "nodedef": "ND_contrast_vector2FA",
      "output:out": {
        "nodename": "N_add_vector2FA",
        "type": "vector2"
      },
      "subtract:N_sub_vector2FA": {
        "input:in1": {
          "interfacename": "in",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_contrast_vector3": {
      "add:N_add_vector3": {
        "input:in1": {
          "nodename": "N_mul_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "multiply:N_mul_vector3": {
        "input:in1": {
          "nodename": "N_sub_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "nodedef": "ND_contrast_vector3",
      "output:out": {
        "nodename": "N_add_vector3",
        "type": "vector3"
      },
      "subtract:N_sub_vector3": {
        "input:in1": {
          "interfacename": "in",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector3"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_contrast_vector3FA": {
      "add:N_add_vector3FA": {
        "input:in1": {
          "nodename": "N_mul_vector3FA",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "vector3"
      },
      "multiply:N_mul_vector3FA": {
        "input:in1": {
          "nodename": "N_sub_vector3FA",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "vector3"
      },
      "nodedef": "ND_contrast_vector3FA",
      "output:out": {
        "nodename": "N_add_vector3FA",
        "type": "vector3"
      },
      "subtract:N_sub_vector3FA": {
        "input:in1": {
          "interfacename": "in",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_contrast_vector4": {
      "add:N_add_vector4": {
        "input:in1": {
          "nodename": "N_mul_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "multiply:N_mul_vector4": {
        "input:in1": {
          "nodename": "N_sub_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "nodedef": "ND_contrast_vector4",
      "output:out": {
        "nodename": "N_add_vector4",
        "type": "vector4"
      },
      "subtract:N_sub_vector4": {
        "input:in1": {
          "interfacename": "in",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector4"
        },
        "type": "vector4"
      }
    },
    "nodegraph:NG_contrast_vector4FA": {
      "add:N_add_vector4FA": {
        "input:in1": {
          "nodename": "N_mul_vector4FA",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "vector4"
      },
      "multiply:N_mul_vector4FA": {
        "input:in1": {
          "nodename": "N_sub_vector4FA",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "vector4"
      },
      "nodedef": "ND_contrast_vector4FA",
      "output:out": {
        "nodename": "N_add_vector4FA",
        "type": "vector4"
      },
      "subtract:N_sub_vector4FA": {
        "input:in1": {
          "interfacename": "in",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "float"
        },
        "type": "vector4"
      }
    },
    "nodegraph:NG_convert_boolean_surfaceshader": {
      "convert:bool_to_float": {
        "input:in": {
          "interfacename": "in",
          "type": "boolean"
        },
        "type": "float"
      },
      "convert:float_to_color3": {
        "input:in": {
          "nodename": "bool_to_float",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_convert_boolean_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "nodename": "float_to_color3",
          "type": "color3"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_convert_color3_surfaceshader": {
      "nodedef": "ND_convert_color3_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_convert_color4_surfaceshader": {
      "convert:convert": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "extract:extract": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "input:index": {
          "type": "integer",
          "uniform": "true",
          "value": "3"
        },
        "type": "float"
      },
      "nodedef": "ND_convert_color4_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "nodename": "convert",
          "type": "color3"
        },
        "input:opacity": {
          "nodename": "extract",
          "type": "float"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_convert_float_surfaceshader": {
      "convert:float_to_color3": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_convert_float_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "nodename": "float_to_color3",
          "type": "color3"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_convert_integer_surfaceshader": {
      "convert:float_to_color3": {
        "input:in": {
          "nodename": "int_to_float",
          "type": "float"
        },
        "type": "color3"
      },
      "convert:int_to_float": {
        "input:in": {
          "interfacename": "in",
          "type": "integer"
        },
        "type": "float"
      },
      "nodedef": "ND_convert_integer_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "nodename": "float_to_color3",
          "type": "color3"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_convert_vector2_surfaceshader": {
      "convert:vec2_to_vec3": {
        "input:in": {
          "interfacename": "in",
          "type": "vector2"
        },
        "type": "vector3"
      },
      "convert:vec3_to_color3": {
        "input:in": {
          "nodename": "vec2_to_vec3",
          "type": "vector3"
        },
        "type": "color3"
      },
      "nodedef": "ND_convert_vector2_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "nodename": "vec3_to_color3",
          "type": "color3"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_convert_vector3_surfaceshader": {
      "convert:vec3_to_color3": {
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "type": "color3"
      },
      "nodedef": "ND_convert_vector3_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "nodename": "vec3_to_color3",
          "type": "color3"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_convert_vector4_surfaceshader": {
      "convert:color4_to_color3": {
        "input:in": {
          "nodename": "vec4_to_color4",
          "type": "color4"
        },
        "type": "color3"
      },
      "convert:vec4_to_color4": {
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "color4"
      },
      "extract:color4_to_float": {
        "input:in": {
          "nodename": "vec4_to_color4",
          "type": "color4"
        },
        "input:index": {
          "type": "integer",
          "uniform": "true",
          "value": "3"
        },
        "type": "float"
      },
      "nodedef": "ND_convert_vector4_surfaceshader",
      "output:out": {
        "nodename": "surface",
        "type": "surfaceshader"
      },
      "surface_unlit:surface": {
        "input:emission_color": {
          "nodename": "color4_to_color3",
          "type": "color3"
        },
        "input:opacity": {
          "nodename": "color4_to_float",
          "type": "float"
        },
        "type": "surfaceshader"
      }
    },
    "nodegraph:NG_distance_vector2": {
      "magnitude:N_mtlxmagnitude": {
        "input:in": {
          "nodename": "N_mtlxsubtract",
          "type": "vector2"
        },
        "type": "float"
      },
      "nodedef": "ND_distance_vector2",
      "output:out": {
        "nodename": "N_mtlxmagnitude",
        "type": "float"
      },
      "subtract:N_mtlxsubtract": {
        "input:in1": {
          "interfacename": "in1",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "in2",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_distance_vector3": {
      "magnitude:N_mtlxmagnitude": {
        "input:in": {
          "nodename": "N_mtlxsubtract",
          "type": "vector3"
        },
        "type": "float"
      },
      "nodedef": "ND_distance_vector3",
      "output:out": {
        "nodename": "N_mtlxmagnitude",
        "type": "float"
      },
      "subtract:N_mtlxsubtract": {
        "input:in1": {
          "interfacename": "in1",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "in2",
          "type": "vector3"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_distance_vector4": {
      "magnitude:N_mtlxmagnitude": {
        "input:in": {
          "nodename": "N_mtlxsubtract",
          "type": "vector4"
        },
        "type": "float"
      },
      "nodedef": "ND_distance_vector4",
      "output:out": {
        "nodename": "N_mtlxmagnitude",
        "type": "float"
      },
      "subtract:N_mtlxsubtract": {
        "input:in1": {
          "interfacename": "in1",
          "type": "vector4"
        },
        "input:in2": {
          "interfacename": "in2",
          "type": "vector4"
        },
        "type": "vector4"
      }
    },
    "nodegraph:NG_extract_color3": {
      "nodedef": "ND_extract_color3",
      "output:out": {
        "nodename": "N_sw_color3",
        "type": "float"
      },
      "switch:N_sw_color3": {
        "input:in1": {
          "nodename": "N_r_color3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_g_color3",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_b_color3",
          "type": "float"
        },
        "input:which": {
          "interfacename": "index",
          "type": "integer"
        },
        "type": "float"
      },
      "swizzle:N_b_color3": {
        "input:channels": {
          "type": "string",
          "value": "b"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "float"
      },
      "swizzle:N_g_color3": {
        "input:channels": {
          "type": "string",
          "value": "g"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "float"
      },
      "swizzle:N_r_color3": {
        "input:channels": {
          "type": "string",
          "value": "r"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_extract_color4": {
      "nodedef": "ND_extract_color4",
      "output:out": {
        "nodename": "N_sw_color4",
        "type": "float"
      },
      "switch:N_sw_color4": {
        "input:in1": {
          "nodename": "N_r_color4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_g_color4",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_b_color4",
          "type": "float"
        },
        "input:in4": {
          "nodename": "N_a_color4",
          "type": "float"
        },
        "input:which": {
          "interfacename": "index",
          "type": "integer"
        },
        "type": "float"
      },
      "swizzle:N_a_color4": {
        "input:channels": {
          "type": "string",
          "value": "a"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:N_b_color4": {
        "input:channels": {
          "type": "string",
          "value": "b"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:N_g_color4": {
        "input:channels": {
          "type": "string",
          "value": "g"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:N_r_color4": {
        "input:channels": {
          "type": "string",
          "value": "r"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_extract_vector2": {
      "nodedef": "ND_extract_vector2",
      "output:out": {
        "nodename": "N_sw_vector2",
        "type": "float"
      },
      "switch:N_sw_vector2": {
        "input:in1": {
          "nodename": "N_x_vector2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_y_vector2",
          "type": "float"
        },
        "input:which": {
          "interfacename": "index",
          "type": "integer"
        },
        "type": "float"
      },
      "swizzle:N_x_vector2": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:N_y_vector2": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_extract_vector3": {
      "nodedef": "ND_extract_vector3",
      "output:out": {
        "nodename": "N_sw_vector3",
        "type": "float"
      },
      "switch:N_sw_vector3": {
        "input:in1": {
          "nodename": "N_x_vector3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_y_vector3",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_z_vector3",
          "type": "float"
        },
        "input:which": {
          "interfacename": "index",
          "type": "integer"
        },
        "type": "float"
      },
      "swizzle:N_x_vector3": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "type": "float"
      },
      "swizzle:N_y_vector3": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "type": "float"
      },
      "swizzle:N_z_vector3": {
        "input:channels": {
          "type": "string",
          "value": "z"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_extract_vector4": {
      "nodedef": "ND_extract_vector4",
      "output:out": {
        "nodename": "N_sw_vector4",
        "type": "float"
      },
      "switch:N_sw_vector4": {
        "input:in1": {
          "nodename": "N_x_vector4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_y_vector4",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_z_vector4",
          "type": "float"
        },
        "input:in4": {
          "nodename": "N_w_vector4",
          "type": "float"
        },
        "input:which": {
          "interfacename": "index",
          "type": "integer"
        },
        "type": "float"
      },
      "swizzle:N_w_vector4": {
        "input:channels": {
          "type": "string",
          "value": "w"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      },
      "swizzle:N_x_vector4": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      },
      "swizzle:N_y_vector4": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      },
      "swizzle:N_z_vector4": {
        "input:channels": {
          "type": "string",
          "value": "z"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_g18_rec709_to_lin_rec709_color3": {
      "max:max": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "nodedef": "ND_g18_rec709_to_lin_rec709_color3",
      "output:out": {
        "nodename": "gamma",
        "type": "color3"
      },
      "power:gamma": {
        "input:in1": {
          "nodename": "max",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "1.8"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_g18_rec709_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "g18_rec709_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_g18_rec709_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      }
    },
    "nodegraph:NG_g22_ap1_to_lin_rec709_color3": {
      "acescg_to_lin_rec709:rec709": {
        "input:in": {
          "nodename": "gamma",
          "type": "color3"
        },
        "type": "color3"
      },
      "max:max": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "nodedef": "ND_g22_ap1_to_lin_rec709_color3",
      "output:out": {
        "nodename": "rec709",
        "type": "color3"
      },
      "power:gamma": {
        "input:in1": {
          "nodename": "max",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "2.2"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_g22_ap1_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "g22_ap1_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_g22_ap1_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      }
    },
    "nodegraph:NG_g22_rec709_to_lin_rec709_color3": {
      "max:max": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "nodedef": "ND_g22_rec709_to_lin_rec709_color3",
      "output:out": {
        "nodename": "gamma",
        "type": "color3"
      },
      "power:gamma": {
        "input:in1": {
          "nodename": "max",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "2.2"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_g22_rec709_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "g22_rec709_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_g22_rec709_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      }
    },
    "nodegraph:NG_gltf_colorimage": {
      "combine3:combine_color": {
        "input:in1": {
          "nodename": "separate_color",
          "output": "outr",
          "type": "float"
        },
        "input:in2": {
          "nodename": "separate_color",
          "output": "outg",
          "type": "float"
        },
        "input:in3": {
          "nodename": "separate_color",
          "output": "outb",
          "type": "float"
        },
        "type": "color3"
      },
      "dot:separate_alpha": {
        "input:in": {
          "nodename": "separate_color",
          "output": "outa",
          "type": "float"
        },
        "type": "float"
      },
      "gltf_image:image": {
        "input:default": {
          "interfacename": "default",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename",
          "uniform": "true"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string",
          "uniform": "true"
        },
        "input:offset": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:operationorder": {
          "type": "integer",
          "value": "0"
        },
        "input:pivot": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "input:rotate": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:scale": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "uniform": "true",
          "value": "periodic"
        },
        "input:uvindex": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "input:vaddressmode": {
          "type": "string",
          "uniform": "true",
          "value": "periodic"
        },
        "type": "color4"
      },
      "multiply:modulate_color": {
        "input:in1": {
          "interfacename": "color",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "image",
          "type": "color4"
        },
        "type": "color4"
      },
      "multiply:modulate_geomcolor": {
        "input:in1": {
          "nodename": "modulate_color",
          "type": "color4"
        },
        "input:in2": {
          "interfacename": "geomcolor",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_gltf_colorimage",
      "output:outa": {
        "nodename": "separate_alpha",
        "type": "float"
      },
      "output:outcolor": {
        "nodename": "combine_color",
        "type": "color3"
      },
      "separate4:separate_color": {
        "input:in": {
          "nodename": "modulate_geomcolor",
          "type": "color4"
        },
        "type": "multioutput"
      },
      "texcoord:texcoord1": {
        "input:index": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_gltf_image_color4_color4_1_0": {
      "divide:invert_scale": {
        "input:in1": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:image": {
        "input:default": {
          "interfacename": "default",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename",
          "uniform": "true"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string",
          "uniform": "true"
        },
        "input:texcoord": {
          "nodename": "place2d",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "uaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "input:vaddressmode": {
          "interfacename": "vaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "type": "color4"
      },
      "multiply:negate_offset": {
        "input:in1": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:in2": {
          "type": "vector2",
          "value": "-1.0, 1.0"
        },
        "type": "vector2"
      },
      "multiply:negate_rotate": {
        "input:in1": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-1.0"
        },
        "type": "float"
      },
      "multiply:scale_image": {
        "input:in1": {
          "interfacename": "factor",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "image",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_gltf_image_color4_color4_1_0",
      "output:out": {
        "nodename": "scale_image",
        "type": "color4"
      },
      "place2d:place2d": {
        "input:offset": {
          "nodename": "negate_offset",
          "type": "vector2"
        },
        "input:operationorder": {
          "interfacename": "operationorder",
          "type": "integer"
        },
        "input:pivot": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "input:rotate": {
          "nodename": "negate_rotate",
          "type": "float"
        },
        "input:scale": {
          "nodename": "invert_scale",
          "type": "vector2"
        },
        "input:texcoord": {
          "nodename": "texcoord1",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "texcoord:texcoord1": {
        "input:index": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_gltf_image_float_float_1_0": {
      "divide:invert_scale": {
        "input:in1": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:image": {
        "input:default": {
          "interfacename": "default",
          "type": "float"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename",
          "uniform": "true"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string",
          "uniform": "true"
        },
        "input:texcoord": {
          "nodename": "place2d",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "uaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "input:vaddressmode": {
          "interfacename": "vaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "type": "float"
      },
      "multiply:negate_offset": {
        "input:in1": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:in2": {
          "type": "vector2",
          "value": "-1.0, 1.0"
        },
        "type": "vector2"
      },
      "multiply:negate_rotate": {
        "input:in1": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-1.0"
        },
        "type": "float"
      },
      "multiply:scale_image": {
        "input:in1": {
          "interfacename": "factor",
          "type": "float"
        },
        "input:in2": {
          "nodename": "image",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_gltf_image_float_float_1_0",
      "output:out": {
        "nodename": "scale_image",
        "type": "float"
      },
      "place2d:place2d": {
        "input:offset": {
          "nodename": "negate_offset",
          "type": "vector2"
        },
        "input:operationorder": {
          "interfacename": "operationorder",
          "type": "integer"
        },
        "input:pivot": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "input:rotate": {
          "nodename": "negate_rotate",
          "type": "float"
        },
        "input:scale": {
          "nodename": "invert_scale",
          "type": "vector2"
        },
        "input:texcoord": {
          "nodename": "texcoord1",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "texcoord:texcoord1": {
        "input:index": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_gltf_image_vector3_vector3_1_0": {
      "divide:invert_scale": {
        "input:in1": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:image": {
        "input:default": {
          "interfacename": "default",
          "type": "vector3"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename",
          "uniform": "true"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string",
          "uniform": "true"
        },
        "input:texcoord": {
          "nodename": "place2d",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "uaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "input:vaddressmode": {
          "interfacename": "vaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "type": "vector3"
      },
      "multiply:negate_offset": {
        "input:in1": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:in2": {
          "type": "vector2",
          "value": "-1.0, 1.0"
        },
        "type": "vector2"
      },
      "multiply:negate_rotate": {
        "input:in1": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-1.0"
        },
        "type": "float"
      },
      "nodedef": "ND_gltf_image_vector3_vector3_1_0",
      "output:out": {
        "nodename": "image",
        "type": "vector3"
      },
      "place2d:place2d": {
        "input:offset": {
          "nodename": "negate_offset",
          "type": "vector2"
        },
        "input:operationorder": {
          "interfacename": "operationorder",
          "type": "integer"
        },
        "input:pivot": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "input:rotate": {
          "nodename": "negate_rotate",
          "type": "float"
        },
        "input:scale": {
          "nodename": "invert_scale",
          "type": "vector2"
        },
        "input:texcoord": {
          "nodename": "texcoord1",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "texcoord:texcoord1": {
        "input:index": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_gltf_iridescence_thickness_float_1_0": {
      "extract:extract": {
        "input:in": {
          "nodename": "thickness_image",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "uniform": "true",
          "value": "1"
        },
        "type": "float"
      },
      "gltf_image:thickness_image": {
        "input:default": {
          "interfacename": "default",
          "type": "vector3"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename",
          "uniform": "true"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string",
          "uniform": "true"
        },
        "input:offset": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:pivot": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "input:rotate": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:scale": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "uaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "input:uvindex": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "input:vaddressmode": {
          "interfacename": "vaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "type": "vector3"
      },
      "mix:mixThickness": {
        "input:bg": {
          "interfacename": "thicknessMax",
          "type": "float"
        },
        "input:fg": {
          "interfacename": "thicknessMin",
          "type": "float"
        },
        "input:mix": {
          "nodename": "extract",
          "type": "float"
        },
        "nodedef": "ND_mix_float",
        "type": "float"
      },
      "nodedef": "ND_gltf_iridescence_thickness_float_1_0",
      "output:out": {
        "nodename": "mixThickness",
        "type": "float"
      }
    },
    "nodegraph:NG_gltf_normalmap_vector3_1_0": {
      "divide:invert_scale": {
        "input:in1": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:image": {
        "input:default": {
          "interfacename": "default",
          "type": "vector3"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename",
          "uniform": "true"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string",
          "uniform": "true"
        },
        "input:texcoord": {
          "nodename": "place2d",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "interfacename": "uaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "input:vaddressmode": {
          "interfacename": "vaddressmode",
          "type": "string",
          "uniform": "true"
        },
        "type": "vector3"
      },
      "multiply:negate_offset": {
        "input:in1": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "input:in2": {
          "type": "vector2",
          "value": "-1.0, 1.0"
        },
        "type": "vector2"
      },
      "multiply:negate_rotate": {
        "input:in1": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "-1.0"
        },
        "type": "float"
      },
      "nodedef": "ND_gltf_normalmap_vector3_1_0",
      "normalmap:normalmap": {
        "input:in": {
          "nodename": "image",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "normalmap",
        "type": "vector3"
      },
      "place2d:place2d": {
        "input:offset": {
          "nodename": "negate_offset",
          "type": "vector2"
        },
        "input:operationorder": {
          "interfacename": "operationorder",
          "type": "integer"
        },
        "input:pivot": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "input:rotate": {
          "nodename": "negate_rotate",
          "type": "float"
        },
        "input:scale": {
          "nodename": "invert_scale",
          "type": "vector2"
        },
        "input:texcoord": {
          "nodename": "texcoord1",
          "type": "vector2"
        },
        "nodedef": "ND_place2d_vector2",
        "type": "vector2"
      },
      "texcoord:texcoord1": {
        "input:index": {
          "interfacename": "uvindex",
          "type": "integer",
          "uniform": "true"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_hsvadjust_color3": {
      "add:N_svchans_color3": {
        "input:in1": {
          "nodename": "N_tmp1_color3",
          "type": "color3"
        },
        "input:in2": {
          "type": "color3",
          "value": "1.0, 0.0, 0.0"
        },
        "type": "color3"
      },
      "add:N_tmp2_color3": {
        "input:in1": {
          "nodename": "N_inhsv_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_hchans_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "convert:N_camount_color3": {
        "input:in": {
          "interfacename": "amount",
          "type": "vector3"
        },
        "type": "color3"
      },
      "hsvtorgb:N_torgb_color3": {
        "input:in": {
          "nodename": "N_tmp3_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "multiply:N_hchans_color3": {
        "input:in1": {
          "nodename": "N_camount_color3",
          "type": "color3"
        },
        "input:in2": {
          "type": "color3",
          "value": "1.0, 0.0, 0.0"
        },
        "type": "color3"
      },
      "multiply:N_tmp1_color3": {
        "input:in1": {
          "nodename": "N_camount_color3",
          "type": "color3"
        },
        "input:in2": {
          "type": "color3",
          "value": "0.0, 1.0, 1.0"
        },
        "type": "color3"
      },
      "multiply:N_tmp3_color3": {
        "input:in1": {
          "nodename": "N_tmp2_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_svchans_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_hsvadjust_color3",
      "output:out": {
        "nodename": "N_torgb_color3",
        "type": "color3"
      },
      "rgbtohsv:N_inhsv_color3": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_hsvadjust_color4": {
      "add:N_svchans_color4": {
        "input:in1": {
          "nodename": "N_tmp1_color4",
          "type": "color4"
        },
        "input:in2": {
          "type": "color4",
          "value": "1.0, 0.0, 0.0, 1.0"
        },
        "type": "color4"
      },
      "add:N_tmp2_color4": {
        "input:in1": {
          "nodename": "N_inhsv_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_hchans_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "convert:N_camount_color4": {
        "input:in": {
          "nodename": "N_camt_color3",
          "type": "color3"
        },
        "type": "color4"
      },
      "convert:N_camt_color3": {
        "input:in": {
          "interfacename": "amount",
          "type": "vector3"
        },
        "type": "color3"
      },
      "hsvtorgb:N_torgb_color4": {
        "input:in": {
          "nodename": "N_tmp3_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "multiply:N_hchans_color4": {
        "input:in1": {
          "nodename": "N_camount_color4",
          "type": "color4"
        },
        "input:in2": {
          "type": "color4",
          "value": "1.0, 0.0, 0.0, 0.0"
        },
        "type": "color4"
      },
      "multiply:N_tmp1_color4": {
        "input:in1": {
          "nodename": "N_camount_color4",
          "type": "color4"
        },
        "input:in2": {
          "type": "color4",
          "value": "0.0, 1.0, 1.0, 0.0"
        },
        "type": "color4"
      },
      "multiply:N_tmp3_color4": {
        "input:in1": {
          "nodename": "N_tmp2_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_svchans_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_hsvadjust_color4",
      "output:out": {
        "nodename": "N_torgb_color4",
        "type": "color4"
      },
      "rgbtohsv:N_inhsv_color4": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color4"
      }
    },
    "nodegraph:NG_lama_add_bsdf": {
      "add:add1": {
        "input:in1": {
          "nodename": "mul1",
          "type": "BSDF"
        },
        "input:in2": {
          "nodename": "mul2",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "colorspace": "acescg",
      "multiply:mul1": {
        "input:in1": {
          "interfacename": "material1",
          "type": "BSDF"
        },
        "input:in2": {
          "interfacename": "weight1",
          "type": "float"
        },
        "type": "BSDF"
      },
      "multiply:mul2": {
        "input:in1": {
          "interfacename": "material2",
          "type": "BSDF"
        },
        "input:in2": {
          "interfacename": "weight2",
          "type": "float"
        },
        "type": "BSDF"
      },
      "nodedef": "ND_lama_add_bsdf",
      "output:out": {
        "nodename": "add1",
        "type": "BSDF"
      }
    },
    "nodegraph:NG_lama_add_edf": {
      "add:add1": {
        "input:in1": {
          "nodename": "mul1",
          "type": "EDF"
        },
        "input:in2": {
          "nodename": "mul2",
          "type": "EDF"
        },
        "type": "EDF"
      },
      "colorspace": "acescg",
      "multiply:mul1": {
        "input:in1": {
          "interfacename": "material1",
          "type": "EDF"
        },
        "input:in2": {
          "interfacename": "weight1",
          "type": "float"
        },
        "type": "EDF"
      },
      "multiply:mul2": {
        "input:in1": {
          "interfacename": "material2",
          "type": "EDF"
        },
        "input:in2": {
          "interfacename": "weight2",
          "type": "float"
        },
        "type": "EDF"
      },
      "nodedef": "ND_lama_add_edf",
      "output:out": {
        "nodename": "add1",
        "type": "EDF"
      }
    },
    "nodegraph:NG_lama_diffuse": {
      "colorspace": "acescg",
      "multiply:half_roughness_squared": {
        "input:in1": {
          "nodename": "roughness_squared",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "float"
      },
      "multiply:roughness_squared": {
        "input:in1": {
          "interfacename": "roughness",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "roughness",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_lama_diffuse",
      "oren_nayar_diffuse_bsdf:oren_nayar": {
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "half_roughness_squared",
          "type": "float"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "output:out": {
        "nodename": "oren_nayar",
        "type": "BSDF"
      }
    },
    "nodegraph:NG_lama_layer_bsdf": {
      "colorspace": "acescg",
      "layer:layer": {
        "input:base": {
          "interfacename": "materialBase",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "mul",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "multiply:mul": {
        "input:in1": {
          "interfacename": "materialTop",
          "type": "BSDF"
        },
        "input:in2": {
          "interfacename": "topMix",
          "type": "float"
        },
        "type": "BSDF"
      },
      "nodedef": "ND_lama_layer_bsdf",
      "output:out": {
        "nodename": "layer",
        "type": "BSDF"
      }
    },
    "nodegraph:NG_lama_mix_bsdf": {
      "colorspace": "acescg",
      "mix:mix": {
        "input:bg": {
          "interfacename": "material1",
          "type": "BSDF"
        },
        "input:fg": {
          "interfacename": "material2",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "mix",
          "type": "float"
        },
        "type": "BSDF"
      },
      "nodedef": "ND_lama_mix_bsdf",
      "output:out": {
        "nodename": "mix",
        "type": "BSDF"
      }
    },
    "nodegraph:NG_lama_mix_edf": {
      "colorspace": "acescg",
      "mix:mix": {
        "input:bg": {
          "interfacename": "material1",
          "type": "EDF"
        },
        "input:fg": {
          "interfacename": "material2",
          "type": "EDF"
        },
        "input:mix": {
          "interfacename": "mix",
          "type": "float"
        },
        "type": "EDF"
      },
      "nodedef": "ND_lama_mix_edf",
      "output:out": {
        "nodename": "mix",
        "type": "EDF"
      }
    },
    "nodegraph:NG_lama_translucent": {
      "colorspace": "acescg",
      "nodedef": "ND_lama_translucent",
      "output:out": {
        "nodename": "translucent_bsdf1",
        "type": "BSDF"
      },
      "translucent_bsdf:translucent_bsdf1": {
        "input:color": {
          "interfacename": "color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "BSDF"
      }
    },
    "nodegraph:NG_lin_adobergb_to_lin_rec709_color3": {
      "constant:mat": {
        "input:value": {
          "type": "matrix33",
          "value": "1.39835574e+00, -2.50233861e-16,  2.77555756e-17, -3.98355744e-01,  1.00000000e+00, -4.29289893e-02, 0.00000000e+00,  0.00000000e+00,  1.04292899e+00"
        },
        "type": "matrix33"
      },
      "convert:asColor": {
        "input:in": {
          "nodename": "transform",
          "type": "vector3"
        },
        "type": "color3"
      },
      "convert:asVec": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "vector3"
      },
      "nodedef": "ND_lin_adobergb_to_lin_rec709_color3",
      "output:out": {
        "nodename": "asColor",
        "type": "color3"
      },
      "transformmatrix:transform": {
        "input:in": {
          "nodename": "asVec",
          "type": "vector3"
        },
        "input:mat": {
          "nodename": "mat",
          "type": "matrix33"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_lin_adobergb_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "lin_adobergb_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_lin_adobergb_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      }
    },
    "nodegraph:NG_lin_displayp3_to_lin_rec709_color3": {
      "constant:mat": {
        "input:value": {
          "type": "matrix33",
          "value": "1.22493029, -0.22492968, 0.00000006, -0.04205868,  1.04205894, -0.00000001, -0.01964128, -0.07864794, 1.09828925"
        },
        "type": "matrix33"
      },
      "convert:asColor": {
        "input:in": {
          "nodename": "transform",
          "type": "vector3"
        },
        "type": "color3"
      },
      "convert:asVec": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "vector3"
      },
      "nodedef": "ND_lin_displayp3_to_lin_rec709_color3",
      "output:out": {
        "nodename": "asColor",
        "type": "color3"
      },
      "transformmatrix:transform": {
        "input:in": {
          "nodename": "asVec",
          "type": "vector3"
        },
        "input:mat": {
          "nodename": "mat",
          "type": "matrix33"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_lin_displayp3_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "lin_displayp3_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_lin_displayp3_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      }
    },
    "nodegraph:NG_place2d_vector2": {
      "add:N_addpivot": {
        "input:in1": {
          "nodename": "N_applyoffset",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "add:N_addpivot2": {
        "input:in1": {
          "nodename": "N_applyscale2",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "divide:N_applyscale": {
        "input:in1": {
          "nodename": "N_subpivot",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "divide:N_applyscale2": {
        "input:in1": {
          "nodename": "N_applyrot2",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "scale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_place2d_vector2",
      "output:out": {
        "nodename": "N_switch_operationorder",
        "type": "vector2"
      },
      "rotate2d:N_applyrot": {
        "input:amount": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_applyscale",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "rotate2d:N_applyrot2": {
        "input:amount": {
          "interfacename": "rotate",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_applyoffset2",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "subtract:N_applyoffset": {
        "input:in1": {
          "nodename": "N_applyrot",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "subtract:N_applyoffset2": {
        "input:in1": {
          "nodename": "N_subpivot",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "subtract:N_subpivot": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "pivot",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "switch:N_switch_operationorder": {
        "input:in1": {
          "nodename": "N_addpivot",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_addpivot2",
          "type": "vector2"
        },
        "input:which": {
          "interfacename": "operationorder",
          "type": "integer"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_ramp4_color3": {
      "clamp:N_txclamp_color3": {
        "input:in": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "extract:N_s_color3": {
        "input:in": {
          "nodename": "N_txclamp_color3",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_t_color3": {
        "input:in": {
          "nodename": "N_txclamp_color3",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "mix:N_mix_color3": {
        "input:bg": {
          "nodename": "N_mixtop_color3",
          "type": "color3"
        },
        "input:fg": {
          "nodename": "N_mixbot_color3",
          "type": "color3"
        },
        "input:mix": {
          "nodename": "N_t_color3",
          "type": "float"
        },
        "type": "color3"
      },
      "mix:N_mixbot_color3": {
        "input:bg": {
          "interfacename": "valuebl",
          "type": "color3"
        },
        "input:fg": {
          "interfacename": "valuebr",
          "type": "color3"
        },
        "input:mix": {
          "nodename": "N_s_color3",
          "type": "float"
        },
        "type": "color3"
      },
      "mix:N_mixtop_color3": {
        "input:bg": {
          "interfacename": "valuetl",
          "type": "color3"
        },
        "input:fg": {
          "interfacename": "valuetr",
          "type": "color3"
        },
        "input:mix": {
          "nodename": "N_s_color3",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_ramp4_color3",
      "output:out": {
        "nodename": "N_mix_color3",
        "type": "color3"
      }
    },
    "nodegraph:NG_ramp4_color4": {
      "clamp:N_txclamp_color4": {
        "input:in": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "extract:N_s_color4": {
        "input:in": {
          "nodename": "N_txclamp_color4",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_t_color4": {
        "input:in": {
          "nodename": "N_txclamp_color4",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "mix:N_mix_color4": {
        "input:bg": {
          "nodename": "N_mixtop_color4",
          "type": "color4"
        },
        "input:fg": {
          "nodename": "N_mixbot_color4",
          "type": "color4"
        },
        "input:mix": {
          "nodename": "N_t_color4",
          "type": "float"
        },
        "type": "color4"
      },
      "mix:N_mixbot_color4": {
        "input:bg": {
          "interfacename": "valuebl",
          "type": "color4"
        },
        "input:fg": {
          "interfacename": "valuebr",
          "type": "color4"
        },
        "input:mix": {
          "nodename": "N_s_color4",
          "type": "float"
        },
        "type": "color4"
      },
      "mix:N_mixtop_color4": {
        "input:bg": {
          "interfacename": "valuetl",
          "type": "color4"
        },
        "input:fg": {
          "interfacename": "valuetr",
          "type": "color4"
        },
        "input:mix": {
          "nodename": "N_s_color4",
          "type": "float"
        },
        "type": "color4"
      },
      "nodedef": "ND_ramp4_color4",
      "output:out": {
        "nodename": "N_mix_color4",
        "type": "color4"
      }
    },
    "nodegraph:NG_ramp4_float": {
      "clamp:N_txclamp_float": {
        "input:in": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "extract:N_s_float": {
        "input:in": {
          "nodename": "N_txclamp_float",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_t_float": {
        "input:in": {
          "nodename": "N_txclamp_float",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "mix:N_mix_float": {
        "input:bg": {
          "nodename": "N_mixtop_float",
          "type": "float"
        },
        "input:fg": {
          "nodename": "N_mixbot_float",
          "type": "float"
        },
        "input:mix": {
          "nodename": "N_t_float",
          "type": "float"
        },
        "type": "float"
      },
      "mix:N_mixbot_float": {
        "input:bg": {
          "interfacename": "valuebl",
          "type": "float"
        },
        "input:fg": {
          "interfacename": "valuebr",
          "type": "float"
        },
        "input:mix": {
          "nodename": "N_s_float",
          "type": "float"
        },
        "type": "float"
      },
      "mix:N_mixtop_float": {
        "input:bg": {
          "interfacename": "valuetl",
          "type": "float"
        },
        "input:fg": {
          "interfacename": "valuetr",
          "type": "float"
        },
        "input:mix": {
          "nodename": "N_s_float",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_ramp4_float",
      "output:out": {
        "nodename": "N_mix_float",
        "type": "float"
      }
    },
    "nodegraph:NG_ramp4_vector2": {
      "clamp:N_txclamp_vector2": {
        "input:in": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "extract:N_s_vector2": {
        "input:in": {
          "nodename": "N_txclamp_vector2",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_t_vector2": {
        "input:in": {
          "nodename": "N_txclamp_vector2",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "mix:N_mix_vector2": {
        "input:bg": {
          "nodename": "N_mixtop_vector2",
          "type": "vector2"
        },
        "input:fg": {
          "nodename": "N_mixbot_vector2",
          "type": "vector2"
        },
        "input:mix": {
          "nodename": "N_t_vector2",
          "type": "float"
        },
        "type": "vector2"
      },
      "mix:N_mixbot_vector2": {
        "input:bg": {
          "interfacename": "valuebl",
          "type": "vector2"
        },
        "input:fg": {
          "interfacename": "valuebr",
          "type": "vector2"
        },
        "input:mix": {
          "nodename": "N_s_vector2",
          "type": "float"
        },
        "type": "vector2"
      },
      "mix:N_mixtop_vector2": {
        "input:bg": {
          "interfacename": "valuetl",
          "type": "vector2"
        },
        "input:fg": {
          "interfacename": "valuetr",
          "type": "vector2"
        },
        "input:mix": {
          "nodename": "N_s_vector2",
          "type": "float"
        },
        "type": "vector2"
      },
      "nodedef": "ND_ramp4_vector2",
      "output:out": {
        "nodename": "N_mix_vector2",
        "type": "vector2"
      }
    },
    "nodegraph:NG_ramp4_vector3": {
      "clamp:N_txclamp_vector3": {
        "input:in": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "extract:N_s_vector3": {
        "input:in": {
          "nodename": "N_txclamp_vector3",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_t_vector3": {
        "input:in": {
          "nodename": "N_txclamp_vector3",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "mix:N_mix_vector3": {
        "input:bg": {
          "nodename": "N_mixtop_vector3",
          "type": "vector3"
        },
        "input:fg": {
          "nodename": "N_mixbot_vector3",
          "type": "vector3"
        },
        "input:mix": {
          "nodename": "N_t_vector3",
          "type": "float"
        },
        "type": "vector3"
      },
      "mix:N_mixbot_vector3": {
        "input:bg": {
          "interfacename": "valuebl",
          "type": "vector3"
        },
        "input:fg": {
          "interfacename": "valuebr",
          "type": "vector3"
        },
        "input:mix": {
          "nodename": "N_s_vector3",
          "type": "float"
        },
        "type": "vector3"
      },
      "mix:N_mixtop_vector3": {
        "input:bg": {
          "interfacename": "valuetl",
          "type": "vector3"
        },
        "input:fg": {
          "interfacename": "valuetr",
          "type": "vector3"
        },
        "input:mix": {
          "nodename": "N_s_vector3",
          "type": "float"
        },
        "type": "vector3"
      },
      "nodedef": "ND_ramp4_vector3",
      "output:out": {
        "nodename": "N_mix_vector3",
        "type": "vector3"
      }
    },
    "nodegraph:NG_ramp4_vector4": {
      "clamp:N_txclamp_vector4": {
        "input:in": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "extract:N_s_vector4": {
        "input:in": {
          "nodename": "N_txclamp_vector4",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_t_vector4": {
        "input:in": {
          "nodename": "N_txclamp_vector4",
          "type": "vector2"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "mix:N_mix_vector4": {
        "input:bg": {
          "nodename": "N_mixtop_vector4",
          "type": "vector4"
        },
        "input:fg": {
          "nodename": "N_mixbot_vector4",
          "type": "vector4"
        },
        "input:mix": {
          "nodename": "N_t_vector4",
          "type": "float"
        },
        "type": "vector4"
      },
      "mix:N_mixbot_vector4": {
        "input:bg": {
          "interfacename": "valuebl",
          "type": "vector4"
        },
        "input:fg": {
          "interfacename": "valuebr",
          "type": "vector4"
        },
        "input:mix": {
          "nodename": "N_s_vector4",
          "type": "float"
        },
        "type": "vector4"
      },
      "mix:N_mixtop_vector4": {
        "input:bg": {
          "interfacename": "valuetl",
          "type": "vector4"
        },
        "input:fg": {
          "interfacename": "valuetr",
          "type": "vector4"
        },
        "input:mix": {
          "nodename": "N_s_vector4",
          "type": "float"
        },
        "type": "vector4"
      },
      "nodedef": "ND_ramp4_vector4",
      "output:out": {
        "nodename": "N_mix_vector4",
        "type": "vector4"
      }
    },
    "nodegraph:NG_randomcolor_float": {
      "add:N_offset_brightness": {
        "input:in1": {
          "nodename": "N_convertSeed1",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1813.8"
        },
        "type": "float"
      },
      "add:N_offset_hue": {
        "input:in1": {
          "nodename": "N_convertSeed1",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "413.3"
        },
        "type": "float"
      },
      "add:N_offset_saturation": {
        "input:in1": {
          "nodename": "N_convertSeed1",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1522.4"
        },
        "type": "float"
      },
      "ceil:N_seed_brightness": {
        "input:in": {
          "nodename": "N_offset_brightness",
          "type": "float"
        },
        "type": "integer"
      },
      "ceil:N_seed_hue": {
        "input:in": {
          "nodename": "N_offset_hue",
          "type": "float"
        },
        "type": "integer"
      },
      "ceil:N_seed_saturation": {
        "input:in": {
          "nodename": "N_offset_saturation",
          "type": "float"
        },
        "type": "integer"
      },
      "combine3:N_combine_HSV": {
        "input:in1": {
          "nodename": "N_range_hue",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_range_saturation",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_range_brightness",
          "type": "float"
        },
        "type": "color3"
      },
      "convert:N_convertSeed1": {
        "input:in": {
          "interfacename": "seed",
          "type": "integer"
        },
        "type": "float"
      },
      "hsvtorgb:N_HSV_to_RGB": {
        "input:in": {
          "nodename": "N_combine_HSV",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_randomcolor_float",
      "output:out": {
        "nodename": "N_HSV_to_RGB",
        "type": "color3"
      },
      "randomfloat:N_rand_brightness": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "input:seed": {
          "nodename": "N_seed_brightness",
          "type": "integer"
        },
        "type": "float"
      },
      "randomfloat:N_rand_hue": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "input:seed": {
          "nodename": "N_seed_hue",
          "type": "integer"
        },
        "type": "float"
      },
      "randomfloat:N_rand_saturation": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "input:seed": {
          "nodename": "N_seed_saturation",
          "type": "integer"
        },
        "type": "float"
      },
      "range:N_range_brightness": {
        "input:in": {
          "nodename": "N_rand_brightness",
          "type": "float"
        },
        "input:outhigh": {
          "interfacename": "brightnesshigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "brightnesslow",
          "type": "float"
        },
        "type": "float"
      },
      "range:N_range_hue": {
        "input:in": {
          "nodename": "N_rand_hue",
          "type": "float"
        },
        "input:outhigh": {
          "interfacename": "huehigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "huelow",
          "type": "float"
        },
        "type": "float"
      },
      "range:N_range_saturation": {
        "input:in": {
          "nodename": "N_rand_saturation",
          "type": "float"
        },
        "input:outhigh": {
          "interfacename": "saturationhigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "saturationlow",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_randomcolor_integer": {
      "convert:N_convert1": {
        "input:in": {
          "interfacename": "in",
          "type": "integer"
        },
        "type": "float"
      },
      "nodedef": "ND_randomcolor_integer",
      "output:out": {
        "nodename": "N_randomcolor1",
        "type": "color3"
      },
      "randomcolor:N_randomcolor1": {
        "input:brightnesshigh": {
          "interfacename": "brightnesshigh",
          "type": "float"
        },
        "input:brightnesslow": {
          "interfacename": "brightnesslow",
          "type": "float"
        },
        "input:huehigh": {
          "interfacename": "huehigh",
          "type": "float"
        },
        "input:huelow": {
          "interfacename": "huelow",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_convert1",
          "type": "float"
        },
        "input:saturationhigh": {
          "interfacename": "saturationhigh",
          "type": "float"
        },
        "input:saturationlow": {
          "interfacename": "saturationlow",
          "type": "float"
        },
        "input:seed": {
          "interfacename": "seed",
          "type": "integer"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_randomfloat_float": {
      "cellnoise2d:N_cellnoise1": {
        "input:texcoord": {
          "nodename": "N_combine2",
          "type": "vector2"
        },
        "type": "float"
      },
      "combine2:N_combine2": {
        "input:in1": {
          "nodename": "N_scaleInput",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_convertSeed1",
          "type": "float"
        },
        "type": "vector2"
      },
      "convert:N_convertSeed1": {
        "input:in": {
          "interfacename": "seed",
          "type": "integer"
        },
        "type": "float"
      },
      "multiply:N_scaleInput": {
        "input:in1": {
          "interfacename": "in",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "4096"
        },
        "type": "float"
      },
      "nodedef": "ND_randomfloat_float",
      "output:out": {
        "nodename": "N_remapRange",
        "type": "float"
      },
      "range:N_remapRange": {
        "input:doclamp": {
          "type": "boolean",
          "value": "true"
        },
        "input:in": {
          "nodename": "N_cellnoise1",
          "type": "float"
        },
        "input:outhigh": {
          "interfacename": "max",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "min",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_randomfloat_integer": {
      "cellnoise2d:N_cellnoise1": {
        "input:texcoord": {
          "nodename": "N_combine2",
          "type": "vector2"
        },
        "type": "float"
      },
      "combine2:N_combine2": {
        "input:in1": {
          "nodename": "N_convertInput1",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_convertSeed1",
          "type": "float"
        },
        "type": "vector2"
      },
      "convert:N_convertInput1": {
        "input:in": {
          "interfacename": "in",
          "type": "integer"
        },
        "type": "float"
      },
      "convert:N_convertSeed1": {
        "input:in": {
          "interfacename": "seed",
          "type": "integer"
        },
        "type": "float"
      },
      "nodedef": "ND_randomfloat_integer",
      "output:out": {
        "nodename": "N_remapRange",
        "type": "float"
      },
      "range:N_remapRange": {
        "input:doclamp": {
          "type": "boolean",
          "value": "true"
        },
        "input:in": {
          "nodename": "N_cellnoise1",
          "type": "float"
        },
        "input:outhigh": {
          "interfacename": "max",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "min",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_range_color3": {
      "absval:N_abs_color3": {
        "input:in": {
          "nodename": "N_remap1_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "clamp:N_clamp_color3": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "color3"
        },
        "input:in": {
          "nodename": "N_remap2_color3",
          "type": "color3"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "color3"
        },
        "type": "color3"
      },
      "divide:N_recip_color3": {
        "input:in1": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "color3"
        },
        "type": "color3"
      },
      "ifequal:N_switch_color3": {
        "input:in1": {
          "nodename": "N_clamp_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_remap2_color3",
          "type": "color3"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color3"
      },
      "multiply:N_gamma_color3": {
        "input:in1": {
          "nodename": "N_pow_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_sign_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_range_color3",
      "output:out": {
        "nodename": "N_switch_color3",
        "type": "color3"
      },
      "power:N_pow_color3": {
        "input:in1": {
          "nodename": "N_abs_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_recip_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "remap:N_remap1_color3": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "color3"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "color3"
        },
        "input:outhigh": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:outlow": {
          "type": "color3",
          "value": "0.0, 0.0, 0.0"
        },
        "type": "color3"
      },
      "remap:N_remap2_color3": {
        "input:in": {
          "nodename": "N_gamma_color3",
          "type": "color3"
        },
        "input:inhigh": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:inlow": {
          "type": "color3",
          "value": "0.0, 0.0, 0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "color3"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "color3"
        },
        "type": "color3"
      },
      "sign:N_sign_color3": {
        "input:in": {
          "nodename": "N_remap1_color3",
          "type": "color3"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_range_color3FA": {
      "absval:N_abs_color3FA": {
        "input:in": {
          "nodename": "N_remap1_color3FA",
          "type": "color3"
        },
        "type": "color3"
      },
      "clamp:N_clamp_color3FA": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_remap2_color3FA",
          "type": "color3"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "color3"
      },
      "divide:N_recip_color3FA": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:N_switch_color3FA": {
        "input:in1": {
          "nodename": "N_clamp_color3FA",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_remap2_color3FA",
          "type": "color3"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color3"
      },
      "multiply:N_gamma_color3FA": {
        "input:in1": {
          "nodename": "N_pow_color3FA",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_sign_color3FA",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_range_color3FA",
      "output:out": {
        "nodename": "N_switch_color3FA",
        "type": "color3"
      },
      "power:N_pow_color3FA": {
        "input:in1": {
          "nodename": "N_abs_color3FA",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_recip_color3FA",
          "type": "float"
        },
        "type": "color3"
      },
      "remap:N_remap1_color3FA": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "float"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "float"
        },
        "input:outhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:outlow": {
          "type": "float",
          "value": "0.0"
        },
        "type": "color3"
      },
      "remap:N_remap2_color3FA": {
        "input:in": {
          "nodename": "N_gamma_color3FA",
          "type": "color3"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:inlow": {
          "type": "float",
          "value": "0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "color3"
      },
      "sign:N_sign_color3FA": {
        "input:in": {
          "nodename": "N_remap1_color3FA",
          "type": "color3"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_range_color4": {
      "absval:N_abs_color4": {
        "input:in": {
          "nodename": "N_remap1_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "clamp:N_clamp_color4": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "color4"
        },
        "input:in": {
          "nodename": "N_remap2_color4",
          "type": "color4"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "color4"
        },
        "type": "color4"
      },
      "divide:N_recip_color4": {
        "input:in1": {
          "type": "color4",
          "value": "1.0, 1.0, 1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "color4"
        },
        "type": "color4"
      },
      "ifequal:N_switch_color4": {
        "input:in1": {
          "nodename": "N_clamp_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_remap2_color4",
          "type": "color4"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color4"
      },
      "multiply:N_gamma_color4": {
        "input:in1": {
          "nodename": "N_pow_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_sign_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_range_color4",
      "output:out": {
        "nodename": "N_switch_color4",
        "type": "color4"
      },
      "power:N_pow_color4": {
        "input:in1": {
          "nodename": "N_abs_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_recip_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "remap:N_remap1_color4": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "color4"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "color4"
        },
        "input:outhigh": {
          "type": "color4",
          "value": "1.0, 1.0, 1.0, 1.0"
        },
        "input:outlow": {
          "type": "color4",
          "value": "0.0, 0.0, 0.0, 0.0"
        },
        "type": "color4"
      },
      "remap:N_remap2_color4": {
        "input:in": {
          "nodename": "N_gamma_color4",
          "type": "color4"
        },
        "input:inhigh": {
          "type": "color4",
          "value": "1.0, 1.0, 1.0, 1.0"
        },
        "input:inlow": {
          "type": "color4",
          "value": "0.0, 0.0, 0.0, 0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "color4"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "color4"
        },
        "type": "color4"
      },
      "sign:N_sign_color4": {
        "input:in": {
          "nodename": "N_remap1_color4",
          "type": "color4"
        },
        "type": "color4"
      }
    },
    "nodegraph:NG_range_color4FA": {
      "absval:N_abs_color4FA": {
        "input:in": {
          "nodename": "N_remap1_color4FA",
          "type": "color4"
        },
        "type": "color4"
      },
      "clamp:N_clamp_color4FA": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_remap2_color4FA",
          "type": "color4"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "color4"
      },
      "divide:N_recip_color4FA": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:N_switch_color4FA": {
        "input:in1": {
          "nodename": "N_clamp_color4FA",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_remap2_color4FA",
          "type": "color4"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "color4"
      },
      "multiply:N_gamma_color4FA": {
        "input:in1": {
          "nodename": "N_pow_color4FA",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_sign_color4FA",
          "type": "color4"
        },
        "type": "color4"
      },
      "nodedef": "ND_range_color4FA",
      "output:out": {
        "nodename": "N_switch_color4FA",
        "type": "color4"
      },
      "power:N_pow_color4FA": {
        "input:in1": {
          "nodename": "N_abs_color4FA",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_recip_color4FA",
          "type": "float"
        },
        "type": "color4"
      },
      "remap:N_remap1_color4FA": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "float"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "float"
        },
        "input:outhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:outlow": {
          "type": "float",
          "value": "0.0"
        },
        "type": "color4"
      },
      "remap:N_remap2_color4FA": {
        "input:in": {
          "nodename": "N_gamma_color4FA",
          "type": "color4"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:inlow": {
          "type": "float",
          "value": "0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "color4"
      },
      "sign:N_sign_color4FA": {
        "input:in": {
          "nodename": "N_remap1_color4FA",
          "type": "color4"
        },
        "type": "color4"
      }
    },
    "nodegraph:NG_range_float": {
      "absval:N_abs_float": {
        "input:in": {
          "nodename": "N_remap1_float",
          "type": "float"
        },
        "type": "float"
      },
      "clamp:N_clamp_float": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_remap2_float",
          "type": "float"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "float"
      },
      "divide:N_recip_float": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:N_switch_float": {
        "input:in1": {
          "nodename": "N_clamp_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_remap2_float",
          "type": "float"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "float"
      },
      "multiply:N_gamma_float": {
        "input:in1": {
          "nodename": "N_pow_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_sign_float",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_range_float",
      "output:out": {
        "nodename": "N_switch_float",
        "type": "float"
      },
      "power:N_pow_float": {
        "input:in1": {
          "nodename": "N_abs_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_recip_float",
          "type": "float"
        },
        "type": "float"
      },
      "remap:N_remap1_float": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "float"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "float"
        },
        "input:outhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:outlow": {
          "type": "float",
          "value": "0.0"
        },
        "type": "float"
      },
      "remap:N_remap2_float": {
        "input:in": {
          "nodename": "N_gamma_float",
          "type": "float"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:inlow": {
          "type": "float",
          "value": "0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "float"
      },
      "sign:N_sign_float": {
        "input:in": {
          "nodename": "N_remap1_float",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_range_vector2": {
      "absval:N_abs_vector2": {
        "input:in": {
          "nodename": "N_remap1_vector2",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "clamp:N_clamp_vector2": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "vector2"
        },
        "input:in": {
          "nodename": "N_remap2_vector2",
          "type": "vector2"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "divide:N_recip_vector2": {
        "input:in1": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "ifequal:N_switch_vector2": {
        "input:in1": {
          "nodename": "N_clamp_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_remap2_vector2",
          "type": "vector2"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector2"
      },
      "multiply:N_gamma_vector2": {
        "input:in1": {
          "nodename": "N_pow_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_sign_vector2",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_range_vector2",
      "output:out": {
        "nodename": "N_switch_vector2",
        "type": "vector2"
      },
      "power:N_pow_vector2": {
        "input:in1": {
          "nodename": "N_abs_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_recip_vector2",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "remap:N_remap1_vector2": {
        "input:in": {
          "interfacename": "in",
          "type": "vector2"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "vector2"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "vector2"
        },
        "input:outhigh": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:outlow": {
          "type": "vector2",
          "value": "0.0, 0.0"
        },
        "type": "vector2"
      },
      "remap:N_remap2_vector2": {
        "input:in": {
          "nodename": "N_gamma_vector2",
          "type": "vector2"
        },
        "input:inhigh": {
          "type": "vector2",
          "value": "1.0, 1.0"
        },
        "input:inlow": {
          "type": "vector2",
          "value": "0.0, 0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "vector2"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "sign:N_sign_vector2": {
        "input:in": {
          "nodename": "N_remap1_vector2",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_range_vector2FA": {
      "absval:N_abs_vector2FA": {
        "input:in": {
          "nodename": "N_remap1_vector2FA",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "clamp:N_clamp_vector2FA": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_remap2_vector2FA",
          "type": "vector2"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "vector2"
      },
      "divide:N_recip_vector2FA": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:N_switch_vector2FA": {
        "input:in1": {
          "nodename": "N_clamp_vector2FA",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_remap2_vector2FA",
          "type": "vector2"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector2"
      },
      "multiply:N_gamma_vector2FA": {
        "input:in1": {
          "nodename": "N_pow_vector2FA",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_sign_vector2FA",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_range_vector2FA",
      "output:out": {
        "nodename": "N_switch_vector2FA",
        "type": "vector2"
      },
      "power:N_pow_vector2FA": {
        "input:in1": {
          "nodename": "N_abs_vector2FA",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_recip_vector2FA",
          "type": "float"
        },
        "type": "vector2"
      },
      "remap:N_remap1_vector2FA": {
        "input:in": {
          "interfacename": "in",
          "type": "vector2"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "float"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "float"
        },
        "input:outhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:outlow": {
          "type": "float",
          "value": "0.0"
        },
        "type": "vector2"
      },
      "remap:N_remap2_vector2FA": {
        "input:in": {
          "nodename": "N_gamma_vector2FA",
          "type": "vector2"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:inlow": {
          "type": "float",
          "value": "0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "vector2"
      },
      "sign:N_sign_vector2FA": {
        "input:in": {
          "nodename": "N_remap1_vector2FA",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_range_vector3": {
      "absval:N_abs_vector3": {
        "input:in": {
          "nodename": "N_remap1_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "clamp:N_clamp_vector3": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "vector3"
        },
        "input:in": {
          "nodename": "N_remap2_vector3",
          "type": "vector3"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "divide:N_recip_vector3": {
        "input:in1": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "ifequal:N_switch_vector3": {
        "input:in1": {
          "nodename": "N_clamp_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_remap2_vector3",
          "type": "vector3"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector3"
      },
      "multiply:N_gamma_vector3": {
        "input:in1": {
          "nodename": "N_pow_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_sign_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "nodedef": "ND_range_vector3",
      "output:out": {
        "nodename": "N_switch_vector3",
        "type": "vector3"
      },
      "power:N_pow_vector3": {
        "input:in1": {
          "nodename": "N_abs_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_recip_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "remap:N_remap1_vector3": {
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "vector3"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "vector3"
        },
        "input:outhigh": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:outlow": {
          "type": "vector3",
          "value": "0.0, 0.0, 0.0"
        },
        "type": "vector3"
      },
      "remap:N_remap2_vector3": {
        "input:in": {
          "nodename": "N_gamma_vector3",
          "type": "vector3"
        },
        "input:inhigh": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:inlow": {
          "type": "vector3",
          "value": "0.0, 0.0, 0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "vector3"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "sign:N_sign_vector3": {
        "input:in": {
          "nodename": "N_remap1_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_range_vector3FA": {
      "absval:N_abs_vector3FA": {
        "input:in": {
          "nodename": "N_remap1_vector3FA",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "clamp:N_clamp_vector3FA": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_remap2_vector3FA",
          "type": "vector3"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_recip_vector3FA": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:N_switch_vector3FA": {
        "input:in1": {
          "nodename": "N_clamp_vector3FA",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_remap2_vector3FA",
          "type": "vector3"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector3"
      },
      "multiply:N_gamma_vector3FA": {
        "input:in1": {
          "nodename": "N_pow_vector3FA",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_sign_vector3FA",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "nodedef": "ND_range_vector3FA",
      "output:out": {
        "nodename": "N_switch_vector3FA",
        "type": "vector3"
      },
      "power:N_pow_vector3FA": {
        "input:in1": {
          "nodename": "N_abs_vector3FA",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_recip_vector3FA",
          "type": "float"
        },
        "type": "vector3"
      },
      "remap:N_remap1_vector3FA": {
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "float"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "float"
        },
        "input:outhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:outlow": {
          "type": "float",
          "value": "0.0"
        },
        "type": "vector3"
      },
      "remap:N_remap2_vector3FA": {
        "input:in": {
          "nodename": "N_gamma_vector3FA",
          "type": "vector3"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:inlow": {
          "type": "float",
          "value": "0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "vector3"
      },
      "sign:N_sign_vector3FA": {
        "input:in": {
          "nodename": "N_remap1_vector3FA",
          "type": "vector3"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_range_vector4": {
      "absval:N_abs_vector4": {
        "input:in": {
          "nodename": "N_remap1_vector4",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "clamp:N_clamp_vector4": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "vector4"
        },
        "input:in": {
          "nodename": "N_remap2_vector4",
          "type": "vector4"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "divide:N_recip_vector4": {
        "input:in1": {
          "type": "vector4",
          "value": "1.0, 1.0, 1.0, 1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "ifequal:N_switch_vector4": {
        "input:in1": {
          "nodename": "N_clamp_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_remap2_vector4",
          "type": "vector4"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector4"
      },
      "multiply:N_gamma_vector4": {
        "input:in1": {
          "nodename": "N_pow_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_sign_vector4",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "nodedef": "ND_range_vector4",
      "output:out": {
        "nodename": "N_switch_vector4",
        "type": "vector4"
      },
      "power:N_pow_vector4": {
        "input:in1": {
          "nodename": "N_abs_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_recip_vector4",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "remap:N_remap1_vector4": {
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "vector4"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "vector4"
        },
        "input:outhigh": {
          "type": "vector4",
          "value": "1.0, 1.0, 1.0, 1.0"
        },
        "input:outlow": {
          "type": "vector4",
          "value": "0.0, 0.0, 0.0, 0.0"
        },
        "type": "vector4"
      },
      "remap:N_remap2_vector4": {
        "input:in": {
          "nodename": "N_gamma_vector4",
          "type": "vector4"
        },
        "input:inhigh": {
          "type": "vector4",
          "value": "1.0, 1.0, 1.0, 1.0"
        },
        "input:inlow": {
          "type": "vector4",
          "value": "0.0, 0.0, 0.0, 0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "vector4"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "sign:N_sign_vector4": {
        "input:in": {
          "nodename": "N_remap1_vector4",
          "type": "vector4"
        },
        "type": "vector4"
      }
    },
    "nodegraph:NG_range_vector4FA": {
      "absval:N_abs_vector4FA": {
        "input:in": {
          "nodename": "N_remap1_vector4FA",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "clamp:N_clamp_vector4FA": {
        "input:high": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_remap2_vector4FA",
          "type": "vector4"
        },
        "input:low": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "vector4"
      },
      "divide:N_recip_vector4FA": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "gamma",
          "type": "float"
        },
        "type": "float"
      },
      "ifequal:N_switch_vector4FA": {
        "input:in1": {
          "nodename": "N_clamp_vector4FA",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_remap2_vector4FA",
          "type": "vector4"
        },
        "input:value1": {
          "interfacename": "doclamp",
          "type": "boolean"
        },
        "input:value2": {
          "type": "boolean",
          "value": "true"
        },
        "type": "vector4"
      },
      "multiply:N_gamma_vector4FA": {
        "input:in1": {
          "nodename": "N_pow_vector4FA",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_sign_vector4FA",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "nodedef": "ND_range_vector4FA",
      "output:out": {
        "nodename": "N_switch_vector4FA",
        "type": "vector4"
      },
      "power:N_pow_vector4FA": {
        "input:in1": {
          "nodename": "N_abs_vector4FA",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_recip_vector4FA",
          "type": "float"
        },
        "type": "vector4"
      },
      "remap:N_remap1_vector4FA": {
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "input:inhigh": {
          "interfacename": "inhigh",
          "type": "float"
        },
        "input:inlow": {
          "interfacename": "inlow",
          "type": "float"
        },
        "input:outhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:outlow": {
          "type": "float",
          "value": "0.0"
        },
        "type": "vector4"
      },
      "remap:N_remap2_vector4FA": {
        "input:in": {
          "nodename": "N_gamma_vector4FA",
          "type": "vector4"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1.0"
        },
        "input:inlow": {
          "type": "float",
          "value": "0.0"
        },
        "input:outhigh": {
          "interfacename": "outhigh",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outlow",
          "type": "float"
        },
        "type": "vector4"
      },
      "sign:N_sign_vector4FA": {
        "input:in": {
          "nodename": "N_remap1_vector4FA",
          "type": "vector4"
        },
        "type": "vector4"
      }
    },
    "nodegraph:NG_rec709_display_to_lin_rec709_color3": {
      "max:max": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "nodedef": "ND_rec709_display_to_lin_rec709_color3",
      "output:out": {
        "nodename": "gamma",
        "type": "color3"
      },
      "power:gamma": {
        "input:in1": {
          "nodename": "max",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "2.4"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_rec709_display_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "nodedef": "ND_rec709_display_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      },
      "rec709_display_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_saturate_color3": {
      "luminance:N_gray_color3": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:lumacoeffs": {
          "interfacename": "lumacoeffs",
          "type": "color3"
        },
        "type": "color3"
      },
      "mix:N_mix_color3": {
        "input:bg": {
          "nodename": "N_gray_color3",
          "type": "color3"
        },
        "input:fg": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:mix": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_saturate_color3",
      "output:out": {
        "nodename": "N_mix_color3",
        "type": "color3"
      }
    },
    "nodegraph:NG_saturate_color4": {
      "luminance:N_gray_color4": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "input:lumacoeffs": {
          "interfacename": "lumacoeffs",
          "type": "color3"
        },
        "type": "color4"
      },
      "mix:N_mix_color4": {
        "input:bg": {
          "nodename": "N_gray_color4",
          "type": "color4"
        },
        "input:fg": {
          "interfacename": "in",
          "type": "color4"
        },
        "input:mix": {
          "interfacename": "amount",
          "type": "float"
        },
        "type": "color4"
      },
      "nodedef": "ND_saturate_color4",
      "output:out": {
        "nodename": "N_mix_color4",
        "type": "color4"
      }
    },
    "nodegraph:NG_separate2_vector2": {
      "nodedef": "ND_separate2_vector2",
      "output:outx": {
        "nodename": "N_x_vector2",
        "type": "float"
      },
      "output:outy": {
        "nodename": "N_y_vector2",
        "type": "float"
      },
      "swizzle:N_x_vector2": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector2"
        },
        "type": "float"
      },
      "swizzle:N_y_vector2": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_separate3_color3": {
      "nodedef": "ND_separate3_color3",
      "output:outb": {
        "nodename": "N_b_color3",
        "type": "float"
      },
      "output:outg": {
        "nodename": "N_g_color3",
        "type": "float"
      },
      "output:outr": {
        "nodename": "N_r_color3",
        "type": "float"
      },
      "swizzle:N_b_color3": {
        "input:channels": {
          "type": "string",
          "value": "b"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "float"
      },
      "swizzle:N_g_color3": {
        "input:channels": {
          "type": "string",
          "value": "g"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "float"
      },
      "swizzle:N_r_color3": {
        "input:channels": {
          "type": "string",
          "value": "r"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_separate3_vector3": {
      "nodedef": "ND_separate3_vector3",
      "output:outx": {
        "nodename": "N_x_vector3",
        "type": "float"
      },
      "output:outy": {
        "nodename": "N_y_vector3",
        "type": "float"
      },
      "output:outz": {
        "nodename": "N_z_vector3",
        "type": "float"
      },
      "swizzle:N_x_vector3": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "type": "float"
      },
      "swizzle:N_y_vector3": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "type": "float"
      },
      "swizzle:N_z_vector3": {
        "input:channels": {
          "type": "string",
          "value": "z"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector3"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_separate4_color4": {
      "nodedef": "ND_separate4_color4",
      "output:outa": {
        "nodename": "N_a_color4",
        "type": "float"
      },
      "output:outb": {
        "nodename": "N_b_color4",
        "type": "float"
      },
      "output:outg": {
        "nodename": "N_g_color4",
        "type": "float"
      },
      "output:outr": {
        "nodename": "N_r_color4",
        "type": "float"
      },
      "swizzle:N_a_color4": {
        "input:channels": {
          "type": "string",
          "value": "a"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:N_b_color4": {
        "input:channels": {
          "type": "string",
          "value": "b"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:N_g_color4": {
        "input:channels": {
          "type": "string",
          "value": "g"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      },
      "swizzle:N_r_color4": {
        "input:channels": {
          "type": "string",
          "value": "r"
        },
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_separate4_vector4": {
      "nodedef": "ND_separate4_vector4",
      "output:outw": {
        "nodename": "N_w_vector4",
        "type": "float"
      },
      "output:outx": {
        "nodename": "N_x_vector4",
        "type": "float"
      },
      "output:outy": {
        "nodename": "N_y_vector4",
        "type": "float"
      },
      "output:outz": {
        "nodename": "N_z_vector4",
        "type": "float"
      },
      "swizzle:N_w_vector4": {
        "input:channels": {
          "type": "string",
          "value": "w"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      },
      "swizzle:N_x_vector4": {
        "input:channels": {
          "type": "string",
          "value": "x"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      },
      "swizzle:N_y_vector4": {
        "input:channels": {
          "type": "string",
          "value": "y"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      },
      "swizzle:N_z_vector4": {
        "input:channels": {
          "type": "string",
          "value": "z"
        },
        "input:in": {
          "interfacename": "in",
          "type": "vector4"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_srgb_displayp3_to_lin_rec709_color3": {
      "constant:mat": {
        "input:value": {
          "type": "matrix33",
          "value": "1.22493029, -0.22492968, 0.00000006, -0.04205868,  1.04205894, -0.00000001, -0.01964128, -0.07864794, 1.09828925"
        },
        "type": "matrix33"
      },
      "convert:asColor": {
        "input:in": {
          "nodename": "transform",
          "type": "vector3"
        },
        "type": "color3"
      },
      "convert:asVec": {
        "input:in": {
          "nodename": "srgb_transform",
          "type": "color3"
        },
        "type": "vector3"
      },
      "nodedef": "ND_srgb_displayp3_to_lin_rec709_color3",
      "output:out": {
        "nodename": "asColor",
        "type": "color3"
      },
      "srgb_texture_to_lin_rec709:srgb_transform": {
        "input:in": {
          "interfacename": "in",
          "type": "color3"
        },
        "type": "color3"
      },
      "transformmatrix:transform": {
        "input:in": {
          "nodename": "asVec",
          "type": "vector3"
        },
        "input:mat": {
          "nodename": "mat",
          "type": "matrix33"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_srgb_displayp3_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "nodedef": "ND_srgb_displayp3_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      },
      "srgb_displayp3_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_srgb_texture_to_lin_rec709_color3": {
      "add:bias": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0.055"
        },
        "type": "color3"
      },
      "combine3:isAbove": {
        "input:in1": {
          "nodename": "isAboveR",
          "type": "float"
        },
        "input:in2": {
          "nodename": "isAboveG",
          "type": "float"
        },
        "input:in3": {
          "nodename": "isAboveB",
          "type": "float"
        },
        "type": "color3"
      },
      "constant:threshhold": {
        "input:value": {
          "type": "float",
          "value": "0.04045"
        },
        "type": "float"
      },
      "divide:linSeg": {
        "input:in1": {
          "interfacename": "in",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "12.92"
        },
        "type": "color3"
      },
      "divide:scale": {
        "input:in1": {
          "nodename": "max",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "1.055"
        },
        "type": "color3"
      },
      "ifgreater:isAboveB": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "channels": "b",
          "interfacename": "in",
          "type": "float"
        },
        "input:value2": {
          "nodename": "threshhold",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:isAboveG": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "channels": "g",
          "interfacename": "in",
          "type": "float"
        },
        "input:value2": {
          "nodename": "threshhold",
          "type": "float"
        },
        "type": "float"
      },
      "ifgreater:isAboveR": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "channels": "r",
          "interfacename": "in",
          "type": "float"
        },
        "input:value2": {
          "nodename": "threshhold",
          "type": "float"
        },
        "type": "float"
      },
      "max:max": {
        "input:in1": {
          "nodename": "bias",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "mix:mix": {
        "input:bg": {
          "nodename": "linSeg",
          "type": "color3"
        },
        "input:fg": {
          "nodename": "powSeg",
          "type": "color3"
        },
        "input:mix": {
          "nodename": "isAbove",
          "type": "color3"
        },
        "type": "color3"
      },
      "nodedef": "ND_srgb_texture_to_lin_rec709_color3",
      "output:out": {
        "nodename": "mix",
        "type": "color3"
      },
      "power:powSeg": {
        "input:in1": {
          "nodename": "scale",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "2.4"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_srgb_texture_to_lin_rec709_color4": {
      "combine4:asColor4": {
        "input:in1": {
          "channels": "r",
          "nodename": "transform",
          "type": "float"
        },
        "input:in2": {
          "channels": "g",
          "nodename": "transform",
          "type": "float"
        },
        "input:in3": {
          "channels": "b",
          "nodename": "transform",
          "type": "float"
        },
        "input:in4": {
          "channels": "a",
          "interfacename": "in",
          "type": "float"
        },
        "type": "color4"
      },
      "convert:asColor3": {
        "input:in": {
          "interfacename": "in",
          "type": "color4"
        },
        "type": "color3"
      },
      "nodedef": "ND_srgb_texture_to_lin_rec709_color4",
      "output:out": {
        "nodename": "asColor4",
        "type": "color4"
      },
      "srgb_texture_to_lin_rec709:transform": {
        "input:in": {
          "nodename": "asColor3",
          "type": "color3"
        },
        "type": "color3"
      }
    },
    "nodegraph:NG_standard_surface_surfaceshader_100": {
      "add:coat_gamma": {
        "input:in1": {
          "nodename": "coat_gamma_multiply",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1.0"
        },
        "type": "float"
      },
      "add:one_plus_coat_ior": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "coat_IOR",
          "type": "float"
        },
        "type": "float"
      },
      "add:transmission_roughness_add": {
        "input:in1": {
          "interfacename": "specular_roughness",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "transmission_extra_roughness",
          "type": "float"
        },
        "type": "float"
      },
      "artistic_ior:artistic_ior": {
        "input:edge_color": {
          "nodename": "metal_edgecolor",
          "type": "color3"
        },
        "input:reflectivity": {
          "nodename": "metal_reflectivity",
          "type": "color3"
        },
        "type": "multioutput"
      },
      "clamp:coat_clamped": {
        "input:in": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "float"
      },
      "clamp:transmission_roughness_clamped": {
        "input:in": {
          "nodename": "transmission_roughness_add",
          "type": "float"
        },
        "type": "float"
      },
      "conductor_bsdf:metal_bsdf": {
        "input:distribution": {
          "type": "string",
          "value": "ggx"
        },
        "input:extinction": {
          "nodename": "artistic_ior",
          "output": "extinction",
          "type": "color3"
        },
        "input:ior": {
          "nodename": "artistic_ior",
          "output": "ior",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "main_roughness",
          "type": "vector2"
        },
        "input:tangent": {
          "nodename": "main_tangent",
          "type": "vector3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "convert:subsurface_radius_vector": {
        "input:in": {
          "interfacename": "subsurface_radius",
          "type": "color3"
        },
        "type": "vector3"
      },
      "convert:subsurface_selector": {
        "input:in": {
          "interfacename": "thin_walled",
          "type": "boolean"
        },
        "type": "float"
      },
      "dielectric_bsdf:coat_bsdf": {
        "input:distribution": {
          "type": "string",
          "value": "ggx"
        },
        "input:ior": {
          "interfacename": "coat_IOR",
          "type": "float"
        },
        "input:normal": {
          "interfacename": "coat_normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "coat_roughness_vector",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "R"
        },
        "input:tangent": {
          "nodename": "coat_tangent",
          "type": "vector3"
        },
        "input:tint": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:weight": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:specular_bsdf": {
        "input:distribution": {
          "type": "string",
          "value": "ggx"
        },
        "input:ior": {
          "interfacename": "specular_IOR",
          "type": "float"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "main_roughness",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "R"
        },
        "input:tangent": {
          "nodename": "main_tangent",
          "type": "vector3"
        },
        "input:tint": {
          "interfacename": "specular_color",
          "type": "color3"
        },
        "input:weight": {
          "interfacename": "specular",
          "type": "float"
        },
        "type": "BSDF"
      },
      "dielectric_bsdf:transmission_bsdf": {
        "input:distribution": {
          "type": "string",
          "value": "ggx"
        },
        "input:ior": {
          "interfacename": "specular_IOR",
          "type": "float"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "nodename": "transmission_roughness",
          "type": "vector2"
        },
        "input:scatter_mode": {
          "type": "string",
          "value": "T"
        },
        "input:tangent": {
          "nodename": "main_tangent",
          "type": "vector3"
        },
        "input:tint": {
          "interfacename": "transmission_color",
          "type": "color3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "divide:coat_ior_to_F0_sqrt": {
        "input:in1": {
          "nodename": "one_minus_coat_ior",
          "type": "float"
        },
        "input:in2": {
          "nodename": "one_plus_coat_ior",
          "type": "float"
        },
        "type": "float"
      },
      "generalized_schlick_edf:coat_emission_edf": {
        "input:base": {
          "nodename": "coat_tinted_emission_edf",
          "type": "EDF"
        },
        "input:color0": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:color90": {
          "channels": "rrr",
          "nodename": "coat_ior_to_F0",
          "type": "color3"
        },
        "input:exponent": {
          "type": "float",
          "value": "5.0"
        },
        "type": "EDF"
      },
      "ifgreater:coat_tangent": {
        "input:in1": {
          "nodename": "coat_tangent_rotate_normalize",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "input:value1": {
          "interfacename": "coat_anisotropy",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0.0"
        },
        "type": "vector3"
      },
      "ifgreater:main_tangent": {
        "input:in1": {
          "nodename": "tangent_rotate_normalize",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "input:value1": {
          "interfacename": "specular_anisotropy",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0.0"
        },
        "type": "vector3"
      },
      "layer:coat_layer": {
        "input:base": {
          "nodename": "thin_film_layer_attenuated",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "coat_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:sheen_layer": {
        "input:base": {
          "nodename": "subsurface_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "sheen_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:specular_layer": {
        "input:base": {
          "nodename": "transmission_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "specular_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "layer:thin_film_layer": {
        "input:base": {
          "nodename": "metalness_mix",
          "type": "BSDF"
        },
        "input:top": {
          "nodename": "thin_film_bsdf",
          "type": "BSDF"
        },
        "type": "BSDF"
      },
      "luminance:opacity_luminance": {
        "input:in": {
          "interfacename": "opacity",
          "type": "color3"
        },
        "type": "color3"
      },
      "max:base_color_nonnegative": {
        "input:in1": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0.0"
        },
        "type": "color3"
      },
      "max:subsurface_color_nonnegative": {
        "input:in1": {
          "interfacename": "subsurface_color",
          "type": "color3"
        },
        "input:in2": {
          "type": "float",
          "value": "0.0"
        },
        "type": "color3"
      },
      "mix:blended_coat_emission_edf": {
        "input:bg": {
          "nodename": "emission_edf",
          "type": "EDF"
        },
        "input:fg": {
          "nodename": "coat_emission_edf",
          "type": "EDF"
        },
        "input:mix": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "EDF"
      },
      "mix:coat_affected_roughness": {
        "input:bg": {
          "interfacename": "specular_roughness",
          "type": "float"
        },
        "input:fg": {
          "type": "float",
          "value": "1.0"
        },
        "input:mix": {
          "nodename": "coat_affect_roughness_multiply2",
          "type": "float"
        },
        "type": "float"
      },
      "mix:coat_affected_transmission_roughness": {
        "input:bg": {
          "nodename": "transmission_roughness_clamped",
          "type": "float"
        },
        "input:fg": {
          "type": "float",
          "value": "1.0"
        },
        "input:mix": {
          "nodename": "coat_affect_roughness_multiply2",
          "type": "float"
        },
        "type": "float"
      },
      "mix:coat_attenuation": {
        "input:bg": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:fg": {
          "interfacename": "coat_color",
          "type": "color3"
        },
        "input:mix": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "color3"
      },
      "mix:metalness_mix": {
        "input:bg": {
          "nodename": "specular_layer",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "metal_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "metalness",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:selected_subsurface_bsdf": {
        "input:bg": {
          "nodename": "subsurface_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "translucent_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "nodename": "subsurface_selector",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:subsurface_mix": {
        "input:bg": {
          "nodename": "diffuse_bsdf",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "selected_subsurface_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "subsurface",
          "type": "float"
        },
        "type": "BSDF"
      },
      "mix:transmission_mix": {
        "input:bg": {
          "nodename": "sheen_layer",
          "type": "BSDF"
        },
        "input:fg": {
          "nodename": "transmission_bsdf",
          "type": "BSDF"
        },
        "input:mix": {
          "interfacename": "transmission",
          "type": "float"
        },
        "type": "BSDF"
      },
      "multiply:coat_affect_roughness_multiply1": {
        "input:in1": {
          "interfacename": "coat_affect_roughness",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:coat_affect_roughness_multiply2": {
        "input:in1": {
          "nodename": "coat_affect_roughness_multiply1",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "coat_roughness",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:coat_gamma_multiply": {
        "input:in1": {
          "nodename": "coat_clamped",
          "type": "float"
        },
        "input:in2": {
          "interfacename": "coat_affect_color",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:coat_ior_to_F0": {
        "input:in1": {
          "nodename": "coat_ior_to_F0_sqrt",
          "type": "float"
        },
        "input:in2": {
          "nodename": "coat_ior_to_F0_sqrt",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:coat_tangent_rotate_degree": {
        "input:in1": {
          "interfacename": "coat_rotation",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "360"
        },
        "type": "float"
      },
      "multiply:coat_tinted_emission_edf": {
        "input:in1": {
          "nodename": "emission_edf",
          "type": "EDF"
        },
        "input:in2": {
          "interfacename": "coat_color",
          "type": "color3"
        },
        "type": "EDF"
      },
      "multiply:emission_weight": {
        "input:in1": {
          "interfacename": "emission_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "emission",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:metal_edgecolor": {
        "input:in1": {
          "interfacename": "specular_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "specular",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:metal_reflectivity": {
        "input:in1": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "base",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:subsurface_radius_scaled": {
        "input:in1": {
          "nodename": "subsurface_radius_vector",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "subsurface_scale",
          "type": "float"
        },
        "type": "vector3"
      },
      "multiply:tangent_rotate_degree": {
        "input:in1": {
          "interfacename": "specular_rotation",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "360"
        },
        "type": "float"
      },
      "multiply:thin_film_layer_attenuated": {
        "input:in1": {
          "nodename": "thin_film_layer",
          "type": "BSDF"
        },
        "input:in2": {
          "nodename": "coat_attenuation",
          "type": "color3"
        },
        "type": "BSDF"
      },
      "normalize:coat_tangent_rotate_normalize": {
        "input:in": {
          "nodename": "coat_tangent_rotate",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "normalize:tangent_rotate_normalize": {
        "input:in": {
          "nodename": "tangent_rotate",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "oren_nayar_diffuse_bsdf:diffuse_bsdf": {
        "input:color": {
          "nodename": "coat_affected_diffuse_color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "interfacename": "diffuse_roughness",
          "type": "float"
        },
        "input:weight": {
          "interfacename": "base",
          "type": "float"
        },
        "type": "BSDF"
      },
      "output:out": {
        "nodename": "shader_constructor",
        "type": "surfaceshader"
      },
      "power:coat_affected_diffuse_color": {
        "input:in1": {
          "nodename": "base_color_nonnegative",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "coat_gamma",
          "type": "float"
        },
        "type": "color3"
      },
      "power:coat_affected_subsurface_color": {
        "input:in1": {
          "nodename": "subsurface_color_nonnegative",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "coat_gamma",
          "type": "float"
        },
        "type": "color3"
      },
      "rotate3d:coat_tangent_rotate": {
        "input:amount": {
          "nodename": "coat_tangent_rotate_degree",
          "type": "float"
        },
        "input:axis": {
          "interfacename": "coat_normal",
          "type": "vector3"
        },
        "input:in": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "rotate3d:tangent_rotate": {
        "input:amount": {
          "nodename": "tangent_rotate_degree",
          "type": "float"
        },
        "input:axis": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:in": {
          "interfacename": "tangent",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "roughness_anisotropy:coat_roughness_vector": {
        "input:anisotropy": {
          "interfacename": "coat_anisotropy",
          "type": "float"
        },
        "input:roughness": {
          "interfacename": "coat_roughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "roughness_anisotropy:main_roughness": {
        "input:anisotropy": {
          "interfacename": "specular_anisotropy",
          "type": "float"
        },
        "input:roughness": {
          "nodename": "coat_affected_roughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "roughness_anisotropy:transmission_roughness": {
        "input:anisotropy": {
          "interfacename": "specular_anisotropy",
          "type": "float"
        },
        "input:roughness": {
          "nodename": "coat_affected_transmission_roughness",
          "type": "float"
        },
        "type": "vector2"
      },
      "sheen_bsdf:sheen_bsdf": {
        "input:color": {
          "interfacename": "sheen_color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:roughness": {
          "interfacename": "sheen_roughness",
          "type": "float"
        },
        "input:weight": {
          "interfacename": "sheen",
          "type": "float"
        },
        "type": "BSDF"
      },
      "subsurface_bsdf:subsurface_bsdf": {
        "input:anisotropy": {
          "interfacename": "subsurface_anisotropy",
          "type": "float"
        },
        "input:color": {
          "nodename": "coat_affected_subsurface_color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:radius": {
          "nodename": "subsurface_radius_scaled",
          "type": "vector3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "subtract:one_minus_coat_ior": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "interfacename": "coat_IOR",
          "type": "float"
        },
        "type": "float"
      },
      "surface:shader_constructor": {
        "input:bsdf": {
          "nodename": "coat_layer",
          "type": "BSDF"
        },
        "input:edf": {
          "nodename": "blended_coat_emission_edf",
          "type": "EDF"
        },
        "input:opacity": {
          "channels": "r",
          "nodename": "opacity_luminance",
          "type": "float"
        },
        "type": "surfaceshader"
      },
      "thin_film_bsdf:thin_film_bsdf": {
        "input:ior": {
          "interfacename": "thin_film_IOR",
          "type": "float"
        },
        "input:thickness": {
          "interfacename": "thin_film_thickness",
          "type": "float"
        },
        "type": "BSDF"
      },
      "translucent_bsdf:translucent_bsdf": {
        "input:color": {
          "nodename": "coat_affected_subsurface_color",
          "type": "color3"
        },
        "input:normal": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:weight": {
          "type": "float",
          "value": "1.0"
        },
        "type": "BSDF"
      },
      "uniform_edf:emission_edf": {
        "input:color": {
          "nodename": "emission_weight",
          "type": "color3"
        },
        "type": "EDF"
      }
    },
    "nodegraph:NG_standard_surface_to_UsdPreviewSurface": {
      "divide:constantOneThird": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "3"
        },
        "type": "float"
      },
      "dot:clearcoatRoughness": {
        "input:in": {
          "interfacename": "coat_roughness",
          "type": "float"
        },
        "type": "float"
      },
      "dot:ior": {
        "input:in": {
          "interfacename": "specular_IOR",
          "type": "float"
        },
        "type": "float"
      },
      "dot:metallic": {
        "input:in": {
          "interfacename": "metalness",
          "type": "float"
        },
        "type": "float"
      },
      "dot:roughness": {
        "input:in": {
          "interfacename": "specular_roughness",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:clearcoat": {
        "input:in1": {
          "channels": "rgb",
          "nodename": "coatColor",
          "type": "vector3"
        },
        "input:in2": {
          "channels": "xxx",
          "nodename": "constantOneThird",
          "type": "vector3"
        },
        "type": "float"
      },
      "dotproduct:opacity": {
        "input:in1": {
          "channels": "rgb",
          "interfacename": "opacity",
          "type": "vector3"
        },
        "input:in2": {
          "channels": "xxx",
          "nodename": "constantOneThird",
          "type": "vector3"
        },
        "type": "float"
      },
      "mix:coatAttenuation": {
        "input:bg": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:fg": {
          "interfacename": "coat_color",
          "type": "color3"
        },
        "input:mix": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:coatColor": {
        "input:in1": {
          "interfacename": "coat_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:diffuseColor": {
        "input:in1": {
          "nodename": "scaledBaseColor",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "coatAttenuation",
          "type": "color3"
        },
        "type": "color3"
      },
      "multiply:emissiveColor": {
        "input:in1": {
          "interfacename": "emission_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "emission",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:normal": {
        "input:in1": {
          "nodename": "biasNormal",
          "type": "vector3"
        },
        "input:in2": {
          "type": "float",
          "value": "2"
        },
        "type": "vector3"
      },
      "multiply:scaledBaseColor": {
        "input:in1": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "base",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_standard_surface_to_UsdPreviewSurface",
      "output:clearcoatRoughness_out": {
        "nodename": "clearcoatRoughness",
        "type": "float"
      },
      "output:clearcoat_out": {
        "nodename": "clearcoat",
        "type": "float"
      },
      "output:diffuseColor_out": {
        "nodename": "diffuseColor",
        "type": "color3"
      },
      "output:emissiveColor_out": {
        "nodename": "emissiveColor",
        "type": "color3"
      },
      "output:ior_out": {
        "nodename": "ior",
        "type": "float"
      },
      "output:metallic_out": {
        "nodename": "metallic",
        "type": "float"
      },
      "output:normal_out": {
        "nodename": "normal",
        "type": "vector3"
      },
      "output:opacity_out": {
        "nodename": "opacity",
        "type": "float"
      },
      "output:roughness_out": {
        "nodename": "roughness",
        "type": "float"
      },
      "subtract:biasNormal": {
        "input:in1": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "vector3"
      }
    },
    "nodegraph:NG_standard_surface_to_gltf_pbr": {
      "divide:constantOneThird": {
        "input:in1": {
          "type": "float",
          "value": "1"
        },
        "input:in2": {
          "type": "float",
          "value": "3"
        },
        "type": "float"
      },
      "dot:attenuation_color": {
        "input:in": {
          "interfacename": "transmission_color",
          "type": "color3"
        },
        "type": "color3"
      },
      "dot:clearcoat_roughness": {
        "input:in": {
          "interfacename": "coat_roughness",
          "type": "float"
        },
        "type": "float"
      },
      "dot:metallic": {
        "input:in": {
          "interfacename": "metalness",
          "type": "float"
        },
        "type": "float"
      },
      "dot:roughness": {
        "input:in": {
          "interfacename": "specular_roughness",
          "type": "float"
        },
        "type": "float"
      },
      "dot:thickness": {
        "input:in": {
          "interfacename": "transmission_depth",
          "type": "float"
        },
        "type": "float"
      },
      "dot:transmission": {
        "input:in": {
          "interfacename": "transmission",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:has_coat_color": {
        "input:in1": {
          "channels": "rgb",
          "interfacename": "coat_color",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1,1,1"
        },
        "type": "float"
      },
      "dotproduct:weightedCoat": {
        "input:in1": {
          "channels": "rgb",
          "nodename": "coatColor",
          "type": "vector3"
        },
        "input:in2": {
          "channels": "xxx",
          "nodename": "constantOneThird",
          "type": "vector3"
        },
        "type": "float"
      },
      "ifequal:base_color": {
        "input:in1": {
          "nodename": "scaledBaseColor",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "mixedBaseColor",
          "type": "color3"
        },
        "input:value1": {
          "nodename": "has_coat_color",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "color3"
      },
      "ifequal:clearcoat": {
        "input:in1": {
          "interfacename": "coat",
          "type": "float"
        },
        "input:in2": {
          "nodename": "weightedCoat",
          "type": "float"
        },
        "input:value1": {
          "nodename": "has_coat_color",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "ifgreater:sheen_roughness": {
        "input:in1": {
          "interfacename": "sheen_roughness",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0"
        },
        "input:value1": {
          "interfacename": "sheen",
          "type": "float"
        },
        "input:value2": {
          "type": "float",
          "value": "0"
        },
        "type": "float"
      },
      "mix:coatAttenuation": {
        "input:bg": {
          "type": "color3",
          "value": "1.0, 1.0, 1.0"
        },
        "input:fg": {
          "interfacename": "coat_color",
          "type": "color3"
        },
        "input:mix": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:coatColor": {
        "input:in1": {
          "interfacename": "coat_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "coat",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:emissive": {
        "input:in1": {
          "interfacename": "emission_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "emission",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:mixedBaseColor": {
        "input:in1": {
          "nodename": "scaledBaseColor",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "coatAttenuation",
          "type": "color3"
        },
        "type": "color3"
      },
      "multiply:scaledBaseColor": {
        "input:in1": {
          "interfacename": "base_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "base",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:sheen_color": {
        "input:in1": {
          "interfacename": "sheen_color",
          "type": "color3"
        },
        "input:in2": {
          "interfacename": "sheen",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_standard_surface_to_gltf_pbr",
      "output:attenuation_color_out": {
        "nodename": "attenuation_color",
        "type": "color3"
      },
      "output:base_color_out": {
        "nodename": "base_color",
        "type": "color3"
      },
      "output:clearcoat_out": {
        "nodename": "clearcoat",
        "type": "float"
      },
      "output:clearcoat_roughness_out": {
        "nodename": "clearcoat_roughness",
        "type": "float"
      },
      "output:emissive_out": {
        "nodename": "emissive",
        "type": "color3"
      },
      "output:metallic_out": {
        "nodename": "metallic",
        "type": "float"
      },
      "output:roughness_out": {
        "nodename": "roughness",
        "type": "float"
      },
      "output:sheen_color_out": {
        "nodename": "sheen_color",
        "type": "color3"
      },
      "output:sheen_roughness_out": {
        "nodename": "sheen_roughness",
        "type": "float"
      },
      "output:thickness_out": {
        "nodename": "thickness",
        "type": "float"
      },
      "output:transmission_out": {
        "nodename": "transmission",
        "type": "float"
      }
    },
    "nodegraph:NG_tiledimage_color3": {
      "divide:N_divtilesize_color3": {
        "input:in1": {
          "nodename": "N_sub_color3",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldimagesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:N_img_color3": {
        "input:default": {
          "interfacename": "default",
          "type": "color3"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_multtilesize_color3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color3"
      },
      "multiply:N_mult_color3": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvtiling",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_multtilesize_color3": {
        "input:in1": {
          "nodename": "N_divtilesize_color3",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldtilesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_tiledimage_color3",
      "output:out": {
        "nodename": "N_img_color3",
        "type": "color3"
      },
      "subtract:N_sub_color3": {
        "input:in1": {
          "nodename": "N_mult_color3",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvoffset",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_tiledimage_color4": {
      "divide:N_divtilesize_color4": {
        "input:in1": {
          "nodename": "N_sub_color4",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldimagesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:N_img_color4": {
        "input:default": {
          "interfacename": "default",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_multtilesize_color4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color4"
      },
      "multiply:N_mult_color4": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvtiling",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_multtilesize_color4": {
        "input:in1": {
          "nodename": "N_divtilesize_color4",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldtilesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_tiledimage_color4",
      "output:out": {
        "nodename": "N_img_color4",
        "type": "color4"
      },
      "subtract:N_sub_color4": {
        "input:in1": {
          "nodename": "N_mult_color4",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvoffset",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_tiledimage_float": {
      "divide:N_divtilesize_float": {
        "input:in1": {
          "nodename": "N_sub_float",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldimagesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:N_img_float": {
        "input:default": {
          "interfacename": "default",
          "type": "float"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_multtilesize_float",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "float"
      },
      "multiply:N_mult_float": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvtiling",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_multtilesize_float": {
        "input:in1": {
          "nodename": "N_divtilesize_float",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldtilesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_tiledimage_float",
      "output:out": {
        "nodename": "N_img_float",
        "type": "float"
      },
      "subtract:N_sub_float": {
        "input:in1": {
          "nodename": "N_mult_float",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvoffset",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_tiledimage_vector2": {
      "divide:N_divtilesize_vector2": {
        "input:in1": {
          "nodename": "N_sub_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldimagesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:N_img_vector2": {
        "input:default": {
          "interfacename": "default",
          "type": "vector2"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_multtilesize_vector2",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector2"
      },
      "multiply:N_mult_vector2": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvtiling",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_multtilesize_vector2": {
        "input:in1": {
          "nodename": "N_divtilesize_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldtilesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_tiledimage_vector2",
      "output:out": {
        "nodename": "N_img_vector2",
        "type": "vector2"
      },
      "subtract:N_sub_vector2": {
        "input:in1": {
          "nodename": "N_mult_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvoffset",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_tiledimage_vector3": {
      "divide:N_divtilesize_vector3": {
        "input:in1": {
          "nodename": "N_sub_vector3",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldimagesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:N_img_vector3": {
        "input:default": {
          "interfacename": "default",
          "type": "vector3"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_multtilesize_vector3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector3"
      },
      "multiply:N_mult_vector3": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvtiling",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_multtilesize_vector3": {
        "input:in1": {
          "nodename": "N_divtilesize_vector3",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldtilesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_tiledimage_vector3",
      "output:out": {
        "nodename": "N_img_vector3",
        "type": "vector3"
      },
      "subtract:N_sub_vector3": {
        "input:in1": {
          "nodename": "N_mult_vector3",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvoffset",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_tiledimage_vector4": {
      "divide:N_divtilesize_vector4": {
        "input:in1": {
          "nodename": "N_sub_vector4",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldimagesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "image:N_img_vector4": {
        "input:default": {
          "interfacename": "default",
          "type": "vector4"
        },
        "input:file": {
          "interfacename": "file",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_multtilesize_vector4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector4"
      },
      "multiply:N_mult_vector4": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvtiling",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_multtilesize_vector4": {
        "input:in1": {
          "nodename": "N_divtilesize_vector4",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "realworldtilesize",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "nodedef": "ND_tiledimage_vector4",
      "output:out": {
        "nodename": "N_img_vector4",
        "type": "vector4"
      },
      "subtract:N_sub_vector4": {
        "input:in1": {
          "nodename": "N_mult_vector4",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "uvoffset",
          "type": "vector2"
        },
        "type": "vector2"
      }
    },
    "nodegraph:NG_trianglewave_float": {
      "absval:absval1": {
        "input:in": {
          "interfacename": "in",
          "type": "float"
        },
        "type": "float"
      },
      "absval:absval2": {
        "input:in": {
          "nodename": "subtract1",
          "type": "float"
        },
        "type": "float"
      },
      "modulo:modulo1": {
        "input:in1": {
          "nodename": "absval1",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_trianglewave_float",
      "output:out": {
        "nodename": "subtract2",
        "type": "float"
      },
      "subtract:subtract1": {
        "input:in1": {
          "nodename": "modulo1",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "0.5"
        },
        "type": "float"
      },
      "subtract:subtract2": {
        "input:in1": {
          "type": "float",
          "value": "0.5"
        },
        "input:in2": {
          "nodename": "absval2",
          "type": "float"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_triplanarprojection_color3": {
      "absval:N_absN": {
        "input:in": {
          "nodename": "N_norm_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "add:N_add1_color3": {
        "input:in1": {
          "nodename": "N_nX_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_nY_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "add:N_add2_color3": {
        "input:in1": {
          "nodename": "N_add1_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_nZ_color3",
          "type": "color3"
        },
        "type": "color3"
      },
      "clamp:N_clampForPrecision": {
        "input:in": {
          "interfacename": "blend",
          "type": "float"
        },
        "input:low": {
          "type": "float",
          "value": "0.03"
        },
        "type": "float"
      },
      "combine2:N_vecXY_color3": {
        "input:in1": {
          "nodename": "N_extX_color3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extY_color3",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecXZ_color3": {
        "input:in1": {
          "nodename": "N_extX_color3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_color3",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecYZ_color3": {
        "input:in1": {
          "nodename": "N_extY_color3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_color3",
          "type": "float"
        },
        "type": "vector2"
      },
      "divide:N_normalizeBlendedWeights": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotBlendedN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_normalizeWeights": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_oneOverBlend": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "N_clampForPrecision",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:N_dotBlendedN": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "dotproduct:N_dotN": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "extract:N_extX_color3": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_extY_color3": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "extract:N_extZ_color3": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "2"
        },
        "type": "float"
      },
      "image:N_imgX_color3": {
        "input:default": {
          "interfacename": "default",
          "type": "color3"
        },
        "input:file": {
          "interfacename": "filex",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerx",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecYZ_color3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color3"
      },
      "image:N_imgY_color3": {
        "input:default": {
          "interfacename": "default",
          "type": "color3"
        },
        "input:file": {
          "interfacename": "filey",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layery",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXZ_color3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color3"
      },
      "image:N_imgZ_color3": {
        "input:default": {
          "interfacename": "default",
          "type": "color3"
        },
        "input:file": {
          "interfacename": "filez",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerz",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXY_color3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color3"
      },
      "multiply:N_nX_color3": {
        "input:in1": {
          "nodename": "N_imgX_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outx",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:N_nY_color3": {
        "input:in1": {
          "nodename": "N_imgY_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outy",
          "type": "float"
        },
        "type": "color3"
      },
      "multiply:N_nZ_color3": {
        "input:in1": {
          "nodename": "N_imgZ_color3",
          "type": "color3"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outz",
          "type": "float"
        },
        "type": "color3"
      },
      "nodedef": "ND_triplanarprojection_color3",
      "normalize:N_norm_vector3": {
        "input:in": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "N_add2_color3",
        "type": "color3"
      },
      "power:N_blendPower": {
        "input:in1": {
          "nodename": "N_normalizeWeights",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_oneOverBlend",
          "type": "float"
        },
        "type": "vector3"
      },
      "separate3:N_separateWeights": {
        "input:in": {
          "nodename": "N_normalizeBlendedWeights",
          "type": "vector3"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_triplanarprojection_color4": {
      "absval:N_absN": {
        "input:in": {
          "nodename": "N_norm_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "add:N_add1_color4": {
        "input:in1": {
          "nodename": "N_nX_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_nY_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "add:N_add2_color4": {
        "input:in1": {
          "nodename": "N_add1_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_nZ_color4",
          "type": "color4"
        },
        "type": "color4"
      },
      "clamp:N_clampForPrecision": {
        "input:in": {
          "interfacename": "blend",
          "type": "float"
        },
        "input:low": {
          "type": "float",
          "value": "0.03"
        },
        "type": "float"
      },
      "combine2:N_vecXY_color4": {
        "input:in1": {
          "nodename": "N_extX_color4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extY_color4",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecXZ_color4": {
        "input:in1": {
          "nodename": "N_extX_color4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_color4",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecYZ_color4": {
        "input:in1": {
          "nodename": "N_extY_color4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_color4",
          "type": "float"
        },
        "type": "vector2"
      },
      "divide:N_normalizeBlendedWeights": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotBlendedN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_normalizeWeights": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_oneOverBlend": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "N_clampForPrecision",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:N_dotBlendedN": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "dotproduct:N_dotN": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "extract:N_extX_color4": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_extY_color4": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "extract:N_extZ_color4": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "2"
        },
        "type": "float"
      },
      "image:N_imgX_color4": {
        "input:default": {
          "interfacename": "default",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "filex",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerx",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecYZ_color4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color4"
      },
      "image:N_imgY_color4": {
        "input:default": {
          "interfacename": "default",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "filey",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layery",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXZ_color4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color4"
      },
      "image:N_imgZ_color4": {
        "input:default": {
          "interfacename": "default",
          "type": "color4"
        },
        "input:file": {
          "interfacename": "filez",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerz",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXY_color4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "color4"
      },
      "multiply:N_nX_color4": {
        "input:in1": {
          "nodename": "N_imgX_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outx",
          "type": "float"
        },
        "type": "color4"
      },
      "multiply:N_nY_color4": {
        "input:in1": {
          "nodename": "N_imgY_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outy",
          "type": "float"
        },
        "type": "color4"
      },
      "multiply:N_nZ_color4": {
        "input:in1": {
          "nodename": "N_imgZ_color4",
          "type": "color4"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outz",
          "type": "float"
        },
        "type": "color4"
      },
      "nodedef": "ND_triplanarprojection_color4",
      "normalize:N_norm_vector3": {
        "input:in": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "N_add2_color4",
        "type": "color4"
      },
      "power:N_blendPower": {
        "input:in1": {
          "nodename": "N_normalizeWeights",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_oneOverBlend",
          "type": "float"
        },
        "type": "vector3"
      },
      "separate3:N_separateWeights": {
        "input:in": {
          "nodename": "N_normalizeBlendedWeights",
          "type": "vector3"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_triplanarprojection_float": {
      "absval:N_absN": {
        "input:in": {
          "nodename": "N_norm_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "add:N_add1_float": {
        "input:in1": {
          "nodename": "N_nX_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_nY_float",
          "type": "float"
        },
        "type": "float"
      },
      "add:N_add2_float": {
        "input:in1": {
          "nodename": "N_add1_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_nZ_float",
          "type": "float"
        },
        "type": "float"
      },
      "clamp:N_clampForPrecision": {
        "input:in": {
          "interfacename": "blend",
          "type": "float"
        },
        "input:low": {
          "type": "float",
          "value": "0.03"
        },
        "type": "float"
      },
      "combine2:N_vecXY_float": {
        "input:in1": {
          "nodename": "N_extX_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extY_float",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecXZ_float": {
        "input:in1": {
          "nodename": "N_extX_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_float",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecYZ_float": {
        "input:in1": {
          "nodename": "N_extY_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_float",
          "type": "float"
        },
        "type": "vector2"
      },
      "divide:N_normalizeBlendedWeights": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotBlendedN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_normalizeWeights": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_oneOverBlend": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "N_clampForPrecision",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:N_dotBlendedN": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "dotproduct:N_dotN": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "extract:N_extX_float": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_extY_float": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "extract:N_extZ_float": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "2"
        },
        "type": "float"
      },
      "image:N_imgX_float": {
        "input:default": {
          "interfacename": "default",
          "type": "float"
        },
        "input:file": {
          "interfacename": "filex",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerx",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecYZ_float",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "float"
      },
      "image:N_imgY_float": {
        "input:default": {
          "interfacename": "default",
          "type": "float"
        },
        "input:file": {
          "interfacename": "filey",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layery",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXZ_float",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "float"
      },
      "image:N_imgZ_float": {
        "input:default": {
          "interfacename": "default",
          "type": "float"
        },
        "input:file": {
          "interfacename": "filez",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerz",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXY_float",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "float"
      },
      "multiply:N_nX_float": {
        "input:in1": {
          "nodename": "N_imgX_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outx",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:N_nY_float": {
        "input:in1": {
          "nodename": "N_imgY_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outy",
          "type": "float"
        },
        "type": "float"
      },
      "multiply:N_nZ_float": {
        "input:in1": {
          "nodename": "N_imgZ_float",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outz",
          "type": "float"
        },
        "type": "float"
      },
      "nodedef": "ND_triplanarprojection_float",
      "normalize:N_norm_vector3": {
        "input:in": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "N_add2_float",
        "type": "float"
      },
      "power:N_blendPower": {
        "input:in1": {
          "nodename": "N_normalizeWeights",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_oneOverBlend",
          "type": "float"
        },
        "type": "vector3"
      },
      "separate3:N_separateWeights": {
        "input:in": {
          "nodename": "N_normalizeBlendedWeights",
          "type": "vector3"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_triplanarprojection_vector2": {
      "absval:N_absN": {
        "input:in": {
          "nodename": "N_norm_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "add:N_add1_vector2": {
        "input:in1": {
          "nodename": "N_nX_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_nY_vector2",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "add:N_add2_vector2": {
        "input:in1": {
          "nodename": "N_add1_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_nZ_vector2",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "clamp:N_clampForPrecision": {
        "input:in": {
          "interfacename": "blend",
          "type": "float"
        },
        "input:low": {
          "type": "float",
          "value": "0.03"
        },
        "type": "float"
      },
      "combine2:N_vecXY_vector2": {
        "input:in1": {
          "nodename": "N_extX_vector2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extY_vector2",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecXZ_vector2": {
        "input:in1": {
          "nodename": "N_extX_vector2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_vector2",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecYZ_vector2": {
        "input:in1": {
          "nodename": "N_extY_vector2",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_vector2",
          "type": "float"
        },
        "type": "vector2"
      },
      "divide:N_normalizeBlendedWeights": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotBlendedN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_normalizeWeights": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_oneOverBlend": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "N_clampForPrecision",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:N_dotBlendedN": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "dotproduct:N_dotN": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "extract:N_extX_vector2": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_extY_vector2": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "extract:N_extZ_vector2": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "2"
        },
        "type": "float"
      },
      "image:N_imgX_vector2": {
        "input:default": {
          "interfacename": "default",
          "type": "vector2"
        },
        "input:file": {
          "interfacename": "filex",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerx",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecYZ_vector2",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector2"
      },
      "image:N_imgY_vector2": {
        "input:default": {
          "interfacename": "default",
          "type": "vector2"
        },
        "input:file": {
          "interfacename": "filey",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layery",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXZ_vector2",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector2"
      },
      "image:N_imgZ_vector2": {
        "input:default": {
          "interfacename": "default",
          "type": "vector2"
        },
        "input:file": {
          "interfacename": "filez",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerz",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXY_vector2",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector2"
      },
      "multiply:N_nX_vector2": {
        "input:in1": {
          "nodename": "N_imgX_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outx",
          "type": "float"
        },
        "type": "vector2"
      },
      "multiply:N_nY_vector2": {
        "input:in1": {
          "nodename": "N_imgY_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outy",
          "type": "float"
        },
        "type": "vector2"
      },
      "multiply:N_nZ_vector2": {
        "input:in1": {
          "nodename": "N_imgZ_vector2",
          "type": "vector2"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outz",
          "type": "float"
        },
        "type": "vector2"
      },
      "nodedef": "ND_triplanarprojection_vector2",
      "normalize:N_norm_vector3": {
        "input:in": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "N_add2_vector2",
        "type": "vector2"
      },
      "power:N_blendPower": {
        "input:in1": {
          "nodename": "N_normalizeWeights",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_oneOverBlend",
          "type": "float"
        },
        "type": "vector3"
      },
      "separate3:N_separateWeights": {
        "input:in": {
          "nodename": "N_normalizeBlendedWeights",
          "type": "vector3"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_triplanarprojection_vector3": {
      "absval:N_absN": {
        "input:in": {
          "nodename": "N_norm_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "add:N_add1_vector3": {
        "input:in1": {
          "nodename": "N_nX_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_nY_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "add:N_add2_vector3": {
        "input:in1": {
          "nodename": "N_add1_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_nZ_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "clamp:N_clampForPrecision": {
        "input:in": {
          "interfacename": "blend",
          "type": "float"
        },
        "input:low": {
          "type": "float",
          "value": "0.03"
        },
        "type": "float"
      },
      "combine2:N_vecXY_vector3": {
        "input:in1": {
          "nodename": "N_extX_vector3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extY_vector3",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecXZ_vector3": {
        "input:in1": {
          "nodename": "N_extX_vector3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_vector3",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecYZ_vector3": {
        "input:in1": {
          "nodename": "N_extY_vector3",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_vector3",
          "type": "float"
        },
        "type": "vector2"
      },
      "divide:N_normalizeBlendedWeights": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotBlendedN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_normalizeWeights": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_oneOverBlend": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "N_clampForPrecision",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:N_dotBlendedN": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "dotproduct:N_dotN": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "extract:N_extX_vector3": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_extY_vector3": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "extract:N_extZ_vector3": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "2"
        },
        "type": "float"
      },
      "image:N_imgX_vector3": {
        "input:default": {
          "interfacename": "default",
          "type": "vector3"
        },
        "input:file": {
          "interfacename": "filex",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerx",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecYZ_vector3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector3"
      },
      "image:N_imgY_vector3": {
        "input:default": {
          "interfacename": "default",
          "type": "vector3"
        },
        "input:file": {
          "interfacename": "filey",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layery",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXZ_vector3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector3"
      },
      "image:N_imgZ_vector3": {
        "input:default": {
          "interfacename": "default",
          "type": "vector3"
        },
        "input:file": {
          "interfacename": "filez",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerz",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXY_vector3",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector3"
      },
      "multiply:N_nX_vector3": {
        "input:in1": {
          "nodename": "N_imgX_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outx",
          "type": "float"
        },
        "type": "vector3"
      },
      "multiply:N_nY_vector3": {
        "input:in1": {
          "nodename": "N_imgY_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outy",
          "type": "float"
        },
        "type": "vector3"
      },
      "multiply:N_nZ_vector3": {
        "input:in1": {
          "nodename": "N_imgZ_vector3",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outz",
          "type": "float"
        },
        "type": "vector3"
      },
      "nodedef": "ND_triplanarprojection_vector3",
      "normalize:N_norm_vector3": {
        "input:in": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "N_add2_vector3",
        "type": "vector3"
      },
      "power:N_blendPower": {
        "input:in1": {
          "nodename": "N_normalizeWeights",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_oneOverBlend",
          "type": "float"
        },
        "type": "vector3"
      },
      "separate3:N_separateWeights": {
        "input:in": {
          "nodename": "N_normalizeBlendedWeights",
          "type": "vector3"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_triplanarprojection_vector4": {
      "absval:N_absN": {
        "input:in": {
          "nodename": "N_norm_vector3",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "add:N_add1_vector4": {
        "input:in1": {
          "nodename": "N_nX_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_nY_vector4",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "add:N_add2_vector4": {
        "input:in1": {
          "nodename": "N_add1_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_nZ_vector4",
          "type": "vector4"
        },
        "type": "vector4"
      },
      "clamp:N_clampForPrecision": {
        "input:in": {
          "interfacename": "blend",
          "type": "float"
        },
        "input:low": {
          "type": "float",
          "value": "0.03"
        },
        "type": "float"
      },
      "combine2:N_vecXY_vector4": {
        "input:in1": {
          "nodename": "N_extX_vector4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extY_vector4",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecXZ_vector4": {
        "input:in1": {
          "nodename": "N_extX_vector4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_vector4",
          "type": "float"
        },
        "type": "vector2"
      },
      "combine2:N_vecYZ_vector4": {
        "input:in1": {
          "nodename": "N_extY_vector4",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_extZ_vector4",
          "type": "float"
        },
        "type": "vector2"
      },
      "divide:N_normalizeBlendedWeights": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotBlendedN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_normalizeWeights": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_dotN",
          "type": "float"
        },
        "type": "vector3"
      },
      "divide:N_oneOverBlend": {
        "input:in1": {
          "type": "float",
          "value": "1.0"
        },
        "input:in2": {
          "nodename": "N_clampForPrecision",
          "type": "float"
        },
        "type": "float"
      },
      "dotproduct:N_dotBlendedN": {
        "input:in1": {
          "nodename": "N_blendPower",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "dotproduct:N_dotN": {
        "input:in1": {
          "nodename": "N_absN",
          "type": "vector3"
        },
        "input:in2": {
          "type": "vector3",
          "value": "1.0, 1.0, 1.0"
        },
        "type": "float"
      },
      "extract:N_extX_vector4": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "0"
        },
        "type": "float"
      },
      "extract:N_extY_vector4": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "1"
        },
        "type": "float"
      },
      "extract:N_extZ_vector4": {
        "input:in": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:index": {
          "type": "integer",
          "value": "2"
        },
        "type": "float"
      },
      "image:N_imgX_vector4": {
        "input:default": {
          "interfacename": "default",
          "type": "vector4"
        },
        "input:file": {
          "interfacename": "filex",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerx",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecYZ_vector4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector4"
      },
      "image:N_imgY_vector4": {
        "input:default": {
          "interfacename": "default",
          "type": "vector4"
        },
        "input:file": {
          "interfacename": "filey",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layery",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXZ_vector4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector4"
      },
      "image:N_imgZ_vector4": {
        "input:default": {
          "interfacename": "default",
          "type": "vector4"
        },
        "input:file": {
          "interfacename": "filez",
          "type": "filename"
        },
        "input:filtertype": {
          "interfacename": "filtertype",
          "type": "string"
        },
        "input:frameendaction": {
          "interfacename": "frameendaction",
          "type": "string"
        },
        "input:frameoffset": {
          "interfacename": "frameoffset",
          "type": "integer"
        },
        "input:framerange": {
          "interfacename": "framerange",
          "type": "string"
        },
        "input:layer": {
          "interfacename": "layerz",
          "type": "string"
        },
        "input:texcoord": {
          "nodename": "N_vecXY_vector4",
          "type": "vector2"
        },
        "input:uaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "input:vaddressmode": {
          "type": "string",
          "value": "periodic"
        },
        "type": "vector4"
      },
      "multiply:N_nX_vector4": {
        "input:in1": {
          "nodename": "N_imgX_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outx",
          "type": "float"
        },
        "type": "vector4"
      },
      "multiply:N_nY_vector4": {
        "input:in1": {
          "nodename": "N_imgY_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outy",
          "type": "float"
        },
        "type": "vector4"
      },
      "multiply:N_nZ_vector4": {
        "input:in1": {
          "nodename": "N_imgZ_vector4",
          "type": "vector4"
        },
        "input:in2": {
          "nodename": "N_separateWeights",
          "output": "outz",
          "type": "float"
        },
        "type": "vector4"
      },
      "nodedef": "ND_triplanarprojection_vector4",
      "normalize:N_norm_vector3": {
        "input:in": {
          "interfacename": "normal",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "output:out": {
        "nodename": "N_add2_vector4",
        "type": "vector4"
      },
      "power:N_blendPower": {
        "input:in1": {
          "nodename": "N_normalizeWeights",
          "type": "vector3"
        },
        "input:in2": {
          "nodename": "N_oneOverBlend",
          "type": "float"
        },
        "type": "vector3"
      },
      "separate3:N_separateWeights": {
        "input:in": {
          "nodename": "N_normalizeBlendedWeights",
          "type": "vector3"
        },
        "type": "multioutput"
      }
    },
    "nodegraph:NG_unifiednoise2d_float": {
      "add:N_apply_offset": {
        "input:in1": {
          "nodename": "N_apply_freq",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "offset",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "cellnoise2d:N_cellnoise2d": {
        "input:texcoord": {
          "nodename": "N_apply_cell_jitter",
          "type": "vector2"
        },
        "type": "float"
      },
      "combine3:N_combine_with_jitter": {
        "input:in1": {
          "nodename": "N_separate",
          "output": "outx",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_separate",
          "output": "outy",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_cell_jitter_mult",
          "type": "float"
        },
        "type": "vector3"
      },
      "fractal3d:N_fractal3d": {
        "input:amplitude": {
          "type": "float",
          "value": "1"
        },
        "input:diminish": {
          "interfacename": "diminish",
          "type": "float"
        },
        "input:lacunarity": {
          "interfacename": "lacunarity",
          "type": "float"
        },
        "input:octaves": {
          "interfacename": "octaves",
          "type": "integer"
        },
        "input:position": {
          "nodename": "N_combine_with_jitter",
          "type": "vector3"
        },
        "type": "float"
      },
      "multiply:N_apply_freq": {
        "input:in1": {
          "interfacename": "texcoord",
          "type": "vector2"
        },
        "input:in2": {
          "interfacename": "freq",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "multiply:N_cell_jitter_mult": {
        "input:in1": {
          "nodename": "N_jitter_minus_1",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "90000"
        },
        "type": "float"
      },
      "nodedef": "ND_unifiednoise2d_float",
      "noise2d:N_perlin_noise2d": {
        "input:amplitude": {
          "type": "float",
          "value": "0.5"
        },
        "input:pivot": {
          "type": "float",
          "value": "0.5"
        },
        "input:texcoord": {
          "nodename": "N_apply_cell_jitter",
          "type": "vector2"
        },
        "type": "float"
      },
      "output:out": {
        "nodename": "N_range",
        "type": "float"
      },
      "range:N_range": {
        "input:doclamp": {
          "interfacename": "clampoutput",
          "type": "boolean"
        },
        "input:in": {
          "nodename": "N_switch_type",
          "type": "float"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1"
        },
        "input:inlow": {
          "type": "float",
          "value": "0"
        },
        "input:outhigh": {
          "interfacename": "outmax",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outmin",
          "type": "float"
        },
        "type": "float"
      },
      "rotate2d:N_apply_cell_jitter": {
        "input:amount": {
          "nodename": "N_cell_jitter_mult",
          "type": "float"
        },
        "input:in": {
          "nodename": "N_apply_offset",
          "type": "vector2"
        },
        "type": "vector2"
      },
      "separate2:N_separate": {
        "input:in": {
          "nodename": "N_apply_offset",
          "type": "vector2"
        },
        "type": "multioutput"
      },
      "subtract:N_jitter_minus_1": {
        "input:in1": {
          "interfacename": "jitter",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "switch:N_switch_type": {
        "input:in1": {
          "nodename": "N_perlin_noise2d",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_cellnoise2d",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_worleynoise2d",
          "type": "float"
        },
        "input:in4": {
          "nodename": "N_fractal3d",
          "type": "float"
        },
        "input:which": {
          "interfacename": "type",
          "type": "integer"
        },
        "type": "float"
      },
      "worleynoise2d:N_worleynoise2d": {
        "input:jitter": {
          "interfacename": "jitter",
          "type": "float"
        },
        "input:texcoord": {
          "nodename": "N_apply_offset",
          "type": "vector2"
        },
        "type": "float"
      }
    },
    "nodegraph:NG_unifiednoise3d_float": {
      "add:N_apply_offset": {
        "input:in1": {
          "nodename": "N_apply_freq",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "offset",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "cellnoise3d:N_cellnoise3d": {
        "input:position": {
          "nodename": "N_apply_cell_jitter",
          "type": "vector3"
        },
        "type": "float"
      },
      "fractal3d:N_fractal3d": {
        "input:amplitude": {
          "type": "float",
          "value": "1"
        },
        "input:diminish": {
          "interfacename": "diminish",
          "type": "float"
        },
        "input:lacunarity": {
          "interfacename": "lacunarity",
          "type": "float"
        },
        "input:octaves": {
          "interfacename": "octaves",
          "type": "integer"
        },
        "input:position": {
          "nodename": "N_apply_cell_jitter",
          "type": "vector3"
        },
        "type": "float"
      },
      "multiply:N_apply_freq": {
        "input:in1": {
          "interfacename": "position",
          "type": "vector3"
        },
        "input:in2": {
          "interfacename": "freq",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "multiply:N_cell_jitter_mult": {
        "input:in1": {
          "nodename": "N_jitter_minus_one",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "90000"
        },
        "type": "float"
      },
      "nodedef": "ND_unifiednoise3d_float",
      "noise3d:N_perlin_noise3d": {
        "input:amplitude": {
          "type": "float",
          "value": "0.5"
        },
        "input:pivot": {
          "type": "float",
          "value": "0.5"
        },
        "input:position": {
          "nodename": "N_apply_cell_jitter",
          "type": "vector3"
        },
        "type": "float"
      },
      "output:out": {
        "nodename": "N_range",
        "type": "float"
      },
      "range:N_range": {
        "input:doclamp": {
          "interfacename": "clampoutput",
          "type": "boolean"
        },
        "input:in": {
          "nodename": "N_switch_type",
          "type": "float"
        },
        "input:inhigh": {
          "type": "float",
          "value": "1"
        },
        "input:inlow": {
          "type": "float",
          "value": "0"
        },
        "input:outhigh": {
          "interfacename": "outmax",
          "type": "float"
        },
        "input:outlow": {
          "interfacename": "outmin",
          "type": "float"
        },
        "type": "float"
      },
      "rotate3d:N_apply_cell_jitter": {
        "input:amount": {
          "nodename": "N_cell_jitter_mult",
          "type": "float"
        },
        "input:axis": {
          "type": "vector3",
          "value": "0.1, 1, 0"
        },
        "input:in": {
          "nodename": "N_apply_offset",
          "type": "vector3"
        },
        "type": "vector3"
      },
      "subtract:N_jitter_minus_one": {
        "input:in1": {
          "interfacename": "jitter",
          "type": "float"
        },
        "input:in2": {
          "type": "float",
          "value": "1"
        },
        "type": "float"
      },
      "switch:N_switch_type": {
        "input:in1": {
          "nodename": "N_perlin_noise3d",
          "type": "float"
        },
        "input:in2": {
          "nodename": "N_cellnoise3d",
          "type": "float"
        },
        "input:in3": {
          "nodename": "N_worleynoise3d",
          "type": "float"
        },
        "input:in4": {
          "nodename": "N_fractal3d",
          "type": "float"
        },
        "input:which": {
          "interfacename": "type",
          "type": "integer"
        },
        "type": "float"
      },
      "worleynoise3d:N_worleynoise3d": {
        "input:jitter": {
          "interfacename": "jitter",
          "type": "float"
        },
        "input:position": {
          "nodename": "N_apply_offset",
          "type": "vector3"
        },
        "type": "float"
      }
    },
    "targetdef:essl": {
      "inherit": "genglsl"
    },
    "targetdef:genglsl": null,
    "targetdef:genmdl": null,
    "targetdef:genmsl": {
      "inherit": "genglsl"
    },
    "targetdef:genosl": null,
    "typedef:BSDF": {
      "doc": "Bidirectional scattering distribution function"
    },
    "typedef:EDF": {
      "doc": "Emission distribution function"
    },
    "typedef:VDF": {
      "doc": "Volume distribution function"
    },
    "typedef:boolean": null,
    "typedef:color3": {
      "semantic": "color"
    },
    "typedef:color3array": {
      "semantic": "color"
    },
    "typedef:color4": {
      "semantic": "color"
    },
    "typedef:color4array": {
      "semantic": "color"
    },
    "typedef:displacementshader": {
      "context": "displacement",
      "semantic": "shader"
    },
    "typedef:filename": null,
    "typedef:float": null,
    "typedef:floatarray": null,
    "typedef:geomname": null,
    "typedef:geomnamearray": null,
    "typedef:integer": null,
    "typedef:integerarray": null,
    "typedef:lightshader": {
      "context": "light",
      "semantic": "shader"
    },
    "typedef:material": {
      "semantic": "material"
    },
    "typedef:matrix33": null,
    "typedef:matrix44": null,
    "typedef:none": null,
    "typedef:string": null,
    "typedef:stringarray": null,
    "typedef:surfaceshader": {
      "context": "surface",
      "semantic": "shader"
    },
    "typedef:vector2": null,
    "typedef:vector2array": null,
    "typedef:vector3": null,
    "typedef:vector3array": null,
    "typedef:vector4": null,
    "typedef:vector4array": null,
    "typedef:volumeshader": {
      "context": "volume",
      "semantic": "shader"
    },
    "unitdef:UD_stdlib_angle": {
      "unit:degree": {
        "scale": "1.0"
      },
      "unit:radian": {
        "scale": "57.295779513"
      },
      "unittype": "angle"
    },
    "unitdef:UD_stdlib_distance": {
      "unit:centimeter": {
        "scale": "0.01"
      },
      "unit:foot": {
        "scale": "0.3048"
      },
      "unit:inch": {
        "scale": "0.0254"
      },
      "unit:kilometer": {
        "scale": "1000.0"
      },
      "unit:meter": {
        "scale": "1.0"
      },
      "unit:micron": {
        "scale": "0.000001"
      },
      "unit:mile": {
        "scale": "1609.344"
      },
      "unit:millimeter": {
        "scale": "0.001"
      },
      "unit:nanometer": {
        "scale": "0.000000001"
      },
      "unit:yard": {
        "scale": "0.9144"
      },
      "unittype": "distance"
    },
    "unittypedef:angle": null,
    "unittypedef:distance": null,
    "version": "1.38"
  },
  "mimetype": "application/mtlx+json"
}
