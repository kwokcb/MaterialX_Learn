#usda 1.0

def Material "MAT_M_BoomBox"
{
    token outputs:mtlx:surface.connect = </MAT_M_BoomBox/SHD_M_BoomBox.outputs:out>

    def Shader "SHD_M_BoomBox"
    {
        uniform token info:id = "ND_gltf_pbr_surfaceshader"
        float inputs:alpha = 1
        float inputs:alpha_cutoff = 0.5
        int inputs:alpha_mode = 0
        color3f inputs:attenuation_color = (1, 1, 1)
        float inputs:attenuation_distance
        color3f inputs:base_color = (1, 1, 1)
        color3f inputs:base_color.connect = </MAT_M_BoomBox/image_basecolor.outputs:out>
        float inputs:clearcoat = 0
        vector3f inputs:clearcoat_normal
        float inputs:clearcoat_roughness = 0
        color3f inputs:emissive = (0, 0, 0)
        color3f inputs:emissive.connect = </MAT_M_BoomBox/image_emission.outputs:out>
        float inputs:emissive_strength = 1
        float inputs:ior = 1.5
        float inputs:iridescence = 0
        float inputs:iridescence_ior = 1.3
        float inputs:iridescence_thickness = 100
        float inputs:metallic = 1
        float inputs:metallic.connect = </MAT_M_BoomBox/image_orm.outputs:out>
        vector3f inputs:normal.connect = </MAT_M_BoomBox/image_normal.outputs:out>
        float inputs:occlusion = 1
        float inputs:occlusion.connect = </MAT_M_BoomBox/image_orm.outputs:out>
        float inputs:roughness = 1
        float inputs:roughness.connect = </MAT_M_BoomBox/image_orm.outputs:out>
        color3f inputs:sheen_color = (0, 0, 0)
        float inputs:sheen_roughness = 0
        float inputs:specular = 1
        color3f inputs:specular_color = (1, 1, 1)
        vector3f inputs:tangent
        float inputs:thickness = 0
        float inputs:transmission = 0
        token outputs:out
    }

    def Shader "image_basecolor"
    {
        uniform token info:id = "ND_gltf_image_color3_color3_1_0"
        color3f inputs:default = (0, 0, 0)
        color3f inputs:factor = (1, 1, 1)
        asset inputs:file = @BoomBoxWithAxes_baseColor.png@
        string inputs:filtertype = "cubic"
        float2 inputs:offset = (0, 0)
        int inputs:operationorder = 0
        float2 inputs:pivot = (0, 1)
        float inputs:rotate = 0
        float2 inputs:scale = (1, 1)
        float2 inputs:texcoord.connect = </MAT_M_BoomBox/texcoord_vector2.outputs:out>
        string inputs:uaddressmode = "clamp"
        string inputs:vaddressmode = "clamp"
        color3f outputs:out
    }

    def Shader "image_orm"
    {
        uniform token info:id = "ND_gltf_image_vector3_vector3_1_0"
        vector3f inputs:default = (0, 0, 0)
        asset inputs:file = @BoomBoxWithAxes_roughnessMetallic.png@
        string inputs:filtertype = "linear"
        float2 inputs:offset = (0, 0)
        int inputs:operationorder = 0
        float2 inputs:pivot = (0, 1)
        float inputs:rotate = 0
        float2 inputs:scale = (1, 1)
        float2 inputs:texcoord
        string inputs:uaddressmode = "periodic"
        string inputs:vaddressmode = "periodic"
        vector3f outputs:out
    }

    def Shader "image_normal"
    {
        uniform token info:id = "ND_gltf_normalmap_vector3_1_0"
        vector3f inputs:default = (0.5, 0.5, 1)
        asset inputs:file = @BoomBoxWithAxes_normal.png@
        string inputs:filtertype = "cubic"
        float2 inputs:offset = (0, 0)
        int inputs:operationorder = 0
        float2 inputs:pivot = (0, 1)
        float inputs:rotate = 0
        float2 inputs:scale = (1, 1)
        float2 inputs:texcoord
        string inputs:uaddressmode = "clamp"
        string inputs:vaddressmode = "clamp"
        vector3f outputs:out
    }

    def Shader "image_emission"
    {
        uniform token info:id = "ND_gltf_image_color3_color3_1_0"
        color3f inputs:default = (0, 0, 0)
        color3f inputs:factor = (1, 1, 1)
        asset inputs:file = @BoomBoxWithAxes_emissive.png@
        string inputs:filtertype = "linear"
        float2 inputs:offset = (0, 0)
        int inputs:operationorder = 0
        float2 inputs:pivot = (0, 1)
        float inputs:rotate = 0
        float2 inputs:scale = (1, 1)
        float2 inputs:texcoord
        string inputs:uaddressmode = "periodic"
        string inputs:vaddressmode = "periodic"
        color3f outputs:out
    }

    def Shader "SHD_M_Coordinates"
    {
        uniform token info:id = "ND_gltf_pbr_surfaceshader"
        float inputs:alpha = 1
        float inputs:alpha_cutoff = 0.5
        int inputs:alpha_mode = 0
        color3f inputs:attenuation_color = (1, 1, 1)
        float inputs:attenuation_distance
        color3f inputs:base_color = (1, 1, 1)
        color3f inputs:base_color.connect = </MAT_M_BoomBox/image_basecolor2.outputs:out>
        float inputs:clearcoat = 0
        vector3f inputs:clearcoat_normal
        float inputs:clearcoat_roughness = 0
        color3f inputs:emissive = (0, 0, 0)
        float inputs:emissive_strength = 1
        float inputs:ior = 1.5
        float inputs:iridescence = 0
        float inputs:iridescence_ior = 1.3
        float inputs:iridescence_thickness = 100
        float inputs:metallic = 0
        vector3f inputs:normal
        float inputs:occlusion = 1
        float inputs:roughness = 0.735
        color3f inputs:sheen_color = (0, 0, 0)
        float inputs:sheen_roughness = 0
        float inputs:specular = 1
        color3f inputs:specular_color = (1, 1, 1)
        vector3f inputs:tangent
        float inputs:thickness = 0
        float inputs:transmission = 0
        token outputs:out
    }

    def Shader "image_basecolor2"
    {
        uniform token info:id = "ND_gltf_image_color3_color3_1_0"
        color3f inputs:default = (0, 0, 0)
        color3f inputs:factor = (1, 1, 1)
        asset inputs:file = @BoomBoxWithAxes_baseColor1.png@
        string inputs:filtertype = "linear"
        float2 inputs:offset = (0, 0)
        int inputs:operationorder = 0
        float2 inputs:pivot = (0, 1)
        float inputs:rotate = 0
        float2 inputs:scale = (1, 1)
        float2 inputs:texcoord
        string inputs:uaddressmode = "periodic"
        string inputs:vaddressmode = "periodic"
        color3f outputs:out
    }

    def Shader "texcoord_vector2"
    {
        uniform token info:id = "ND_texcoord_vector2"
        int inputs:index = 0
        float2 outputs:out
    }

    def Shader "position_vector3"
    {
        uniform token info:id = "ND_position_vector3"
        string inputs:space = "object"
        vector3f outputs:out
    }

    def Shader "tangent_vector3"
    {
        uniform token info:id = "ND_tangent_vector3"
        int inputs:index = 1
        string inputs:space = "object"
        vector3f outputs:out
    }

    def Shader "bitangent_vector3"
    {
        uniform token info:id = "ND_bitangent_vector3"
        int inputs:index = 1
        string inputs:space = "object"
        vector3f outputs:out
    }

    def Shader "geomprop_textcoord"
    {
        uniform token info:id = "ND_geompropvalue_vector2"
        float2 inputs:default = (0, 0)
        string inputs:geomprop = "st1"
        float2 outputs:out
    }
}

def Material "MAT_M_Coordinates"
{
    token outputs:mtlx:surface.connect = </MAT_M_Coordinates.outputs:out>
    token outputs:out
}

