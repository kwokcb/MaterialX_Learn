#usda 1.0

def NodeGraph "NG_marble1"
{
    color3f inputs:base_color_1 = (0.8, 0.8, 0.8)
    color3f inputs:base_color_2 = (0.1, 0.1, 0.3)
    int inputs:noise_octaves = 3
    float inputs:noise_power = 3
    float inputs:noise_scale_1 = 6
    float inputs:noise_scale_2 = 4
    color3f outputs:out.connect = </NG_marble1/color_mix.outputs:out>

    def Shader "obj_pos"
    {
        uniform token info:id = "ND_position_vector3"
        string inputs:space = "object"
        vector3f outputs:out
    }

    def Shader "add_xyz"
    {
        uniform token info:id = "ND_dotproduct_vector3"
        vector3f inputs:in1 = (0, 0, 0)
        vector3f inputs:in1.connect = </NG_marble1/obj_pos.outputs:out>
        vector3f inputs:in2 = (1, 1, 1)
        float outputs:out
    }

    def Shader "scale_xyz"
    {
        uniform token info:id = "ND_multiply_float"
        float inputs:in1 = 0
        float inputs:in1.connect = </NG_marble1/add_xyz.outputs:out>
        float inputs:in2 = 1
        float inputs:in2.connect = </NG_marble1.inputs:noise_scale_1>
        float outputs:out
    }

    def Shader "scale_pos"
    {
        uniform token info:id = "ND_multiply_vector3FA"
        vector3f inputs:in1 = (0, 0, 0)
        vector3f inputs:in1.connect = </NG_marble1/obj_pos.outputs:out>
        float inputs:in2 = 1
        float inputs:in2.connect = </NG_marble1.inputs:noise_scale_2>
        vector3f outputs:out
    }

    def Shader "noise"
    {
        uniform token info:id = "ND_fractal3d_float"
        float inputs:amplitude = 1
        float inputs:diminish = 0.5
        float inputs:lacunarity = 2
        int inputs:octaves = 3
        int inputs:octaves.connect = </NG_marble1.inputs:noise_octaves>
        vector3f inputs:position.connect = </NG_marble1/scale_pos.outputs:out>
        float outputs:out
    }

    def Shader "scale_noise"
    {
        uniform token info:id = "ND_multiply_float"
        float inputs:in1 = 0
        float inputs:in1.connect = </NG_marble1/noise.outputs:out>
        float inputs:in2 = 3
        float outputs:out
    }

    def Shader "sum"
    {
        uniform token info:id = "ND_add_float"
        float inputs:in1 = 0
        float inputs:in1.connect = </NG_marble1/scale_xyz.outputs:out>
        float inputs:in2 = 0
        float inputs:in2.connect = </NG_marble1/scale_noise.outputs:out>
        float outputs:out
    }

    def Shader "sin"
    {
        uniform token info:id = "ND_sin_float"
        float inputs:in = 0
        float inputs:in.connect = </NG_marble1/sum.outputs:out>
        float outputs:out
    }

    def Shader "scale"
    {
        uniform token info:id = "ND_multiply_float"
        float inputs:in1 = 0
        float inputs:in1.connect = </NG_marble1/sin.outputs:out>
        float inputs:in2 = 0.5
        float outputs:out
    }

    def Shader "bias"
    {
        uniform token info:id = "ND_add_float"
        float inputs:in1 = 0
        float inputs:in1.connect = </NG_marble1/scale.outputs:out>
        float inputs:in2 = 0.5
        float outputs:out
    }

    def Shader "power"
    {
        uniform token info:id = "ND_power_float"
        float inputs:in1 = 0
        float inputs:in1.connect = </NG_marble1/bias.outputs:out>
        float inputs:in2 = 1
        float inputs:in2.connect = </NG_marble1.inputs:noise_power>
        float outputs:out
    }

    def Shader "color_mix"
    {
        uniform token info:id = "ND_mix_color3"
        color3f inputs:bg = (0, 0, 0)
        color3f inputs:bg.connect = </NG_marble1.inputs:base_color_1>
        color3f inputs:fg = (0, 0, 0)
        color3f inputs:fg.connect = </NG_marble1.inputs:base_color_2>
        float inputs:mix = 0
        float inputs:mix.connect = </NG_marble1/power.outputs:out>
        color3f outputs:out
    }
}

def Shader "SR_marble1"
{
    uniform token info:id = "ND_standard_surface_surfaceshader"
    float inputs:base = 1
    color3f inputs:base_color = (0.8, 0.8, 0.8)
    color3f inputs:base_color.connect = </NG_marble1.outputs:out>
    float inputs:coat = 0
    float inputs:coat_affect_color = 0
    float inputs:coat_affect_roughness = 0
    float inputs:coat_anisotropy = 0
    color3f inputs:coat_color = (1, 1, 1)
    float inputs:coat_IOR = 1.5
    vector3f inputs:coat_normal
    float inputs:coat_rotation = 0
    float inputs:coat_roughness = 0.1
    float inputs:diffuse_roughness = 0
    float inputs:emission = 0
    color3f inputs:emission_color = (1, 1, 1)
    float inputs:metalness = 0
    vector3f inputs:normal
    color3f inputs:opacity = (1, 1, 1)
    float inputs:sheen = 0
    color3f inputs:sheen_color = (1, 1, 1)
    float inputs:sheen_roughness = 0.3
    float inputs:specular = 1
    float inputs:specular_anisotropy = 0
    color3f inputs:specular_color = (1, 1, 1)
    float inputs:specular_IOR = 1.5
    float inputs:specular_rotation = 0
    float inputs:specular_roughness = 0.1
    float inputs:subsurface = 0.4
    float inputs:subsurface_anisotropy = 0
    color3f inputs:subsurface_color = (1, 1, 1)
    color3f inputs:subsurface_color.connect = </NG_marble1.outputs:out>
    color3f inputs:subsurface_radius = (1, 1, 1)
    float inputs:subsurface_scale = 1
    vector3f inputs:tangent
    float inputs:thin_film_IOR = 1.5
    float inputs:thin_film_thickness = 0
    bool inputs:thin_walled = 0
    float inputs:transmission = 0
    color3f inputs:transmission_color = (1, 1, 1)
    float inputs:transmission_depth = 0
    float inputs:transmission_dispersion = 0
    float inputs:transmission_extra_roughness = 0
    color3f inputs:transmission_scatter = (0, 0, 0)
    float inputs:transmission_scatter_anisotropy = 0
    token outputs:out
}

def Material "Marble_3D"
{
    token inputs:displacementshader
    token inputs:surfaceshader.connect = </SR_marble1.outputs:out>
    token outputs:out
}

